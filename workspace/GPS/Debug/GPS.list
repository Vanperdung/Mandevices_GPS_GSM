
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800a1d8  0800a1d8  0001a1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7b8  0800a7b8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7b8  0800a7b8  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7b8  0800a7b8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7b8  0800a7b8  0001a7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7bc  0800a7bc  0001a7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a7c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d4  200001f4  0800a9b4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013c8  0800a9b4  000213c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001314f  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000369e  00000000  00000000  0003336c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00036a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  00037d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b969  00000000  00000000  00038f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a63  00000000  00000000  000548e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000997ec  00000000  00000000  0006a344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103b30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006758  00000000  00000000  00103b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a1bc 	.word	0x0800a1bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800a1bc 	.word	0x0800a1bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2lz>:
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	4605      	mov	r5, r0
 8000acc:	460c      	mov	r4, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	4628      	mov	r0, r5
 8000ad4:	4621      	mov	r1, r4
 8000ad6:	f7ff ff71 	bl	80009bc <__aeabi_dcmplt>
 8000ada:	b928      	cbnz	r0, 8000ae8 <__aeabi_d2lz+0x20>
 8000adc:	4628      	mov	r0, r5
 8000ade:	4621      	mov	r1, r4
 8000ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ae4:	f000 b80a 	b.w	8000afc <__aeabi_d2ulz>
 8000ae8:	4628      	mov	r0, r5
 8000aea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000aee:	f000 f805 	bl	8000afc <__aeabi_d2ulz>
 8000af2:	4240      	negs	r0, r0
 8000af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af8:	bd38      	pop	{r3, r4, r5, pc}
 8000afa:	bf00      	nop

08000afc <__aeabi_d2ulz>:
 8000afc:	b5d0      	push	{r4, r6, r7, lr}
 8000afe:	2200      	movs	r2, #0
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <__aeabi_d2ulz+0x34>)
 8000b02:	4606      	mov	r6, r0
 8000b04:	460f      	mov	r7, r1
 8000b06:	f7ff fce7 	bl	80004d8 <__aeabi_dmul>
 8000b0a:	f7ff ffbd 	bl	8000a88 <__aeabi_d2uiz>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	f7ff fc68 	bl	80003e4 <__aeabi_ui2d>
 8000b14:	2200      	movs	r2, #0
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <__aeabi_d2ulz+0x38>)
 8000b18:	f7ff fcde 	bl	80004d8 <__aeabi_dmul>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	460b      	mov	r3, r1
 8000b20:	4630      	mov	r0, r6
 8000b22:	4639      	mov	r1, r7
 8000b24:	f7ff fb20 	bl	8000168 <__aeabi_dsub>
 8000b28:	f7ff ffae 	bl	8000a88 <__aeabi_d2uiz>
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000b30:	3df00000 	.word	0x3df00000
 8000b34:	41f00000 	.word	0x41f00000

08000b38 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b4a:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <MX_ADC1_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b76:	f001 f9cf 	bl	8001f18 <HAL_ADC_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 fe98 	bl	80018b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b96:	f001 fb51 	bl	800223c <HAL_ADC_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ba0:	f000 fe88 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000210 	.word	0x20000210
 8000bb0:	40012400 	.word	0x40012400

08000bb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <HAL_ADC_MspInit+0x6c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d121      	bne.n	8000c18 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <HAL_ADC_MspInit+0x70>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <HAL_ADC_MspInit+0x70>)
 8000bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_ADC_MspInit+0x70>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_ADC_MspInit+0x70>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <HAL_ADC_MspInit+0x70>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_ADC_MspInit+0x70>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c04:	2301      	movs	r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_ADC_MspInit+0x74>)
 8000c14:	f001 fe36 	bl	8002884 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40012400 	.word	0x40012400
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010800 	.word	0x40010800

08000c2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <vApplicationGetIdleTaskMemory+0x28>)
 8000c3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	200002fc 	.word	0x200002fc
 8000c58:	20000350 	.word	0x20000350

08000c5c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af02      	add	r7, sp, #8
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(&general_task, "general_task", 300, NULL, 1, &general_task_handle);
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_FREERTOS_Init+0x38>)
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c70:	4909      	ldr	r1, [pc, #36]	; (8000c98 <MX_FREERTOS_Init+0x3c>)
 8000c72:	480a      	ldr	r0, [pc, #40]	; (8000c9c <MX_FREERTOS_Init+0x40>)
 8000c74:	f003 fe08 	bl	8004888 <xTaskCreate>
  xTaskCreate(&gps_task, "gps_task", 300, NULL, 2, &gps_task_handle);
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_FREERTOS_Init+0x44>)
 8000c7a:	9301      	str	r3, [sp, #4]
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2300      	movs	r3, #0
 8000c82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c86:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <MX_FREERTOS_Init+0x48>)
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <MX_FREERTOS_Init+0x4c>)
 8000c8a:	f003 fdfd 	bl	8004888 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000240 	.word	0x20000240
 8000c98:	0800a1d8 	.word	0x0800a1d8
 8000c9c:	08000d29 	.word	0x08000d29
 8000ca0:	20000244 	.word	0x20000244
 8000ca4:	0800a1e8 	.word	0x0800a1e8
 8000ca8:	08000f2d 	.word	0x08000f2d

08000cac <HAL_GPIO_EXTI_Callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d10a      	bne.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x26>
	{
		battery_level = HAL_ADC_GetValue(&hadc1);
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x48>)
 8000cbe:	f001 fab1 	bl	8002224 <HAL_ADC_GetValue>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000cc8:	801a      	strh	r2, [r3, #0]
		get_battery_level_flag = true;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x50>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
	else if(GPIO_Pin == GPIO_PIN_1)
	{
		battery_level = HAL_ADC_GetValue(&hadc1);
		send_sms_flag = true;
	}
}
 8000cd0:	e00c      	b.n	8000cec <HAL_GPIO_EXTI_Callback+0x40>
	else if(GPIO_Pin == GPIO_PIN_1)
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d109      	bne.n	8000cec <HAL_GPIO_EXTI_Callback+0x40>
		battery_level = HAL_ADC_GetValue(&hadc1);
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x48>)
 8000cda:	f001 faa3 	bl	8002224 <HAL_ADC_GetValue>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ce4:	801a      	strh	r2, [r3, #0]
		send_sms_flag = true;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x54>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000210 	.word	0x20000210
 8000cf8:	200002e2 	.word	0x200002e2
 8000cfc:	200002e1 	.word	0x200002e1
 8000d00:	200002e0 	.word	0x200002e0

08000d04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_UART_RxCpltCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_UART_RxCpltCallback+0x16>
	{
		quectel_callback();
 8000d16:	f000 fb2d 	bl	8001374 <quectel_callback>
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40004800 	.word	0x40004800

08000d28 <general_task>:

void general_task(void *param) // hien thi dien ap pin va gui tin nhan den dien thoai
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09e      	sub	sp, #120	; 0x78
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	TickType_t tick_battery = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	677b      	str	r3, [r7, #116]	; 0x74
	TickType_t tick_sms = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t mess_content[100] = {0};
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2260      	movs	r2, #96	; 0x60
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f004 fe37 	bl	80059b8 <memset>

	while(sim_init() != STM_OK)
 8000d4a:	e003      	b.n	8000d54 <general_task+0x2c>
	{
		vTaskDelay(1000);
 8000d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d50:	f003 fec8 	bl	8004ae4 <vTaskDelay>
	while(sim_init() != STM_OK)
 8000d54:	f000 fa5a 	bl	800120c <sim_init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d1f6      	bne.n	8000d4c <general_task+0x24>
	}
	while(1)
	{
		if(get_battery_level_flag == true)
 8000d5e:	4b6b      	ldr	r3, [pc, #428]	; (8000f0c <general_task+0x1e4>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d07d      	beq.n	8000e62 <general_task+0x13a>
		{
			tick_battery = xTaskGetTickCount();
 8000d66:	f003 fffb 	bl	8004d60 <xTaskGetTickCount>
 8000d6a:	6778      	str	r0, [r7, #116]	; 0x74
			get_battery_level_flag = false;
 8000d6c:	4b67      	ldr	r3, [pc, #412]	; (8000f0c <general_task+0x1e4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
			if(battery_level > 3057)
 8000d72:	4b67      	ldr	r3, [pc, #412]	; (8000f10 <general_task+0x1e8>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	f640 32f1 	movw	r2, #3057	; 0xbf1
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d914      	bls.n	8000da8 <general_task+0x80>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2110      	movs	r1, #16
 8000d82:	4864      	ldr	r0, [pc, #400]	; (8000f14 <general_task+0x1ec>)
 8000d84:	f001 ff19 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	4861      	ldr	r0, [pc, #388]	; (8000f14 <general_task+0x1ec>)
 8000d8e:	f001 ff14 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	485f      	ldr	r0, [pc, #380]	; (8000f14 <general_task+0x1ec>)
 8000d98:	f001 ff0f 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	485c      	ldr	r0, [pc, #368]	; (8000f14 <general_task+0x1ec>)
 8000da2:	f001 ff0a 	bl	8002bba <HAL_GPIO_WritePin>
 8000da6:	e079      	b.n	8000e9c <general_task+0x174>
			}
			else if(battery_level <= 3057 && battery_level > 2817)
 8000da8:	4b59      	ldr	r3, [pc, #356]	; (8000f10 <general_task+0x1e8>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	f640 32f1 	movw	r2, #3057	; 0xbf1
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d81a      	bhi.n	8000dea <general_task+0xc2>
 8000db4:	4b56      	ldr	r3, [pc, #344]	; (8000f10 <general_task+0x1e8>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	f640 3201 	movw	r2, #2817	; 0xb01
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d914      	bls.n	8000dea <general_task+0xc2>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4853      	ldr	r0, [pc, #332]	; (8000f14 <general_task+0x1ec>)
 8000dc6:	f001 fef8 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2120      	movs	r1, #32
 8000dce:	4851      	ldr	r0, [pc, #324]	; (8000f14 <general_task+0x1ec>)
 8000dd0:	f001 fef3 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	484e      	ldr	r0, [pc, #312]	; (8000f14 <general_task+0x1ec>)
 8000dda:	f001 feee 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	484c      	ldr	r0, [pc, #304]	; (8000f14 <general_task+0x1ec>)
 8000de4:	f001 fee9 	bl	8002bba <HAL_GPIO_WritePin>
 8000de8:	e058      	b.n	8000e9c <general_task+0x174>
			}
			else if(battery_level <= 2817 && battery_level > 2705)
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <general_task+0x1e8>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	f640 3201 	movw	r2, #2817	; 0xb01
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d81a      	bhi.n	8000e2c <general_task+0x104>
 8000df6:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <general_task+0x1e8>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	f640 2291 	movw	r2, #2705	; 0xa91
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d914      	bls.n	8000e2c <general_task+0x104>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2110      	movs	r1, #16
 8000e06:	4843      	ldr	r0, [pc, #268]	; (8000f14 <general_task+0x1ec>)
 8000e08:	f001 fed7 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2120      	movs	r1, #32
 8000e10:	4840      	ldr	r0, [pc, #256]	; (8000f14 <general_task+0x1ec>)
 8000e12:	f001 fed2 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2140      	movs	r1, #64	; 0x40
 8000e1a:	483e      	ldr	r0, [pc, #248]	; (8000f14 <general_task+0x1ec>)
 8000e1c:	f001 fecd 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	483b      	ldr	r0, [pc, #236]	; (8000f14 <general_task+0x1ec>)
 8000e26:	f001 fec8 	bl	8002bba <HAL_GPIO_WritePin>
 8000e2a:	e037      	b.n	8000e9c <general_task+0x174>
			}
			else if (battery_level <= 2705)
 8000e2c:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <general_task+0x1e8>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	f640 2291 	movw	r2, #2705	; 0xa91
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d831      	bhi.n	8000e9c <general_task+0x174>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4835      	ldr	r0, [pc, #212]	; (8000f14 <general_task+0x1ec>)
 8000e3e:	f001 febc 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2120      	movs	r1, #32
 8000e46:	4833      	ldr	r0, [pc, #204]	; (8000f14 <general_task+0x1ec>)
 8000e48:	f001 feb7 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2140      	movs	r1, #64	; 0x40
 8000e50:	4830      	ldr	r0, [pc, #192]	; (8000f14 <general_task+0x1ec>)
 8000e52:	f001 feb2 	bl	8002bba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	482e      	ldr	r0, [pc, #184]	; (8000f14 <general_task+0x1ec>)
 8000e5c:	f001 fead 	bl	8002bba <HAL_GPIO_WritePin>
 8000e60:	e01c      	b.n	8000e9c <general_task+0x174>
			}
		}
		else if(xTaskGetTickCount() > tick_battery + 5000)
 8000e62:	f003 ff7d 	bl	8004d60 <xTaskGetTickCount>
 8000e66:	4602      	mov	r2, r0
 8000e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e6a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000e6e:	3308      	adds	r3, #8
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d913      	bls.n	8000e9c <general_task+0x174>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4826      	ldr	r0, [pc, #152]	; (8000f14 <general_task+0x1ec>)
 8000e7a:	f001 fe9e 	bl	8002bba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2120      	movs	r1, #32
 8000e82:	4824      	ldr	r0, [pc, #144]	; (8000f14 <general_task+0x1ec>)
 8000e84:	f001 fe99 	bl	8002bba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	4821      	ldr	r0, [pc, #132]	; (8000f14 <general_task+0x1ec>)
 8000e8e:	f001 fe94 	bl	8002bba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	481f      	ldr	r0, [pc, #124]	; (8000f14 <general_task+0x1ec>)
 8000e98:	f001 fe8f 	bl	8002bba <HAL_GPIO_WritePin>
		}

		if(send_sms_flag == true && ((xTaskGetTickCount() > tick_sms + 5000) || tick_sms == 0))
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <general_task+0x1f0>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d02b      	beq.n	8000efc <general_task+0x1d4>
 8000ea4:	f003 ff5c 	bl	8004d60 <xTaskGetTickCount>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d802      	bhi.n	8000ebc <general_task+0x194>
 8000eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d11f      	bne.n	8000efc <general_task+0x1d4>
		{
			tick_sms = xTaskGetTickCount();
 8000ebc:	f003 ff50 	bl	8004d60 <xTaskGetTickCount>
 8000ec0:	6738      	str	r0, [r7, #112]	; 0x70
			send_sms_flag = false;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <general_task+0x1f0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
			sprintf((char*)mess_content, "https://www.google.com/maps/search/?api=1&query=%s,%s\n", data_lat, data_long);
 8000ec8:	f107 000c 	add.w	r0, r7, #12
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <general_task+0x1f4>)
 8000ece:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <general_task+0x1f8>)
 8000ed0:	4914      	ldr	r1, [pc, #80]	; (8000f24 <general_task+0x1fc>)
 8000ed2:	f004 fd79 	bl	80059c8 <siprintf>
			sim_send_mess(mess_content, (uint8_t*)number);
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	4913      	ldr	r1, [pc, #76]	; (8000f28 <general_task+0x200>)
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f93d 	bl	800115c <sim_send_mess>
			memset((char*)mess_content, '\0', strlen((char*)mess_content));
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff f932 	bl	8000150 <strlen>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 fd5f 	bl	80059b8 <memset>
 8000efa:	e002      	b.n	8000f02 <general_task+0x1da>
		}
		else
			vTaskDelay(100);
 8000efc:	2064      	movs	r0, #100	; 0x64
 8000efe:	f003 fdf1 	bl	8004ae4 <vTaskDelay>
		vTaskDelay(100);
 8000f02:	2064      	movs	r0, #100	; 0x64
 8000f04:	f003 fdee 	bl	8004ae4 <vTaskDelay>
		if(get_battery_level_flag == true)
 8000f08:	e729      	b.n	8000d5e <general_task+0x36>
 8000f0a:	bf00      	nop
 8000f0c:	200002e1 	.word	0x200002e1
 8000f10:	200002e2 	.word	0x200002e2
 8000f14:	40010c00 	.word	0x40010c00
 8000f18:	200002e0 	.word	0x200002e0
 8000f1c:	200002f0 	.word	0x200002f0
 8000f20:	200002e4 	.word	0x200002e4
 8000f24:	0800a1f4 	.word	0x0800a1f4
 8000f28:	20000000 	.word	0x20000000

08000f2c <gps_task>:
	}
}

void gps_task(void *param)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	quectel_init();
 8000f34:	f000 fa00 	bl	8001338 <quectel_init>
	while(1)
	{
		quectel_recv_gps();
 8000f38:	f000 fa72 	bl	8001420 <quectel_recv_gps>
		quectel_procees_gps(&quectel_gps, data_gps_rx, data_lat, data_long);
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <gps_task+0x28>)
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <gps_task+0x2c>)
 8000f40:	4906      	ldr	r1, [pc, #24]	; (8000f5c <gps_task+0x30>)
 8000f42:	4807      	ldr	r0, [pc, #28]	; (8000f60 <gps_task+0x34>)
 8000f44:	f000 fa98 	bl	8001478 <quectel_procees_gps>
		vTaskDelay(2000);
 8000f48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f4c:	f003 fdca 	bl	8004ae4 <vTaskDelay>
		quectel_recv_gps();
 8000f50:	e7f2      	b.n	8000f38 <gps_task+0xc>
 8000f52:	bf00      	nop
 8000f54:	200002f0 	.word	0x200002f0
 8000f58:	200002e4 	.word	0x200002e4
 8000f5c:	2000027c 	.word	0x2000027c
 8000f60:	20000248 	.word	0x20000248

08000f64 <reverse>:
#include "gpio.h"

#include "func.h"

void reverse(char *str, int len)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000f78:	e018      	b.n	8000fac <reverse+0x48>
    {
        temp = str[i];
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	441a      	add	r2, r3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	440b      	add	r3, r1
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	701a      	strb	r2, [r3, #0]
        i++;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
        j--;
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbe2      	blt.n	8000f7a <reverse+0x16>
    }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
    if(x == 0)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d126      	bne.n	8001024 <intToStr+0x64>
        str[i++] = '0';
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	617a      	str	r2, [r7, #20]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2230      	movs	r2, #48	; 0x30
 8000fe4:	701a      	strb	r2, [r3, #0]

    while (x)
 8000fe6:	e01d      	b.n	8001024 <intToStr+0x64>
    {
        str[i++] = (x % 10) + '0';
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <intToStr+0xa0>)
 8000fec:	fb83 1302 	smull	r1, r3, r3, r2
 8000ff0:	1099      	asrs	r1, r3, #2
 8000ff2:	17d3      	asrs	r3, r2, #31
 8000ff4:	1ac9      	subs	r1, r1, r3
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	1ad1      	subs	r1, r2, r3
 8001000:	b2ca      	uxtb	r2, r1
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	1c59      	adds	r1, r3, #1
 8001006:	6179      	str	r1, [r7, #20]
 8001008:	4619      	mov	r1, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	440b      	add	r3, r1
 800100e:	3230      	adds	r2, #48	; 0x30
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <intToStr+0xa0>)
 8001018:	fb82 1203 	smull	r1, r2, r2, r3
 800101c:	1092      	asrs	r2, r2, #2
 800101e:	17db      	asrs	r3, r3, #31
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	60fb      	str	r3, [r7, #12]
    while (x)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1de      	bne.n	8000fe8 <intToStr+0x28>
    }

    while (i < d)
 800102a:	e007      	b.n	800103c <intToStr+0x7c>
        str[i++] = '0';
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	617a      	str	r2, [r7, #20]
 8001032:	461a      	mov	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4413      	add	r3, r2
 8001038:	2230      	movs	r2, #48	; 0x30
 800103a:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbf3      	blt.n	800102c <intToStr+0x6c>

    reverse(str, i);
 8001044:	6979      	ldr	r1, [r7, #20]
 8001046:	68b8      	ldr	r0, [r7, #8]
 8001048:	f7ff ff8c 	bl	8000f64 <reverse>
    str[i] = '\0';
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
    return i;
 8001056:	697b      	ldr	r3, [r7, #20]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	66666667 	.word	0x66666667

08001064 <ftoa>:

void ftoa(double n, char* res, int afterpoint)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	603b      	str	r3, [r7, #0]
    int ipart = (int)n;
 8001072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001076:	f7ff fcdf 	bl	8000a38 <__aeabi_d2iz>
 800107a:	4603      	mov	r3, r0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    double fpart = n - (double)ipart;
 800107e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001080:	f7ff f9c0 	bl	8000404 <__aeabi_i2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800108c:	f7ff f86c 	bl	8000168 <__aeabi_dsub>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int i = intToStr(ipart, res, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800109e:	f7ff ff8f 	bl	8000fc0 <intToStr>
 80010a2:	6178      	str	r0, [r7, #20]
    if (afterpoint != 0)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d024      	beq.n	80010f4 <ftoa+0x90>
    {
        res[i] = '.';
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	222e      	movs	r2, #46	; 0x2e
 80010b2:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 80010b4:	6838      	ldr	r0, [r7, #0]
 80010b6:	f7ff f9a5 	bl	8000404 <__aeabi_i2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	490e      	ldr	r1, [pc, #56]	; (80010fc <ftoa+0x98>)
 80010c4:	f008 f996 	bl	80093f4 <pow>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010d0:	f7ff fa02 	bl	80004d8 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 80010dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e0:	f7ff fcaa 	bl	8000a38 <__aeabi_d2iz>
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff ff66 	bl	8000fc0 <intToStr>
    }
}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40240000 	.word	0x40240000

08001100 <sim_read_resp>:

stm_err_t sim_read_resp(uint8_t *data_format, uint32_t delay, bool check)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	4613      	mov	r3, r2
 800110c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_resp[20] = {0};
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	f107 0318 	add.w	r3, r7, #24
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive(&huart2, data_resp, 20, delay);
 8001120:	f107 0114 	add.w	r1, r7, #20
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2214      	movs	r2, #20
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <sim_read_resp+0x58>)
 800112a:	f002 fda0 	bl	8003c6e <HAL_UART_Receive>
	if(check == true)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00c      	beq.n	800114e <sim_read_resp+0x4e>
	{
		if(strstr((char*)data_resp, (char*)data_format) != NULL)
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	68f9      	ldr	r1, [r7, #12]
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fcd3 	bl	8005ae6 <strstr>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <sim_read_resp+0x4a>
			return STM_OK;
 8001146:	2301      	movs	r3, #1
 8001148:	e002      	b.n	8001150 <sim_read_resp+0x50>
		return STM_NOT_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <sim_read_resp+0x50>
	}
	else
		return STM_OK;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200005e0 	.word	0x200005e0

0800115c <sim_send_mess>:

void sim_send_mess(uint8_t *data_mess, uint8_t *number)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09c      	sub	sp, #112	; 0x70
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	char end_mess[2] = {0x1A, 0x00};
 8001166:	231a      	movs	r3, #26
 8001168:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	uint8_t at_send_command[100] = {0};
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2260      	movs	r2, #96	; 0x60
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fc1d 	bl	80059b8 <memset>
	sprintf((char*)at_send_command, "AT+CMGS=\"%s\"\r\n", (char*)number);
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	491e      	ldr	r1, [pc, #120]	; (8001200 <sim_send_mess+0xa4>)
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fc1e 	bl	80059c8 <siprintf>
	HAL_UART_Transmit(&huart2, at_send_command, strlen((char*)at_send_command), 1000);
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4618      	mov	r0, r3
 8001192:	f7fe ffdd 	bl	8000150 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	b29a      	uxth	r2, r3
 800119a:	f107 0108 	add.w	r1, r7, #8
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <sim_send_mess+0xa8>)
 80011a4:	f002 fcd1 	bl	8003b4a <HAL_UART_Transmit>
	sim_read_resp((uint8_t*)">", 1000, true);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <sim_send_mess+0xac>)
 80011b0:	f7ff ffa6 	bl	8001100 <sim_read_resp>
	HAL_UART_Transmit(&huart2, data_mess, strlen((char*)data_mess), 1000);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7fe ffcb 	bl	8000150 <strlen>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <sim_send_mess+0xa8>)
 80011c6:	f002 fcc0 	bl	8003b4a <HAL_UART_Transmit>
	vTaskDelay(1000);
 80011ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ce:	f003 fc89 	bl	8004ae4 <vTaskDelay>
	HAL_UART_Transmit(&huart2, (uint8_t*)end_mess, strlen(end_mess), 1000);
 80011d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7fe ffba 	bl	8000150 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80011e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e8:	4806      	ldr	r0, [pc, #24]	; (8001204 <sim_send_mess+0xa8>)
 80011ea:	f002 fcae 	bl	8003b4a <HAL_UART_Transmit>
	vTaskDelay(1000);
 80011ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f2:	f003 fc77 	bl	8004ae4 <vTaskDelay>
}
 80011f6:	bf00      	nop
 80011f8:	3770      	adds	r7, #112	; 0x70
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800a22c 	.word	0x0800a22c
 8001204:	200005e0 	.word	0x200005e0
 8001208:	0800a23c 	.word	0x0800a23c

0800120c <sim_init>:

stm_err_t sim_init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	// kich hoat sim
	while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 8001210:	e008      	b.n	8001224 <sim_init+0x18>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001218:	483e      	ldr	r0, [pc, #248]	; (8001314 <sim_init+0x108>)
 800121a:	f001 fcce 	bl	8002bba <HAL_GPIO_WritePin>
		vTaskDelay(50);
 800121e:	2032      	movs	r0, #50	; 0x32
 8001220:	f003 fc60 	bl	8004ae4 <vTaskDelay>
	while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 8001224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001228:	483a      	ldr	r0, [pc, #232]	; (8001314 <sim_init+0x108>)
 800122a:	f001 fcaf 	bl	8002b8c <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0ee      	beq.n	8001212 <sim_init+0x6>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123a:	4836      	ldr	r0, [pc, #216]	; (8001314 <sim_init+0x108>)
 800123c:	f001 fcbd 	bl	8002bba <HAL_GPIO_WritePin>


	HAL_UART_Transmit(&huart2, (uint8_t*)"ATE0\r\n", strlen("ATE0\r\n"), 1000);
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	2206      	movs	r2, #6
 8001246:	4934      	ldr	r1, [pc, #208]	; (8001318 <sim_init+0x10c>)
 8001248:	4834      	ldr	r0, [pc, #208]	; (800131c <sim_init+0x110>)
 800124a:	f002 fc7e 	bl	8003b4a <HAL_UART_Transmit>
	if(sim_read_resp((uint8_t*)"OK", 200, true) != STM_OK)
 800124e:	2201      	movs	r2, #1
 8001250:	21c8      	movs	r1, #200	; 0xc8
 8001252:	4833      	ldr	r0, [pc, #204]	; (8001320 <sim_init+0x114>)
 8001254:	f7ff ff54 	bl	8001100 <sim_read_resp>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d001      	beq.n	8001262 <sim_init+0x56>
		return STM_NOT_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e055      	b.n	800130e <sim_init+0x102>

	HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", strlen("AT\r\n"), 1000);
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	2204      	movs	r2, #4
 8001268:	492e      	ldr	r1, [pc, #184]	; (8001324 <sim_init+0x118>)
 800126a:	482c      	ldr	r0, [pc, #176]	; (800131c <sim_init+0x110>)
 800126c:	f002 fc6d 	bl	8003b4a <HAL_UART_Transmit>
	if(sim_read_resp((uint8_t*)"OK", 200, true) != STM_OK)
 8001270:	2201      	movs	r2, #1
 8001272:	21c8      	movs	r1, #200	; 0xc8
 8001274:	482a      	ldr	r0, [pc, #168]	; (8001320 <sim_init+0x114>)
 8001276:	f7ff ff43 	bl	8001100 <sim_read_resp>
 800127a:	4603      	mov	r3, r0
 800127c:	2b01      	cmp	r3, #1
 800127e:	d001      	beq.n	8001284 <sim_init+0x78>
		return STM_NOT_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	e044      	b.n	800130e <sim_init+0x102>

	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CPIN?\r\n", strlen("AT+CPIN?\r\n"), 1000);
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	220a      	movs	r2, #10
 800128a:	4927      	ldr	r1, [pc, #156]	; (8001328 <sim_init+0x11c>)
 800128c:	4823      	ldr	r0, [pc, #140]	; (800131c <sim_init+0x110>)
 800128e:	f002 fc5c 	bl	8003b4a <HAL_UART_Transmit>
	if(sim_read_resp((uint8_t*)"OK", 200, false) != STM_OK)
 8001292:	2200      	movs	r2, #0
 8001294:	21c8      	movs	r1, #200	; 0xc8
 8001296:	4822      	ldr	r0, [pc, #136]	; (8001320 <sim_init+0x114>)
 8001298:	f7ff ff32 	bl	8001100 <sim_read_resp>
 800129c:	4603      	mov	r3, r0
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d001      	beq.n	80012a6 <sim_init+0x9a>
		return STM_NOT_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e033      	b.n	800130e <sim_init+0x102>

	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+COPS?\r\n", strlen("AT+COPS?\r\n"), 1000);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	220a      	movs	r2, #10
 80012ac:	491f      	ldr	r1, [pc, #124]	; (800132c <sim_init+0x120>)
 80012ae:	481b      	ldr	r0, [pc, #108]	; (800131c <sim_init+0x110>)
 80012b0:	f002 fc4b 	bl	8003b4a <HAL_UART_Transmit>
	if(sim_read_resp((uint8_t*)"OK", 200, false) != STM_OK)
 80012b4:	2200      	movs	r2, #0
 80012b6:	21c8      	movs	r1, #200	; 0xc8
 80012b8:	4819      	ldr	r0, [pc, #100]	; (8001320 <sim_init+0x114>)
 80012ba:	f7ff ff21 	bl	8001100 <sim_read_resp>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d001      	beq.n	80012c8 <sim_init+0xbc>
		return STM_NOT_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e022      	b.n	800130e <sim_init+0x102>

	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CMGF=1\r\n", strlen("AT+CMGF=1\r\n"), 1000);
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	220b      	movs	r2, #11
 80012ce:	4918      	ldr	r1, [pc, #96]	; (8001330 <sim_init+0x124>)
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <sim_init+0x110>)
 80012d2:	f002 fc3a 	bl	8003b4a <HAL_UART_Transmit>
	if(sim_read_resp((uint8_t*)"OK", 200, false) != STM_OK)
 80012d6:	2200      	movs	r2, #0
 80012d8:	21c8      	movs	r1, #200	; 0xc8
 80012da:	4811      	ldr	r0, [pc, #68]	; (8001320 <sim_init+0x114>)
 80012dc:	f7ff ff10 	bl	8001100 <sim_read_resp>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <sim_init+0xde>
		return STM_NOT_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e011      	b.n	800130e <sim_init+0x102>

	HAL_UART_Transmit(&huart2, (uint8_t*)"AT&W\r\n", strlen("AT&W\r\n"), 1000);
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	2206      	movs	r2, #6
 80012f0:	4910      	ldr	r1, [pc, #64]	; (8001334 <sim_init+0x128>)
 80012f2:	480a      	ldr	r0, [pc, #40]	; (800131c <sim_init+0x110>)
 80012f4:	f002 fc29 	bl	8003b4a <HAL_UART_Transmit>
	if(sim_read_resp((uint8_t*)"OK", 200, false) != STM_OK)
 80012f8:	2200      	movs	r2, #0
 80012fa:	21c8      	movs	r1, #200	; 0xc8
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <sim_init+0x114>)
 80012fe:	f7ff feff 	bl	8001100 <sim_read_resp>
 8001302:	4603      	mov	r3, r0
 8001304:	2b01      	cmp	r3, #1
 8001306:	d001      	beq.n	800130c <sim_init+0x100>
		return STM_NOT_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	e000      	b.n	800130e <sim_init+0x102>
	return STM_OK;
 800130c:	2301      	movs	r3, #1

}
 800130e:	4618      	mov	r0, r3
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40010800 	.word	0x40010800
 8001318:	0800a240 	.word	0x0800a240
 800131c:	200005e0 	.word	0x200005e0
 8001320:	0800a248 	.word	0x0800a248
 8001324:	0800a24c 	.word	0x0800a24c
 8001328:	0800a254 	.word	0x0800a254
 800132c:	0800a260 	.word	0x0800a260
 8001330:	0800a26c 	.word	0x0800a26c
 8001334:	0800a278 	.word	0x0800a278

08001338 <quectel_init>:

void quectel_init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3 ,(uint8_t*)"$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n", strlen("$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"), 1000);
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	2233      	movs	r2, #51	; 0x33
 8001342:	4909      	ldr	r1, [pc, #36]	; (8001368 <quectel_init+0x30>)
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <quectel_init+0x34>)
 8001346:	f002 fc00 	bl	8003b4a <HAL_UART_Transmit>
	vTaskDelay(200);
 800134a:	20c8      	movs	r0, #200	; 0xc8
 800134c:	f003 fbca 	bl	8004ae4 <vTaskDelay>
	HAL_UART_Transmit(&huart3, (uint8_t*)"$PMTK285,2,100*3E\r\n", strlen("$PMTK285,2,100*3E\r\n"), 1000);
 8001350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001354:	2213      	movs	r2, #19
 8001356:	4906      	ldr	r1, [pc, #24]	; (8001370 <quectel_init+0x38>)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <quectel_init+0x34>)
 800135a:	f002 fbf6 	bl	8003b4a <HAL_UART_Transmit>
	vTaskDelay(200);
 800135e:	20c8      	movs	r0, #200	; 0xc8
 8001360:	f003 fbc0 	bl	8004ae4 <vTaskDelay>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	0800a280 	.word	0x0800a280
 800136c:	20000624 	.word	0x20000624
 8001370:	0800a2b4 	.word	0x0800a2b4

08001374 <quectel_callback>:

void quectel_callback(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	if(data_rx == '$' && quectel_state == QUECTEL_START_DATA)
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <quectel_callback+0x98>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b24      	cmp	r3, #36	; 0x24
 800137e:	d115      	bne.n	80013ac <quectel_callback+0x38>
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <quectel_callback+0x9c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d111      	bne.n	80013ac <quectel_callback+0x38>
	{
		data_gps_rx[k++] = data_rx;
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <quectel_callback+0xa0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	4921      	ldr	r1, [pc, #132]	; (8001414 <quectel_callback+0xa0>)
 8001390:	600a      	str	r2, [r1, #0]
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <quectel_callback+0x98>)
 8001394:	7811      	ldrb	r1, [r2, #0]
 8001396:	4a20      	ldr	r2, [pc, #128]	; (8001418 <quectel_callback+0xa4>)
 8001398:	54d1      	strb	r1, [r2, r3]
		quectel_state = QUECTEL_DATA;
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <quectel_callback+0x9c>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&data_rx, 1);
 80013a0:	2201      	movs	r2, #1
 80013a2:	491a      	ldr	r1, [pc, #104]	; (800140c <quectel_callback+0x98>)
 80013a4:	481d      	ldr	r0, [pc, #116]	; (800141c <quectel_callback+0xa8>)
 80013a6:	f002 fd04 	bl	8003db2 <HAL_UART_Receive_IT>
 80013aa:	e02d      	b.n	8001408 <quectel_callback+0x94>
	}
	else if(data_rx == '\n' && quectel_state == QUECTEL_DATA)
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <quectel_callback+0x98>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b0a      	cmp	r3, #10
 80013b2:	d110      	bne.n	80013d6 <quectel_callback+0x62>
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <quectel_callback+0x9c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d10c      	bne.n	80013d6 <quectel_callback+0x62>
	{
		data_gps_rx[k++] = data_rx;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <quectel_callback+0xa0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	4914      	ldr	r1, [pc, #80]	; (8001414 <quectel_callback+0xa0>)
 80013c4:	600a      	str	r2, [r1, #0]
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <quectel_callback+0x98>)
 80013c8:	7811      	ldrb	r1, [r2, #0]
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <quectel_callback+0xa4>)
 80013cc:	54d1      	strb	r1, [r2, r3]
		quectel_state = QUECTEL_END_DATA;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <quectel_callback+0x9c>)
 80013d0:	2202      	movs	r2, #2
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	e018      	b.n	8001408 <quectel_callback+0x94>
	}
	else if(quectel_state == QUECTEL_DATA)
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <quectel_callback+0x9c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d10e      	bne.n	80013fc <quectel_callback+0x88>
	{
		data_gps_rx[k++] = data_rx;
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <quectel_callback+0xa0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	490b      	ldr	r1, [pc, #44]	; (8001414 <quectel_callback+0xa0>)
 80013e6:	600a      	str	r2, [r1, #0]
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <quectel_callback+0x98>)
 80013ea:	7811      	ldrb	r1, [r2, #0]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <quectel_callback+0xa4>)
 80013ee:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&data_rx, 1);
 80013f0:	2201      	movs	r2, #1
 80013f2:	4906      	ldr	r1, [pc, #24]	; (800140c <quectel_callback+0x98>)
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <quectel_callback+0xa8>)
 80013f6:	f002 fcdc 	bl	8003db2 <HAL_UART_Receive_IT>
	}
	else
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&data_rx, 1);
}
 80013fa:	e005      	b.n	8001408 <quectel_callback+0x94>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&data_rx, 1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	4903      	ldr	r1, [pc, #12]	; (800140c <quectel_callback+0x98>)
 8001400:	4806      	ldr	r0, [pc, #24]	; (800141c <quectel_callback+0xa8>)
 8001402:	f002 fcd6 	bl	8003db2 <HAL_UART_Receive_IT>
}
 8001406:	e7ff      	b.n	8001408 <quectel_callback+0x94>
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000278 	.word	0x20000278
 8001410:	20000270 	.word	0x20000270
 8001414:	20000274 	.word	0x20000274
 8001418:	2000027c 	.word	0x2000027c
 800141c:	20000624 	.word	0x20000624

08001420 <quectel_recv_gps>:

void quectel_recv_gps(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	k = 0;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <quectel_recv_gps+0x44>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
	memset(data_gps_rx, '\0', strlen(data_gps_rx));
 800142a:	480f      	ldr	r0, [pc, #60]	; (8001468 <quectel_recv_gps+0x48>)
 800142c:	f7fe fe90 	bl	8000150 <strlen>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	2100      	movs	r1, #0
 8001436:	480c      	ldr	r0, [pc, #48]	; (8001468 <quectel_recv_gps+0x48>)
 8001438:	f004 fabe 	bl	80059b8 <memset>
	quectel_state = QUECTEL_START_DATA;
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <quectel_recv_gps+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&data_rx, 1);
 8001442:	2201      	movs	r2, #1
 8001444:	490a      	ldr	r1, [pc, #40]	; (8001470 <quectel_recv_gps+0x50>)
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <quectel_recv_gps+0x54>)
 8001448:	f002 fcb3 	bl	8003db2 <HAL_UART_Receive_IT>
	while(!(quectel_state == QUECTEL_END_DATA))
 800144c:	e002      	b.n	8001454 <quectel_recv_gps+0x34>
	{
		vTaskDelay(100);
 800144e:	2064      	movs	r0, #100	; 0x64
 8001450:	f003 fb48 	bl	8004ae4 <vTaskDelay>
	while(!(quectel_state == QUECTEL_END_DATA))
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <quectel_recv_gps+0x4c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d1f8      	bne.n	800144e <quectel_recv_gps+0x2e>
	}
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000274 	.word	0x20000274
 8001468:	2000027c 	.word	0x2000027c
 800146c:	20000270 	.word	0x20000270
 8001470:	20000278 	.word	0x20000278
 8001474:	20000624 	.word	0x20000624

08001478 <quectel_procees_gps>:

void quectel_procees_gps(quectel_struct_t *gps, char *data_gps, char *data_lat, char *data_long)
{
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	b095      	sub	sp, #84	; 0x54
 800147c:	af06      	add	r7, sp, #24
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
    int temp = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
    double dec_part = 0;
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double int_part = 0;
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double latitude = 0;
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double longitude = 0;
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    data_gps = strstr(data_gps, "$GPGGA");
 80014ba:	4966      	ldr	r1, [pc, #408]	; (8001654 <quectel_procees_gps+0x1dc>)
 80014bc:	68b8      	ldr	r0, [r7, #8]
 80014be:	f004 fb12 	bl	8005ae6 <strstr>
 80014c2:	60b8      	str	r0, [r7, #8]
    sscanf(data_gps, "$GPGGA,%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,]", \
    		gps->utc_time, gps->latitude, &gps->NorS, gps->longtitude, &gps->EorW, &gps->fix_status, &gps->NoSatellites);
 80014c4:	68fd      	ldr	r5, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f103 060c 	add.w	r6, r3, #12
    sscanf(data_gps, "$GPGGA,%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,]", \
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3318      	adds	r3, #24
    		gps->utc_time, gps->latitude, &gps->NorS, gps->longtitude, &gps->EorW, &gps->fix_status, &gps->NoSatellites);
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	3219      	adds	r2, #25
    sscanf(data_gps, "$GPGGA,%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,]", \
 80014d4:	68f9      	ldr	r1, [r7, #12]
 80014d6:	3125      	adds	r1, #37	; 0x25
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	3026      	adds	r0, #38	; 0x26
 80014dc:	68fc      	ldr	r4, [r7, #12]
 80014de:	3427      	adds	r4, #39	; 0x27
 80014e0:	9404      	str	r4, [sp, #16]
 80014e2:	9003      	str	r0, [sp, #12]
 80014e4:	9102      	str	r1, [sp, #8]
 80014e6:	9201      	str	r2, [sp, #4]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4633      	mov	r3, r6
 80014ec:	462a      	mov	r2, r5
 80014ee:	495a      	ldr	r1, [pc, #360]	; (8001658 <quectel_procees_gps+0x1e0>)
 80014f0:	68b8      	ldr	r0, [r7, #8]
 80014f2:	f004 fa89 	bl	8005a08 <siscanf>

    latitude = atof(gps->latitude);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	330c      	adds	r3, #12
 80014fa:	4618      	mov	r0, r3
 80014fc:	f004 fa20 	bl	8005940 <atof>
 8001500:	e9c7 0106 	strd	r0, r1, [r7, #24]
    temp = (int)latitude;
 8001504:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001508:	f7ff fa96 	bl	8000a38 <__aeabi_d2iz>
 800150c:	4603      	mov	r3, r0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
    int_part = (double)(temp / 100);
 8001510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001512:	4a52      	ldr	r2, [pc, #328]	; (800165c <quectel_procees_gps+0x1e4>)
 8001514:	fb82 1203 	smull	r1, r2, r2, r3
 8001518:	1152      	asrs	r2, r2, #5
 800151a:	17db      	asrs	r3, r3, #31
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe ff70 	bl	8000404 <__aeabi_i2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	e9c7 2308 	strd	r2, r3, [r7, #32]
    dec_part = (double)(temp % 100) + latitude - (double)temp;
 800152c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152e:	4a4b      	ldr	r2, [pc, #300]	; (800165c <quectel_procees_gps+0x1e4>)
 8001530:	fb82 1203 	smull	r1, r2, r2, r3
 8001534:	1151      	asrs	r1, r2, #5
 8001536:	17da      	asrs	r2, r3, #31
 8001538:	1a8a      	subs	r2, r1, r2
 800153a:	2164      	movs	r1, #100	; 0x64
 800153c:	fb01 f202 	mul.w	r2, r1, r2
 8001540:	1a9a      	subs	r2, r3, r2
 8001542:	4610      	mov	r0, r2
 8001544:	f7fe ff5e 	bl	8000404 <__aeabi_i2d>
 8001548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800154c:	f7fe fe0e 	bl	800016c <__adddf3>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4614      	mov	r4, r2
 8001556:	461d      	mov	r5, r3
 8001558:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800155a:	f7fe ff53 	bl	8000404 <__aeabi_i2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fdff 	bl	8000168 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    latitude = int_part + dec_part / 60;
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <quectel_procees_gps+0x1e8>)
 8001578:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800157c:	f7ff f8d6 	bl	800072c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001588:	f7fe fdf0 	bl	800016c <__adddf3>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	e9c7 2306 	strd	r2, r3, [r7, #24]

    longitude = atof(gps->longtitude);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	3319      	adds	r3, #25
 8001598:	4618      	mov	r0, r3
 800159a:	f004 f9d1 	bl	8005940 <atof>
 800159e:	e9c7 0104 	strd	r0, r1, [r7, #16]
    temp = (int)longitude;
 80015a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015a6:	f7ff fa47 	bl	8000a38 <__aeabi_d2iz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
    int_part = (double)(temp / 100);
 80015ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b0:	4a2a      	ldr	r2, [pc, #168]	; (800165c <quectel_procees_gps+0x1e4>)
 80015b2:	fb82 1203 	smull	r1, r2, r2, r3
 80015b6:	1152      	asrs	r2, r2, #5
 80015b8:	17db      	asrs	r3, r3, #31
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff21 	bl	8000404 <__aeabi_i2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    dec_part = (double)(temp % 100) + longitude - (double)temp;
 80015ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015cc:	4a23      	ldr	r2, [pc, #140]	; (800165c <quectel_procees_gps+0x1e4>)
 80015ce:	fb82 1203 	smull	r1, r2, r2, r3
 80015d2:	1151      	asrs	r1, r2, #5
 80015d4:	17da      	asrs	r2, r3, #31
 80015d6:	1a8a      	subs	r2, r1, r2
 80015d8:	2164      	movs	r1, #100	; 0x64
 80015da:	fb01 f202 	mul.w	r2, r1, r2
 80015de:	1a9a      	subs	r2, r3, r2
 80015e0:	4610      	mov	r0, r2
 80015e2:	f7fe ff0f 	bl	8000404 <__aeabi_i2d>
 80015e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015ea:	f7fe fdbf 	bl	800016c <__adddf3>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4614      	mov	r4, r2
 80015f4:	461d      	mov	r5, r3
 80015f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015f8:	f7fe ff04 	bl	8000404 <__aeabi_i2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4620      	mov	r0, r4
 8001602:	4629      	mov	r1, r5
 8001604:	f7fe fdb0 	bl	8000168 <__aeabi_dsub>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    longitude = int_part + dec_part / 60;
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <quectel_procees_gps+0x1e8>)
 8001616:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800161a:	f7ff f887 	bl	800072c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001626:	f7fe fda1 	bl	800016c <__adddf3>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ftoa(latitude, data_lat, 6);
 8001632:	2306      	movs	r3, #6
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800163a:	f7ff fd13 	bl	8001064 <ftoa>
    ftoa(longitude, data_long, 6);
 800163e:	2306      	movs	r3, #6
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001646:	f7ff fd0d 	bl	8001064 <ftoa>
}
 800164a:	bf00      	nop
 800164c:	373c      	adds	r7, #60	; 0x3c
 800164e:	46bd      	mov	sp, r7
 8001650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001652:	bf00      	nop
 8001654:	0800a2c8 	.word	0x0800a2c8
 8001658:	0800a2d0 	.word	0x0800a2d0
 800165c:	51eb851f 	.word	0x51eb851f
 8001660:	404e0000 	.word	0x404e0000

08001664 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001678:	4b46      	ldr	r3, [pc, #280]	; (8001794 <MX_GPIO_Init+0x130>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a45      	ldr	r2, [pc, #276]	; (8001794 <MX_GPIO_Init+0x130>)
 800167e:	f043 0320 	orr.w	r3, r3, #32
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <MX_GPIO_Init+0x130>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <MX_GPIO_Init+0x130>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <MX_GPIO_Init+0x130>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <MX_GPIO_Init+0x130>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <MX_GPIO_Init+0x130>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a39      	ldr	r2, [pc, #228]	; (8001794 <MX_GPIO_Init+0x130>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b37      	ldr	r3, [pc, #220]	; (8001794 <MX_GPIO_Init+0x130>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c6:	4834      	ldr	r0, [pc, #208]	; (8001798 <MX_GPIO_Init+0x134>)
 80016c8:	f001 fa77 	bl	8002bba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80016d2:	4832      	ldr	r0, [pc, #200]	; (800179c <MX_GPIO_Init+0x138>)
 80016d4:	f001 fa71 	bl	8002bba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	21f0      	movs	r1, #240	; 0xf0
 80016dc:	482e      	ldr	r0, [pc, #184]	; (8001798 <MX_GPIO_Init+0x134>)
 80016de:	f001 fa6c 	bl	8002bba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80016e2:	2306      	movs	r3, #6
 80016e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <MX_GPIO_Init+0x13c>)
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4619      	mov	r1, r3
 80016f4:	4828      	ldr	r0, [pc, #160]	; (8001798 <MX_GPIO_Init+0x134>)
 80016f6:	f001 f8c5 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2302      	movs	r3, #2
 800170a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	4821      	ldr	r0, [pc, #132]	; (8001798 <MX_GPIO_Init+0x134>)
 8001714:	f001 f8b6 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001718:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800171c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2302      	movs	r3, #2
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	481a      	ldr	r0, [pc, #104]	; (800179c <MX_GPIO_Init+0x138>)
 8001732:	f001 f8a7 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	4814      	ldr	r0, [pc, #80]	; (800179c <MX_GPIO_Init+0x138>)
 800174c:	f001 f89a 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001750:	23f0      	movs	r3, #240	; 0xf0
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	480c      	ldr	r0, [pc, #48]	; (8001798 <MX_GPIO_Init+0x134>)
 8001768:	f001 f88c 	bl	8002884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 6, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2106      	movs	r1, #6
 8001770:	2007      	movs	r0, #7
 8001772:	f000 ffac 	bl	80026ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001776:	2007      	movs	r0, #7
 8001778:	f000 ffc5 	bl	8002706 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2105      	movs	r1, #5
 8001780:	2008      	movs	r0, #8
 8001782:	f000 ffa4 	bl	80026ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001786:	2008      	movs	r0, #8
 8001788:	f000 ffbd 	bl	8002706 <HAL_NVIC_EnableIRQ>

}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	40010c00 	.word	0x40010c00
 800179c:	40010800 	.word	0x40010800
 80017a0:	10210000 	.word	0x10210000

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a8:	f000 fb84 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ac:	f000 f814 	bl	80017d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b0:	f7ff ff58 	bl	8001664 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80017b4:	f000 fa12 	bl	8001bdc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80017b8:	f000 fa3a 	bl	8001c30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017bc:	f000 fa62 	bl	8001c84 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80017c0:	f7ff f9ba 	bl	8000b38 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80017c4:	4803      	ldr	r0, [pc, #12]	; (80017d4 <main+0x30>)
 80017c6:	f000 fc7f 	bl	80020c8 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80017ca:	f7ff fa47 	bl	8000c5c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80017ce:	f002 ff49 	bl	8004664 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <main+0x2e>
 80017d4:	20000210 	.word	0x20000210

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b094      	sub	sp, #80	; 0x50
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e2:	2228      	movs	r2, #40	; 0x28
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f004 f8e6 	bl	80059b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001808:	2301      	movs	r3, #1
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800180c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001816:	2301      	movs	r3, #1
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181a:	2302      	movs	r3, #2
 800181c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800181e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001824:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001828:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182e:	4618      	mov	r0, r3
 8001830:	f001 f9f4 	bl	8002c1c <HAL_RCC_OscConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800183a:	f000 f83b 	bl	80018b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183e:	230f      	movs	r3, #15
 8001840:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001842:	2302      	movs	r3, #2
 8001844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800184a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800184e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2102      	movs	r1, #2
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fc60 	bl	8003120 <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001866:	f000 f825 	bl	80018b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800186a:	2302      	movs	r3, #2
 800186c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800186e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001872:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fe1a 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001882:	f000 f817 	bl	80018b4 <Error_Handler>
  }
}
 8001886:	bf00      	nop
 8001888:	3750      	adds	r7, #80	; 0x50
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018a2:	f000 fb1d 	bl	8001ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40000400 	.word	0x40000400

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x8>
	...

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_MspInit+0x68>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_MspInit+0x68>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_MspInit+0x68>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_MspInit+0x68>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a11      	ldr	r2, [pc, #68]	; (8001928 <HAL_MspInit+0x68>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	61d3      	str	r3, [r2, #28]
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_MspInit+0x68>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	210f      	movs	r1, #15
 80018fa:	f06f 0001 	mvn.w	r0, #1
 80018fe:	f000 fee6 	bl	80026ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_MspInit+0x6c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_MspInit+0x6c>)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000

08001930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	201d      	movs	r0, #29
 8001946:	f000 fec2 	bl	80026ce <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800194a:	201d      	movs	r0, #29
 800194c:	f000 fedb 	bl	8002706 <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <HAL_InitTick+0xa0>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <HAL_InitTick+0xa0>)
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	61d3      	str	r3, [r2, #28]
 800195c:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_InitTick+0xa0>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001968:	f107 0210 	add.w	r2, r7, #16
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fd4e 	bl	8003414 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001978:	f001 fd24 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 800197c:	4603      	mov	r3, r0
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <HAL_InitTick+0xa4>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	0c9b      	lsrs	r3, r3, #18
 800198c:	3b01      	subs	r3, #1
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_InitTick+0xa8>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <HAL_InitTick+0xac>)
 8001994:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_InitTick+0xa8>)
 8001998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800199c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_InitTick+0xa8>)
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_InitTick+0xa8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_InitTick+0xa8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_InitTick+0xa8>)
 80019b2:	f001 fe33 	bl	800361c <HAL_TIM_Base_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d104      	bne.n	80019c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80019bc:	4806      	ldr	r0, [pc, #24]	; (80019d8 <HAL_InitTick+0xa8>)
 80019be:	f001 fe85 	bl	80036cc <HAL_TIM_Base_Start_IT>
 80019c2:	4603      	mov	r3, r0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3730      	adds	r7, #48	; 0x30
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	431bde83 	.word	0x431bde83
 80019d8:	20000550 	.word	0x20000550
 80019dc:	40000400 	.word	0x40000400

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <NMI_Handler+0x4>

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <MemManage_Handler+0x4>

080019f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler+0x4>

080019fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f001 f8ec 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001a1c:	2004      	movs	r0, #4
 8001a1e:	f001 f8e5 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <TIM3_IRQHandler+0x10>)
 8001a2e:	f001 fe9f 	bl	8003770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000550 	.word	0x20000550

08001a3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <USART3_IRQHandler+0x10>)
 8001a42:	f002 f9e7 	bl	8003e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000624 	.word	0x20000624

08001a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <_kill>:

int _kill(int pid, int sig)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a68:	f003 ff6e 	bl	8005948 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2216      	movs	r2, #22
 8001a70:	601a      	str	r2, [r3, #0]
	return -1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_exit>:

void _exit (int status)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a86:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffe7 	bl	8001a5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a90:	e7fe      	b.n	8001a90 <_exit+0x12>

08001a92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e00a      	b.n	8001aba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	60ba      	str	r2, [r7, #8]
 8001ab0:	b2ca      	uxtb	r2, r1
 8001ab2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	dbf0      	blt.n	8001aa4 <_read+0x12>
	}

return len;
 8001ac2:	687b      	ldr	r3, [r7, #4]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e009      	b.n	8001af2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	60ba      	str	r2, [r7, #8]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbf1      	blt.n	8001ade <_write+0x12>
	}
	return len;
 8001afa:	687b      	ldr	r3, [r7, #4]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_close>:

int _close(int file)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	return -1;
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <_isatty>:

int _isatty(int file)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	return 1;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
	return 0;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f003 fed8 	bl	8005948 <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20005000 	.word	0x20005000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	20000598 	.word	0x20000598
 8001bcc:	200013c8 	.word	0x200013c8

08001bd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <MX_USART1_UART_Init+0x50>)
 8001be4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001c02:	220c      	movs	r2, #12
 8001c04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_USART1_UART_Init+0x4c>)
 8001c14:	f001 ff4c 	bl	8003ab0 <HAL_UART_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c1e:	f7ff fe49 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000059c 	.word	0x2000059c
 8001c2c:	40013800 	.word	0x40013800

08001c30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <MX_USART2_UART_Init+0x50>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c68:	f001 ff22 	bl	8003ab0 <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c72:	f7ff fe1f 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200005e0 	.word	0x200005e0
 8001c80:	40004400 	.word	0x40004400

08001c84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <MX_USART3_UART_Init+0x50>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001c90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001cbc:	f001 fef8 	bl	8003ab0 <HAL_UART_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cc6:	f7ff fdf5 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000624 	.word	0x20000624
 8001cd4:	40004800 	.word	0x40004800

08001cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a57      	ldr	r2, [pc, #348]	; (8001e50 <HAL_UART_MspInit+0x178>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d132      	bne.n	8001d5e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf8:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a55      	ldr	r2, [pc, #340]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 0320 	add.w	r3, r7, #32
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4846      	ldr	r0, [pc, #280]	; (8001e58 <HAL_UART_MspInit+0x180>)
 8001d3e:	f000 fda1 	bl	8002884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	4619      	mov	r1, r3
 8001d56:	4840      	ldr	r0, [pc, #256]	; (8001e58 <HAL_UART_MspInit+0x180>)
 8001d58:	f000 fd94 	bl	8002884 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d5c:	e074      	b.n	8001e48 <HAL_UART_MspInit+0x170>
  else if(uartHandle->Instance==USART2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a3e      	ldr	r2, [pc, #248]	; (8001e5c <HAL_UART_MspInit+0x184>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d130      	bne.n	8001dca <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d68:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	4a39      	ldr	r2, [pc, #228]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d72:	61d3      	str	r3, [r2, #28]
 8001d74:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a33      	ldr	r2, [pc, #204]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4619      	mov	r1, r3
 8001daa:	482b      	ldr	r0, [pc, #172]	; (8001e58 <HAL_UART_MspInit+0x180>)
 8001dac:	f000 fd6a 	bl	8002884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001db0:	2308      	movs	r3, #8
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0320 	add.w	r3, r7, #32
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4825      	ldr	r0, [pc, #148]	; (8001e58 <HAL_UART_MspInit+0x180>)
 8001dc4:	f000 fd5e 	bl	8002884 <HAL_GPIO_Init>
}
 8001dc8:	e03e      	b.n	8001e48 <HAL_UART_MspInit+0x170>
  else if(uartHandle->Instance==USART3)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_UART_MspInit+0x188>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d139      	bne.n	8001e48 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001dda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dde:	61d3      	str	r3, [r2, #28]
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_UART_MspInit+0x17c>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e12:	f107 0320 	add.w	r3, r7, #32
 8001e16:	4619      	mov	r1, r3
 8001e18:	4812      	ldr	r0, [pc, #72]	; (8001e64 <HAL_UART_MspInit+0x18c>)
 8001e1a:	f000 fd33 	bl	8002884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 0320 	add.w	r3, r7, #32
 8001e30:	4619      	mov	r1, r3
 8001e32:	480c      	ldr	r0, [pc, #48]	; (8001e64 <HAL_UART_MspInit+0x18c>)
 8001e34:	f000 fd26 	bl	8002884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 7, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2107      	movs	r1, #7
 8001e3c:	2027      	movs	r0, #39	; 0x27
 8001e3e:	f000 fc46 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e42:	2027      	movs	r0, #39	; 0x27
 8001e44:	f000 fc5f 	bl	8002706 <HAL_NVIC_EnableIRQ>
}
 8001e48:	bf00      	nop
 8001e4a:	3730      	adds	r7, #48	; 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40013800 	.word	0x40013800
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	40004400 	.word	0x40004400
 8001e60:	40004800 	.word	0x40004800
 8001e64:	40010c00 	.word	0x40010c00

08001e68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e6a:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e80:	4c0a      	ldr	r4, [pc, #40]	; (8001eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e8e:	f7ff fe9f 	bl	8001bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f003 fd5f 	bl	8005954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e96:	f7ff fc85 	bl	80017a4 <main>
  bx lr
 8001e9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001ea4:	0800a7c0 	.word	0x0800a7c0
  ldr r2, =_sbss
 8001ea8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001eac:	200013c8 	.word	0x200013c8

08001eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC1_2_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_Init+0x28>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_Init+0x28>)
 8001ebe:	f043 0310 	orr.w	r3, r3, #16
 8001ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 fbf7 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	200f      	movs	r0, #15
 8001ecc:	f7ff fd30 	bl	8001930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fcf6 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40022000 	.word	0x40022000

08001ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_IncTick+0x1c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_IncTick+0x20>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a03      	ldr	r2, [pc, #12]	; (8001f00 <HAL_IncTick+0x20>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000018 	.word	0x20000018
 8001f00:	20000668 	.word	0x20000668

08001f04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <HAL_GetTick+0x10>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000668 	.word	0x20000668

08001f18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0be      	b.n	80020b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe fe2c 	bl	8000bb4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fabf 	bl	80024e0 <ADC_ConversionStop_Disable>
 8001f62:	4603      	mov	r3, r0
 8001f64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 8099 	bne.w	80020a6 <HAL_ADC_Init+0x18e>
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 8095 	bne.w	80020a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f84:	f023 0302 	bic.w	r3, r3, #2
 8001f88:	f043 0202 	orr.w	r2, r3, #2
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7b1b      	ldrb	r3, [r3, #12]
 8001f9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fa0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb0:	d003      	beq.n	8001fba <HAL_ADC_Init+0xa2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d102      	bne.n	8001fc0 <HAL_ADC_Init+0xa8>
 8001fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fbe:	e000      	b.n	8001fc2 <HAL_ADC_Init+0xaa>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7d1b      	ldrb	r3, [r3, #20]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d119      	bne.n	8002004 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7b1b      	ldrb	r3, [r3, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	035a      	lsls	r2, r3, #13
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	e00b      	b.n	8002004 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	430a      	orrs	r2, r1
 8002016:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <HAL_ADC_Init+0x1a8>)
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	430b      	orrs	r3, r1
 800202a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002034:	d003      	beq.n	800203e <HAL_ADC_Init+0x126>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d104      	bne.n	8002048 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	3b01      	subs	r3, #1
 8002044:	051b      	lsls	r3, r3, #20
 8002046:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	430a      	orrs	r2, r1
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_ADC_Init+0x1ac>)
 8002064:	4013      	ands	r3, r2
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	429a      	cmp	r2, r3
 800206a:	d10b      	bne.n	8002084 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002082:	e018      	b.n	80020b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	f023 0312 	bic.w	r3, r3, #18
 800208c:	f043 0210 	orr.w	r2, r3, #16
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020a4:	e007      	b.n	80020b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	ffe1f7fd 	.word	0xffe1f7fd
 80020c4:	ff1f0efe 	.word	0xff1f0efe

080020c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_Start+0x1a>
 80020de:	2302      	movs	r3, #2
 80020e0:	e098      	b.n	8002214 <HAL_ADC_Start+0x14c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f99e 	bl	800242c <ADC_Enable>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 8087 	bne.w	800220a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a41      	ldr	r2, [pc, #260]	; (800221c <HAL_ADC_Start+0x154>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d105      	bne.n	8002126 <HAL_ADC_Start+0x5e>
 800211a:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_ADC_Start+0x158>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d026      	beq.n	800218e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002148:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002150:	e01d      	b.n	800218e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <HAL_ADC_Start+0x158>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d004      	beq.n	8002172 <HAL_ADC_Start+0xaa>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2b      	ldr	r2, [pc, #172]	; (800221c <HAL_ADC_Start+0x154>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10d      	bne.n	800218e <HAL_ADC_Start+0xc6>
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_ADC_Start+0x158>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002186:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	f023 0206 	bic.w	r2, r3, #6
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80021a6:	e002      	b.n	80021ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0202 	mvn.w	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021ce:	d113      	bne.n	80021f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <HAL_ADC_Start+0x154>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d105      	bne.n	80021e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_ADC_Start+0x158>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	e00c      	b.n	8002212 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e003      	b.n	8002212 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40012800 	.word	0x40012800
 8002220:	40012400 	.word	0x40012400

08002224 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x20>
 8002258:	2302      	movs	r3, #2
 800225a:	e0dc      	b.n	8002416 <HAL_ADC_ConfigChannel+0x1da>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b06      	cmp	r3, #6
 800226a:	d81c      	bhi.n	80022a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3b05      	subs	r3, #5
 800227e:	221f      	movs	r2, #31
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	4019      	ands	r1, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	3b05      	subs	r3, #5
 8002298:	fa00 f203 	lsl.w	r2, r0, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	635a      	str	r2, [r3, #52]	; 0x34
 80022a4:	e03c      	b.n	8002320 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d81c      	bhi.n	80022e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	3b23      	subs	r3, #35	; 0x23
 80022c0:	221f      	movs	r2, #31
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	4019      	ands	r1, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	3b23      	subs	r3, #35	; 0x23
 80022da:	fa00 f203 	lsl.w	r2, r0, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
 80022e6:	e01b      	b.n	8002320 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b41      	subs	r3, #65	; 0x41
 80022fa:	221f      	movs	r2, #31
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	4019      	ands	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3b41      	subs	r3, #65	; 0x41
 8002314:	fa00 f203 	lsl.w	r2, r0, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b09      	cmp	r3, #9
 8002326:	d91c      	bls.n	8002362 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68d9      	ldr	r1, [r3, #12]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	3b1e      	subs	r3, #30
 800233a:	2207      	movs	r2, #7
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	4019      	ands	r1, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6898      	ldr	r0, [r3, #8]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	3b1e      	subs	r3, #30
 8002354:	fa00 f203 	lsl.w	r2, r0, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	e019      	b.n	8002396 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6919      	ldr	r1, [r3, #16]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	2207      	movs	r2, #7
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	4019      	ands	r1, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6898      	ldr	r0, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	fa00 f203 	lsl.w	r2, r0, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b10      	cmp	r3, #16
 800239c:	d003      	beq.n	80023a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023a2:	2b11      	cmp	r3, #17
 80023a4:	d132      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_ADC_ConfigChannel+0x1e4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d125      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d126      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d11a      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_ADC_ConfigChannel+0x1e8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <HAL_ADC_ConfigChannel+0x1ec>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	0c9a      	lsrs	r2, r3, #18
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f9      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x1b2>
 80023fa:	e007      	b.n	800240c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40012400 	.word	0x40012400
 8002424:	20000010 	.word	0x20000010
 8002428:	431bde83 	.word	0x431bde83

0800242c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d040      	beq.n	80024cc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <ADC_Enable+0xac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <ADC_Enable+0xb0>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	0c9b      	lsrs	r3, r3, #18
 8002466:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002468:	e002      	b.n	8002470 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3b01      	subs	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f9      	bne.n	800246a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002476:	f7ff fd45 	bl	8001f04 <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800247c:	e01f      	b.n	80024be <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800247e:	f7ff fd41 	bl	8001f04 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d918      	bls.n	80024be <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d011      	beq.n	80024be <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	f043 0210 	orr.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e007      	b.n	80024ce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d1d8      	bne.n	800247e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000010 	.word	0x20000010
 80024dc:	431bde83 	.word	0x431bde83

080024e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d12e      	bne.n	8002558 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800250a:	f7ff fcfb 	bl	8001f04 <HAL_GetTick>
 800250e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002510:	e01b      	b.n	800254a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002512:	f7ff fcf7 	bl	8001f04 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d914      	bls.n	800254a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10d      	bne.n	800254a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e007      	b.n	800255a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d0dc      	beq.n	8002512 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800258c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <__NVIC_GetPriorityGrouping+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0307 	and.w	r3, r3, #7
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	db0b      	blt.n	80025f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4906      	ldr	r1, [pc, #24]	; (80025fc <__NVIC_EnableIRQ+0x34>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2001      	movs	r0, #1
 80025ea:	fa00 f202 	lsl.w	r2, r0, r2
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	; (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	; (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
         );
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff4f 	bl	8002564 <__NVIC_SetPriorityGrouping>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff64 	bl	80025ac <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ffb2 	bl	8002654 <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff81 	bl	8002600 <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff57 	bl	80025c8 <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002734:	2b02      	cmp	r3, #2
 8002736:	d008      	beq.n	800274a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2204      	movs	r2, #4
 800273c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e020      	b.n	800278c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 020e 	bic.w	r2, r2, #14
 8002758:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
	...

08002798 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d005      	beq.n	80027ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2204      	movs	r2, #4
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e051      	b.n	800285e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 020e 	bic.w	r2, r2, #14
 80027c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0201 	bic.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_DMA_Abort_IT+0xd0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d029      	beq.n	8002838 <HAL_DMA_Abort_IT+0xa0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a20      	ldr	r2, [pc, #128]	; (800286c <HAL_DMA_Abort_IT+0xd4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d022      	beq.n	8002834 <HAL_DMA_Abort_IT+0x9c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <HAL_DMA_Abort_IT+0xd8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d01a      	beq.n	800282e <HAL_DMA_Abort_IT+0x96>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_DMA_Abort_IT+0xdc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d012      	beq.n	8002828 <HAL_DMA_Abort_IT+0x90>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_DMA_Abort_IT+0xe0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00a      	beq.n	8002822 <HAL_DMA_Abort_IT+0x8a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1a      	ldr	r2, [pc, #104]	; (800287c <HAL_DMA_Abort_IT+0xe4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d102      	bne.n	800281c <HAL_DMA_Abort_IT+0x84>
 8002816:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800281a:	e00e      	b.n	800283a <HAL_DMA_Abort_IT+0xa2>
 800281c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002820:	e00b      	b.n	800283a <HAL_DMA_Abort_IT+0xa2>
 8002822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002826:	e008      	b.n	800283a <HAL_DMA_Abort_IT+0xa2>
 8002828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282c:	e005      	b.n	800283a <HAL_DMA_Abort_IT+0xa2>
 800282e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002832:	e002      	b.n	800283a <HAL_DMA_Abort_IT+0xa2>
 8002834:	2310      	movs	r3, #16
 8002836:	e000      	b.n	800283a <HAL_DMA_Abort_IT+0xa2>
 8002838:	2301      	movs	r3, #1
 800283a:	4a11      	ldr	r2, [pc, #68]	; (8002880 <HAL_DMA_Abort_IT+0xe8>)
 800283c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	4798      	blx	r3
    } 
  }
  return status;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40020008 	.word	0x40020008
 800286c:	4002001c 	.word	0x4002001c
 8002870:	40020030 	.word	0x40020030
 8002874:	40020044 	.word	0x40020044
 8002878:	40020058 	.word	0x40020058
 800287c:	4002006c 	.word	0x4002006c
 8002880:	40020000 	.word	0x40020000

08002884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002884:	b480      	push	{r7}
 8002886:	b08b      	sub	sp, #44	; 0x2c
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002892:	2300      	movs	r3, #0
 8002894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	e169      	b.n	8002b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002898:	2201      	movs	r2, #1
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	f040 8158 	bne.w	8002b66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a9a      	ldr	r2, [pc, #616]	; (8002b24 <HAL_GPIO_Init+0x2a0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d05e      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028c0:	4a98      	ldr	r2, [pc, #608]	; (8002b24 <HAL_GPIO_Init+0x2a0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d875      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028c6:	4a98      	ldr	r2, [pc, #608]	; (8002b28 <HAL_GPIO_Init+0x2a4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d058      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028cc:	4a96      	ldr	r2, [pc, #600]	; (8002b28 <HAL_GPIO_Init+0x2a4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d86f      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028d2:	4a96      	ldr	r2, [pc, #600]	; (8002b2c <HAL_GPIO_Init+0x2a8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d052      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028d8:	4a94      	ldr	r2, [pc, #592]	; (8002b2c <HAL_GPIO_Init+0x2a8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d869      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028de:	4a94      	ldr	r2, [pc, #592]	; (8002b30 <HAL_GPIO_Init+0x2ac>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d04c      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028e4:	4a92      	ldr	r2, [pc, #584]	; (8002b30 <HAL_GPIO_Init+0x2ac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d863      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028ea:	4a92      	ldr	r2, [pc, #584]	; (8002b34 <HAL_GPIO_Init+0x2b0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d046      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028f0:	4a90      	ldr	r2, [pc, #576]	; (8002b34 <HAL_GPIO_Init+0x2b0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d85d      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028f6:	2b12      	cmp	r3, #18
 80028f8:	d82a      	bhi.n	8002950 <HAL_GPIO_Init+0xcc>
 80028fa:	2b12      	cmp	r3, #18
 80028fc:	d859      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_GPIO_Init+0x80>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	0800297f 	.word	0x0800297f
 8002908:	08002959 	.word	0x08002959
 800290c:	0800296b 	.word	0x0800296b
 8002910:	080029ad 	.word	0x080029ad
 8002914:	080029b3 	.word	0x080029b3
 8002918:	080029b3 	.word	0x080029b3
 800291c:	080029b3 	.word	0x080029b3
 8002920:	080029b3 	.word	0x080029b3
 8002924:	080029b3 	.word	0x080029b3
 8002928:	080029b3 	.word	0x080029b3
 800292c:	080029b3 	.word	0x080029b3
 8002930:	080029b3 	.word	0x080029b3
 8002934:	080029b3 	.word	0x080029b3
 8002938:	080029b3 	.word	0x080029b3
 800293c:	080029b3 	.word	0x080029b3
 8002940:	080029b3 	.word	0x080029b3
 8002944:	080029b3 	.word	0x080029b3
 8002948:	08002961 	.word	0x08002961
 800294c:	08002975 	.word	0x08002975
 8002950:	4a79      	ldr	r2, [pc, #484]	; (8002b38 <HAL_GPIO_Init+0x2b4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002956:	e02c      	b.n	80029b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	623b      	str	r3, [r7, #32]
          break;
 800295e:	e029      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	3304      	adds	r3, #4
 8002966:	623b      	str	r3, [r7, #32]
          break;
 8002968:	e024      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	3308      	adds	r3, #8
 8002970:	623b      	str	r3, [r7, #32]
          break;
 8002972:	e01f      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	330c      	adds	r3, #12
 800297a:	623b      	str	r3, [r7, #32]
          break;
 800297c:	e01a      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002986:	2304      	movs	r3, #4
 8002988:	623b      	str	r3, [r7, #32]
          break;
 800298a:	e013      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002994:	2308      	movs	r3, #8
 8002996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	611a      	str	r2, [r3, #16]
          break;
 800299e:	e009      	b.n	80029b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029a0:	2308      	movs	r3, #8
 80029a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	615a      	str	r2, [r3, #20]
          break;
 80029aa:	e003      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029ac:	2300      	movs	r3, #0
 80029ae:	623b      	str	r3, [r7, #32]
          break;
 80029b0:	e000      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          break;
 80029b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2bff      	cmp	r3, #255	; 0xff
 80029b8:	d801      	bhi.n	80029be <HAL_GPIO_Init+0x13a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	e001      	b.n	80029c2 <HAL_GPIO_Init+0x13e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2bff      	cmp	r3, #255	; 0xff
 80029c8:	d802      	bhi.n	80029d0 <HAL_GPIO_Init+0x14c>
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	e002      	b.n	80029d6 <HAL_GPIO_Init+0x152>
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	3b08      	subs	r3, #8
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	210f      	movs	r1, #15
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	401a      	ands	r2, r3
 80029e8:	6a39      	ldr	r1, [r7, #32]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	431a      	orrs	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80b1 	beq.w	8002b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a04:	4b4d      	ldr	r3, [pc, #308]	; (8002b3c <HAL_GPIO_Init+0x2b8>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4a4c      	ldr	r2, [pc, #304]	; (8002b3c <HAL_GPIO_Init+0x2b8>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6193      	str	r3, [r2, #24]
 8002a10:	4b4a      	ldr	r3, [pc, #296]	; (8002b3c <HAL_GPIO_Init+0x2b8>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a1c:	4a48      	ldr	r2, [pc, #288]	; (8002b40 <HAL_GPIO_Init+0x2bc>)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a40      	ldr	r2, [pc, #256]	; (8002b44 <HAL_GPIO_Init+0x2c0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <HAL_GPIO_Init+0x1ec>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <HAL_GPIO_Init+0x2c4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00d      	beq.n	8002a6c <HAL_GPIO_Init+0x1e8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3e      	ldr	r2, [pc, #248]	; (8002b4c <HAL_GPIO_Init+0x2c8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <HAL_GPIO_Init+0x1e4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3d      	ldr	r2, [pc, #244]	; (8002b50 <HAL_GPIO_Init+0x2cc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_GPIO_Init+0x1e0>
 8002a60:	2303      	movs	r3, #3
 8002a62:	e006      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a64:	2304      	movs	r3, #4
 8002a66:	e004      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e002      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a70:	2300      	movs	r3, #0
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	f002 0203 	and.w	r2, r2, #3
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	4093      	lsls	r3, r2
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a82:	492f      	ldr	r1, [pc, #188]	; (8002b40 <HAL_GPIO_Init+0x2bc>)
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d006      	beq.n	8002aaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	492c      	ldr	r1, [pc, #176]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	4928      	ldr	r1, [pc, #160]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ac4:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4922      	ldr	r1, [pc, #136]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
 8002ad0:	e006      	b.n	8002ae0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	491e      	ldr	r1, [pc, #120]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4918      	ldr	r1, [pc, #96]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	4914      	ldr	r1, [pc, #80]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d021      	beq.n	8002b58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60cb      	str	r3, [r1, #12]
 8002b20:	e021      	b.n	8002b66 <HAL_GPIO_Init+0x2e2>
 8002b22:	bf00      	nop
 8002b24:	10320000 	.word	0x10320000
 8002b28:	10310000 	.word	0x10310000
 8002b2c:	10220000 	.word	0x10220000
 8002b30:	10210000 	.word	0x10210000
 8002b34:	10120000 	.word	0x10120000
 8002b38:	10110000 	.word	0x10110000
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40010800 	.word	0x40010800
 8002b48:	40010c00 	.word	0x40010c00
 8002b4c:	40011000 	.word	0x40011000
 8002b50:	40011400 	.word	0x40011400
 8002b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	4909      	ldr	r1, [pc, #36]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3301      	adds	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	fa22 f303 	lsr.w	r3, r2, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f47f ae8e 	bne.w	8002898 <HAL_GPIO_Init+0x14>
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	372c      	adds	r7, #44	; 0x2c
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40010400 	.word	0x40010400

08002b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	e001      	b.n	8002bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	807b      	strh	r3, [r7, #2]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bca:	787b      	ldrb	r3, [r7, #1]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd0:	887a      	ldrh	r2, [r7, #2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bd6:	e003      	b.n	8002be0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	041a      	lsls	r2, r3, #16
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	611a      	str	r2, [r3, #16]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe f84e 	bl	8000cac <HAL_GPIO_EXTI_Callback>
  }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e272      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8087 	beq.w	8002d4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c3c:	4b92      	ldr	r3, [pc, #584]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d00c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c48:	4b8f      	ldr	r3, [pc, #572]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d112      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
 8002c54:	4b8c      	ldr	r3, [pc, #560]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d10b      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	4b89      	ldr	r3, [pc, #548]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d06c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x12c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d168      	bne.n	8002d48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e24c      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x76>
 8002c84:	4b80      	ldr	r3, [pc, #512]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a7f      	ldr	r2, [pc, #508]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e02e      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd4>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x98>
 8002c9a:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7a      	ldr	r2, [pc, #488]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b78      	ldr	r3, [pc, #480]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a77      	ldr	r2, [pc, #476]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e01d      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd4>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xbc>
 8002cbe:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a71      	ldr	r2, [pc, #452]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b6f      	ldr	r3, [pc, #444]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6e      	ldr	r2, [pc, #440]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd4>
 8002cd8:	4b6b      	ldr	r3, [pc, #428]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a6a      	ldr	r2, [pc, #424]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a67      	ldr	r2, [pc, #412]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7ff f904 	bl	8001f04 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7ff f900 	bl	8001f04 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e200      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b5d      	ldr	r3, [pc, #372]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0xe4>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7ff f8f0 	bl	8001f04 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7ff f8ec 	bl	8001f04 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e1ec      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x10c>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d063      	beq.n	8002e1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d56:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d62:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d11c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x18c>
 8002d6e:	4b46      	ldr	r3, [pc, #280]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d116      	bne.n	8002da8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_RCC_OscConfig+0x176>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e1c0      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4939      	ldr	r1, [pc, #228]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	e03a      	b.n	8002e1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db0:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7ff f8a5 	bl	8001f04 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbe:	f7ff f8a1 	bl	8001f04 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1a1      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4927      	ldr	r1, [pc, #156]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
 8002df0:	e015      	b.n	8002e1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7ff f884 	bl	8001f04 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e00:	f7ff f880 	bl	8001f04 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e180      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d03a      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d019      	beq.n	8002e66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_RCC_OscConfig+0x274>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e38:	f7ff f864 	bl	8001f04 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e40:	f7ff f860 	bl	8001f04 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e160      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f000 fb08 	bl	8003474 <RCC_Delay>
 8002e64:	e01c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_RCC_OscConfig+0x274>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6c:	f7ff f84a 	bl	8001f04 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e72:	e00f      	b.n	8002e94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e74:	f7ff f846 	bl	8001f04 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d908      	bls.n	8002e94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e146      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	42420000 	.word	0x42420000
 8002e90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	4b92      	ldr	r3, [pc, #584]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e9      	bne.n	8002e74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80a6 	beq.w	8002ffa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb2:	4b8b      	ldr	r3, [pc, #556]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10d      	bne.n	8002eda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	4b88      	ldr	r3, [pc, #544]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	4a87      	ldr	r2, [pc, #540]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	61d3      	str	r3, [r2, #28]
 8002eca:	4b85      	ldr	r3, [pc, #532]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b82      	ldr	r3, [pc, #520]	; (80030e4 <HAL_RCC_OscConfig+0x4c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b7f      	ldr	r3, [pc, #508]	; (80030e4 <HAL_RCC_OscConfig+0x4c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7e      	ldr	r2, [pc, #504]	; (80030e4 <HAL_RCC_OscConfig+0x4c8>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7ff f807 	bl	8001f04 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7ff f803 	bl	8001f04 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b64      	cmp	r3, #100	; 0x64
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e103      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	4b75      	ldr	r3, [pc, #468]	; (80030e4 <HAL_RCC_OscConfig+0x4c8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x312>
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4a6e      	ldr	r2, [pc, #440]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6213      	str	r3, [r2, #32]
 8002f2c:	e02d      	b.n	8002f8a <HAL_RCC_OscConfig+0x36e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x334>
 8002f36:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a69      	ldr	r2, [pc, #420]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6213      	str	r3, [r2, #32]
 8002f42:	4b67      	ldr	r3, [pc, #412]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4a66      	ldr	r2, [pc, #408]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6213      	str	r3, [r2, #32]
 8002f4e:	e01c      	b.n	8002f8a <HAL_RCC_OscConfig+0x36e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x356>
 8002f58:	4b61      	ldr	r3, [pc, #388]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a60      	ldr	r2, [pc, #384]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4a5d      	ldr	r2, [pc, #372]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6213      	str	r3, [r2, #32]
 8002f70:	e00b      	b.n	8002f8a <HAL_RCC_OscConfig+0x36e>
 8002f72:	4b5b      	ldr	r3, [pc, #364]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a5a      	ldr	r2, [pc, #360]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6213      	str	r3, [r2, #32]
 8002f7e:	4b58      	ldr	r3, [pc, #352]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4a57      	ldr	r2, [pc, #348]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d015      	beq.n	8002fbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7fe ffb7 	bl	8001f04 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe ffb3 	bl	8001f04 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0b1      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ee      	beq.n	8002f9a <HAL_RCC_OscConfig+0x37e>
 8002fbc:	e014      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe ffa1 	bl	8001f04 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe ff9d 	bl	8001f04 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e09b      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fdc:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4b3c      	ldr	r3, [pc, #240]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4a3b      	ldr	r2, [pc, #236]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8087 	beq.w	8003112 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b08      	cmp	r3, #8
 800300e:	d061      	beq.n	80030d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d146      	bne.n	80030a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_RCC_OscConfig+0x4cc>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7fe ff71 	bl	8001f04 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe ff6d 	bl	8001f04 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e06d      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003038:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304c:	d108      	bne.n	8003060 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	4921      	ldr	r1, [pc, #132]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003060:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a19      	ldr	r1, [r3, #32]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	430b      	orrs	r3, r1
 8003072:	491b      	ldr	r1, [pc, #108]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x4cc>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe ff41 	bl	8001f04 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe ff3d 	bl	8001f04 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e03d      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x46a>
 80030a4:	e035      	b.n	8003112 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_RCC_OscConfig+0x4cc>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe ff2a 	bl	8001f04 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe ff26 	bl	8001f04 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e026      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x498>
 80030d2:	e01e      	b.n	8003112 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d107      	bne.n	80030ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e019      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
 80030e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_RCC_OscConfig+0x500>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000

08003120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0d0      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d910      	bls.n	8003164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 0207 	bic.w	r2, r3, #7
 800314a:	4965      	ldr	r1, [pc, #404]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0b8      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800317c:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003186:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800319e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	494d      	ldr	r1, [pc, #308]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d040      	beq.n	8003240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d115      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e07f      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e073      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06b      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fe:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f023 0203 	bic.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4936      	ldr	r1, [pc, #216]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003210:	f7fe fe78 	bl	8001f04 <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	e00a      	b.n	800322e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003218:	f7fe fe74 	bl	8001f04 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e053      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 020c 	and.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	429a      	cmp	r2, r3
 800323e:	d1eb      	bne.n	8003218 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003240:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d210      	bcs.n	8003270 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 0207 	bic.w	r2, r3, #7
 8003256:	4922      	ldr	r1, [pc, #136]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e032      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4916      	ldr	r1, [pc, #88]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	490e      	ldr	r1, [pc, #56]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ae:	f000 f821 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	490a      	ldr	r1, [pc, #40]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80032c0:	5ccb      	ldrb	r3, [r1, r3]
 80032c2:	fa22 f303 	lsr.w	r3, r2, r3
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1cc>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1d0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fb2e 	bl	8001930 <HAL_InitTick>

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40022000 	.word	0x40022000
 80032e4:	40021000 	.word	0x40021000
 80032e8:	0800a328 	.word	0x0800a328
 80032ec:	20000010 	.word	0x20000010
 80032f0:	20000014 	.word	0x20000014

080032f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f4:	b490      	push	{r4, r7}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032fa:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80032fc:	1d3c      	adds	r4, r7, #4
 80032fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003304:	f240 2301 	movw	r3, #513	; 0x201
 8003308:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800331e:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b04      	cmp	r3, #4
 800332c:	d002      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x40>
 800332e:	2b08      	cmp	r3, #8
 8003330:	d003      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x46>
 8003332:	e02b      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003336:	623b      	str	r3, [r7, #32]
      break;
 8003338:	e02b      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	0c9b      	lsrs	r3, r3, #18
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	3328      	adds	r3, #40	; 0x28
 8003344:	443b      	add	r3, r7
 8003346:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800334a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	0c5b      	lsrs	r3, r3, #17
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	3328      	adds	r3, #40	; 0x28
 8003362:	443b      	add	r3, r7
 8003364:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003368:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800336e:	fb03 f202 	mul.w	r2, r3, r2
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	e004      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	623b      	str	r3, [r7, #32]
      break;
 800338a:	e002      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800338e:	623b      	str	r3, [r7, #32]
      break;
 8003390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003392:	6a3b      	ldr	r3, [r7, #32]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3728      	adds	r7, #40	; 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	bc90      	pop	{r4, r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	0800a304 	.word	0x0800a304
 80033a4:	40021000 	.word	0x40021000
 80033a8:	007a1200 	.word	0x007a1200
 80033ac:	003d0900 	.word	0x003d0900

080033b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b02      	ldr	r3, [pc, #8]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	20000010 	.word	0x20000010

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c8:	f7ff fff2 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	0800a338 	.word	0x0800a338

080033ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033f0:	f7ff ffde 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	0adb      	lsrs	r3, r3, #11
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000
 8003410:	0800a338 	.word	0x0800a338

08003414 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	220f      	movs	r2, #15
 8003422:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <HAL_RCC_GetClockConfig+0x58>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0203 	and.w	r2, r3, #3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <HAL_RCC_GetClockConfig+0x58>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_GetClockConfig+0x58>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_RCC_GetClockConfig+0x58>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	08db      	lsrs	r3, r3, #3
 800344e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_GetClockConfig+0x5c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0207 	and.w	r2, r3, #7
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	40021000 	.word	0x40021000
 8003470:	40022000 	.word	0x40022000

08003474 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <RCC_Delay+0x34>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <RCC_Delay+0x38>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	0a5b      	lsrs	r3, r3, #9
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003490:	bf00      	nop
  }
  while (Delay --);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1e5a      	subs	r2, r3, #1
 8003496:	60fa      	str	r2, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f9      	bne.n	8003490 <RCC_Delay+0x1c>
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	20000010 	.word	0x20000010
 80034ac:	10624dd3 	.word	0x10624dd3

080034b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d07d      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034cc:	2300      	movs	r3, #0
 80034ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d0:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10d      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034dc:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4a4b      	ldr	r2, [pc, #300]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e6:	61d3      	str	r3, [r2, #28]
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f4:	2301      	movs	r3, #1
 80034f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b46      	ldr	r3, [pc, #280]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d118      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003504:	4b43      	ldr	r3, [pc, #268]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a42      	ldr	r2, [pc, #264]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003510:	f7fe fcf8 	bl	8001f04 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003516:	e008      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003518:	f7fe fcf4 	bl	8001f04 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e06d      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003536:	4b36      	ldr	r3, [pc, #216]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d02e      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d027      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800355e:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003564:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d014      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe fcc3 	bl	8001f04 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fe fcbf 	bl	8001f04 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e036      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ee      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4917      	ldr	r1, [pc, #92]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d105      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035bc:	4b14      	ldr	r3, [pc, #80]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	4a13      	ldr	r2, [pc, #76]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	490b      	ldr	r1, [pc, #44]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4904      	ldr	r1, [pc, #16]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	40007000 	.word	0x40007000
 8003618:	42420440 	.word	0x42420440

0800361c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e041      	b.n	80036b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f839 	bl	80036ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f000 f9b4 	bl	80039c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e03a      	b.n	800375a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a18      	ldr	r2, [pc, #96]	; (8003764 <HAL_TIM_Base_Start_IT+0x98>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00e      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x58>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370e:	d009      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x58>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a14      	ldr	r2, [pc, #80]	; (8003768 <HAL_TIM_Base_Start_IT+0x9c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x58>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a13      	ldr	r2, [pc, #76]	; (800376c <HAL_TIM_Base_Start_IT+0xa0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d111      	bne.n	8003748 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b06      	cmp	r3, #6
 8003734:	d010      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003746:	e007      	b.n	8003758 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800

08003770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d122      	bne.n	80037cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d11b      	bne.n	80037cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0202 	mvn.w	r2, #2
 800379c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8ed 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8e0 	bl	8003980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8ef 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d122      	bne.n	8003820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d11b      	bne.n	8003820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0204 	mvn.w	r2, #4
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8c3 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f8b6 	bl	8003980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8c5 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b08      	cmp	r3, #8
 800382c:	d122      	bne.n	8003874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d11b      	bne.n	8003874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0208 	mvn.w	r2, #8
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2204      	movs	r2, #4
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f899 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f88c 	bl	8003980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f89b 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b10      	cmp	r3, #16
 8003880:	d122      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b10      	cmp	r3, #16
 800388e:	d11b      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0210 	mvn.w	r2, #16
 8003898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2208      	movs	r2, #8
 800389e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f86f 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f862 	bl	8003980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f871 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d10e      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0201 	mvn.w	r2, #1
 80038ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd ffce 	bl	8001890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d10e      	bne.n	8003920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d107      	bne.n	8003920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8bf 	bl	8003a9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d10e      	bne.n	800394c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d107      	bne.n	800394c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f835 	bl	80039b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d10e      	bne.n	8003978 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b20      	cmp	r3, #32
 8003966:	d107      	bne.n	8003978 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0220 	mvn.w	r2, #32
 8003970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f88a 	bl	8003a8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a29      	ldr	r2, [pc, #164]	; (8003a80 <TIM_Base_SetConfig+0xb8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00b      	beq.n	80039f8 <TIM_Base_SetConfig+0x30>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e6:	d007      	beq.n	80039f8 <TIM_Base_SetConfig+0x30>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a26      	ldr	r2, [pc, #152]	; (8003a84 <TIM_Base_SetConfig+0xbc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d003      	beq.n	80039f8 <TIM_Base_SetConfig+0x30>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a25      	ldr	r2, [pc, #148]	; (8003a88 <TIM_Base_SetConfig+0xc0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d108      	bne.n	8003a0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1c      	ldr	r2, [pc, #112]	; (8003a80 <TIM_Base_SetConfig+0xb8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00b      	beq.n	8003a2a <TIM_Base_SetConfig+0x62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d007      	beq.n	8003a2a <TIM_Base_SetConfig+0x62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <TIM_Base_SetConfig+0xbc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d003      	beq.n	8003a2a <TIM_Base_SetConfig+0x62>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <TIM_Base_SetConfig+0xc0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d108      	bne.n	8003a3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <TIM_Base_SetConfig+0xb8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d103      	bne.n	8003a70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	615a      	str	r2, [r3, #20]
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800

08003a8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e03f      	b.n	8003b42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fe f8fe 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fd27 	bl	8004548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b08a      	sub	sp, #40	; 0x28
 8003b4e:	af02      	add	r7, sp, #8
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d17c      	bne.n	8003c64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_UART_Transmit+0x2c>
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e075      	b.n	8003c66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_UART_Transmit+0x3e>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e06e      	b.n	8003c66 <HAL_UART_Transmit+0x11c>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2221      	movs	r2, #33	; 0x21
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b9e:	f7fe f9b1 	bl	8001f04 <HAL_GetTick>
 8003ba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	88fa      	ldrh	r2, [r7, #6]
 8003ba8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb8:	d108      	bne.n	8003bcc <HAL_UART_Transmit+0x82>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e003      	b.n	8003bd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bdc:	e02a      	b.n	8003c34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2200      	movs	r2, #0
 8003be6:	2180      	movs	r1, #128	; 0x80
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fada 	bl	80041a2 <UART_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e036      	b.n	8003c66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10b      	bne.n	8003c16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	3302      	adds	r3, #2
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	e007      	b.n	8003c26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	781a      	ldrb	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	3301      	adds	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1cf      	bne.n	8003bde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2200      	movs	r2, #0
 8003c46:	2140      	movs	r1, #64	; 0x40
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 faaa 	bl	80041a2 <UART_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e006      	b.n	8003c66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e000      	b.n	8003c66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
  }
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3720      	adds	r7, #32
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b08a      	sub	sp, #40	; 0x28
 8003c72:	af02      	add	r7, sp, #8
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	f040 808c 	bne.w	8003da8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_UART_Receive+0x2e>
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e084      	b.n	8003daa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_UART_Receive+0x40>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e07d      	b.n	8003daa <HAL_UART_Receive+0x13c>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2222      	movs	r2, #34	; 0x22
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cca:	f7fe f91b 	bl	8001f04 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	88fa      	ldrh	r2, [r7, #6]
 8003cda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce4:	d108      	bne.n	8003cf8 <HAL_UART_Receive+0x8a>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e003      	b.n	8003d00 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d08:	e043      	b.n	8003d92 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	2120      	movs	r1, #32
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fa44 	bl	80041a2 <UART_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e042      	b.n	8003daa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10c      	bne.n	8003d44 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	3302      	adds	r3, #2
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	e01f      	b.n	8003d84 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d007      	beq.n	8003d5e <HAL_UART_Receive+0xf0>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_UART_Receive+0xfe>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e008      	b.n	8003d7e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3301      	adds	r3, #1
 8003d82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1b6      	bne.n	8003d0a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e000      	b.n	8003daa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
  }
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d11d      	bne.n	8003e08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Receive_IT+0x26>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e016      	b.n	8003e0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Receive_IT+0x38>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e00f      	b.n	8003e0a <HAL_UART_Receive_IT+0x58>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fa19 	bl	8004236 <UART_Start_Receive_IT>
 8003e04:	4603      	mov	r3, r0
 8003e06:	e000      	b.n	8003e0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10d      	bne.n	8003e66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_UART_IRQHandler+0x52>
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fac9 	bl	80043f6 <UART_Receive_IT>
      return;
 8003e64:	e17b      	b.n	800415e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80b1 	beq.w	8003fd0 <HAL_UART_IRQHandler+0x1bc>
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <HAL_UART_IRQHandler+0x70>
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80a6 	beq.w	8003fd0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x90>
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f043 0201 	orr.w	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_UART_IRQHandler+0xb0>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	f043 0202 	orr.w	r2, r3, #2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_UART_IRQHandler+0xd0>
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f043 0204 	orr.w	r2, r3, #4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00f      	beq.n	8003f0e <HAL_UART_IRQHandler+0xfa>
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <HAL_UART_IRQHandler+0xee>
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0208 	orr.w	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 811e 	beq.w	8004154 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <HAL_UART_IRQHandler+0x11e>
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fa62 	bl	80043f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf14      	ite	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	2300      	moveq	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <HAL_UART_IRQHandler+0x146>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d031      	beq.n	8003fbe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9a4 	bl	80042a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d023      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d013      	beq.n	8003fae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	4a76      	ldr	r2, [pc, #472]	; (8004164 <HAL_UART_IRQHandler+0x350>)
 8003f8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fc00 	bl	8002798 <HAL_DMA_Abort_IT>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	e00e      	b.n	8003fcc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8e3 	bl	800417a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	e00a      	b.n	8003fcc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8df 	bl	800417a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbc:	e006      	b.n	8003fcc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8db 	bl	800417a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fca:	e0c3      	b.n	8004154 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fcc:	bf00      	nop
    return;
 8003fce:	e0c1      	b.n	8004154 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	f040 80a1 	bne.w	800411c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 809b 	beq.w	800411c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8095 	beq.w	800411c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d04e      	beq.n	80040b4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004020:	8a3b      	ldrh	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8098 	beq.w	8004158 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800402c:	8a3a      	ldrh	r2, [r7, #16]
 800402e:	429a      	cmp	r2, r3
 8004030:	f080 8092 	bcs.w	8004158 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8a3a      	ldrh	r2, [r7, #16]
 8004038:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b20      	cmp	r3, #32
 8004042:	d02b      	beq.n	800409c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004052:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004072:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0210 	bic.w	r2, r2, #16
 8004090:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fb43 	bl	8002722 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f86d 	bl	800418c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040b2:	e051      	b.n	8004158 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d047      	beq.n	800415c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80040cc:	8a7b      	ldrh	r3, [r7, #18]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d044      	beq.n	800415c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040e0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0210 	bic.w	r2, r2, #16
 800410e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004110:	8a7b      	ldrh	r3, [r7, #18]
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f839 	bl	800418c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800411a:	e01f      	b.n	800415c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b00      	cmp	r3, #0
 8004124:	d008      	beq.n	8004138 <HAL_UART_IRQHandler+0x324>
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8f9 	bl	8004328 <UART_Transmit_IT>
    return;
 8004136:	e012      	b.n	800415e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <HAL_UART_IRQHandler+0x34a>
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f93a 	bl	80043c6 <UART_EndTransmit_IT>
    return;
 8004152:	e004      	b.n	800415e <HAL_UART_IRQHandler+0x34a>
    return;
 8004154:	bf00      	nop
 8004156:	e002      	b.n	800415e <HAL_UART_IRQHandler+0x34a>
      return;
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <HAL_UART_IRQHandler+0x34a>
      return;
 800415c:	bf00      	nop
  }
}
 800415e:	3728      	adds	r7, #40	; 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	08004301 	.word	0x08004301

08004168 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b2:	e02c      	b.n	800420e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d028      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041c2:	f7fd fe9f 	bl	8001f04 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d21d      	bcs.n	800420e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e00f      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	429a      	cmp	r2, r3
 800422a:	d0c3      	beq.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	4613      	mov	r3, r2
 8004242:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	88fa      	ldrh	r2, [r7, #6]
 800424e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	88fa      	ldrh	r2, [r7, #6]
 8004254:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2222      	movs	r2, #34	; 0x22
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0220 	orr.w	r2, r2, #32
 800429a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d107      	bne.n	80042e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0210 	bic.w	r2, r2, #16
 80042e6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff ff2d 	bl	800417a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b21      	cmp	r3, #33	; 0x21
 800433a:	d13e      	bne.n	80043ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004344:	d114      	bne.n	8004370 <UART_Transmit_IT+0x48>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d110      	bne.n	8004370 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004362:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	1c9a      	adds	r2, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]
 800436e:	e008      	b.n	8004382 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	1c59      	adds	r1, r3, #1
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6211      	str	r1, [r2, #32]
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29b      	uxth	r3, r3
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4619      	mov	r1, r3
 8004390:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff febe 	bl	8004168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b22      	cmp	r3, #34	; 0x22
 8004408:	f040 8099 	bne.w	800453e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004414:	d117      	bne.n	8004446 <UART_Receive_IT+0x50>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d113      	bne.n	8004446 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	b29b      	uxth	r3, r3
 8004430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004434:	b29a      	uxth	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	1c9a      	adds	r2, r3, #2
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	629a      	str	r2, [r3, #40]	; 0x28
 8004444:	e026      	b.n	8004494 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004458:	d007      	beq.n	800446a <UART_Receive_IT+0x74>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <UART_Receive_IT+0x82>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e008      	b.n	800448a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004484:	b2da      	uxtb	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29b      	uxth	r3, r3
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4619      	mov	r1, r3
 80044a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d148      	bne.n	800453a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0220 	bic.w	r2, r2, #32
 80044b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d123      	bne.n	8004530 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0210 	bic.w	r2, r2, #16
 80044fc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b10      	cmp	r3, #16
 800450a:	d10a      	bne.n	8004522 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004526:	4619      	mov	r1, r3
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff fe2f 	bl	800418c <HAL_UARTEx_RxEventCallback>
 800452e:	e002      	b.n	8004536 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fc fbe7 	bl	8000d04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	e002      	b.n	8004540 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e000      	b.n	8004540 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800453e:	2302      	movs	r3, #2
  }
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004582:	f023 030c 	bic.w	r3, r3, #12
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	430b      	orrs	r3, r1
 800458e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2c      	ldr	r2, [pc, #176]	; (800465c <UART_SetConfig+0x114>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d103      	bne.n	80045b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045b0:	f7fe ff1c 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	e002      	b.n	80045be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045b8:	f7fe ff04 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 80045bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009a      	lsls	r2, r3, #2
 80045c8:	441a      	add	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	4a22      	ldr	r2, [pc, #136]	; (8004660 <UART_SetConfig+0x118>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	0119      	lsls	r1, r3, #4
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009a      	lsls	r2, r3, #2
 80045e8:	441a      	add	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f4:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <UART_SetConfig+0x118>)
 80045f6:	fba3 0302 	umull	r0, r3, r3, r2
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2064      	movs	r0, #100	; 0x64
 80045fe:	fb00 f303 	mul.w	r3, r0, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	3332      	adds	r3, #50	; 0x32
 8004608:	4a15      	ldr	r2, [pc, #84]	; (8004660 <UART_SetConfig+0x118>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004614:	4419      	add	r1, r3
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009a      	lsls	r2, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	fbb2 f2f3 	udiv	r2, r2, r3
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <UART_SetConfig+0x118>)
 800462e:	fba3 0302 	umull	r0, r3, r3, r2
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	2064      	movs	r0, #100	; 0x64
 8004636:	fb00 f303 	mul.w	r3, r0, r3
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	3332      	adds	r3, #50	; 0x32
 8004640:	4a07      	ldr	r2, [pc, #28]	; (8004660 <UART_SetConfig+0x118>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	f003 020f 	and.w	r2, r3, #15
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	440a      	add	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40013800 	.word	0x40013800
 8004660:	51eb851f 	.word	0x51eb851f

08004664 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004668:	f000 fa70 	bl	8004b4c <vTaskStartScheduler>
  
  return osOK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	bd80      	pop	{r7, pc}

08004672 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f103 0208 	add.w	r2, r3, #8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f04f 32ff 	mov.w	r2, #4294967295
 800468a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f103 0208 	add.w	r2, r3, #8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f103 0208 	add.w	r2, r3, #8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d103      	bne.n	800472e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e00c      	b.n	8004748 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3308      	adds	r3, #8
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e002      	b.n	800473c <vListInsert+0x2e>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	d2f6      	bcs.n	8004736 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6892      	ldr	r2, [r2, #8]
 8004794:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6852      	ldr	r2, [r2, #4]
 800479e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d103      	bne.n	80047b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	1e5a      	subs	r2, r3, #1
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08e      	sub	sp, #56	; 0x38
 80047d4:	af04      	add	r7, sp, #16
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <xTaskCreateStatic+0x46>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	61fb      	str	r3, [r7, #28]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004816:	2354      	movs	r3, #84	; 0x54
 8004818:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b54      	cmp	r3, #84	; 0x54
 800481e:	d00a      	beq.n	8004836 <xTaskCreateStatic+0x66>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	61bb      	str	r3, [r7, #24]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01e      	beq.n	800487a <xTaskCreateStatic+0xaa>
 800483c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01b      	beq.n	800487a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800484a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004854:	2300      	movs	r3, #0
 8004856:	9303      	str	r3, [sp, #12]
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	9302      	str	r3, [sp, #8]
 800485c:	f107 0314 	add.w	r3, r7, #20
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f850 	bl	8004912 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004874:	f000 f8cc 	bl	8004a10 <prvAddNewTaskToReadyList>
 8004878:	e001      	b.n	800487e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800487e:	697b      	ldr	r3, [r7, #20]
	}
 8004880:	4618      	mov	r0, r3
 8004882:	3728      	adds	r7, #40	; 0x28
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08c      	sub	sp, #48	; 0x30
 800488c:	af04      	add	r7, sp, #16
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fe77 	bl	8005590 <pvPortMalloc>
 80048a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00e      	beq.n	80048c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048aa:	2054      	movs	r0, #84	; 0x54
 80048ac:	f000 fe70 	bl	8005590 <pvPortMalloc>
 80048b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30
 80048be:	e005      	b.n	80048cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048c0:	6978      	ldr	r0, [r7, #20]
 80048c2:	f000 ff29 	bl	8005718 <vPortFree>
 80048c6:	e001      	b.n	80048cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d017      	beq.n	8004902 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	2300      	movs	r3, #0
 80048de:	9303      	str	r3, [sp, #12]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	9302      	str	r3, [sp, #8]
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f80e 	bl	8004912 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048f6:	69f8      	ldr	r0, [r7, #28]
 80048f8:	f000 f88a 	bl	8004a10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048fc:	2301      	movs	r3, #1
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	e002      	b.n	8004908 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295
 8004906:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004908:	69bb      	ldr	r3, [r7, #24]
	}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b088      	sub	sp, #32
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800492a:	3b01      	subs	r3, #1
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	f023 0307 	bic.w	r3, r3, #7
 8004938:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <prvInitialiseNewTask+0x48>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	617b      	str	r3, [r7, #20]
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e012      	b.n	8004986 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	7819      	ldrb	r1, [r3, #0]
 8004968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	3334      	adds	r3, #52	; 0x34
 8004970:	460a      	mov	r2, r1
 8004972:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d006      	beq.n	800498e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3301      	adds	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b0f      	cmp	r3, #15
 800498a:	d9e9      	bls.n	8004960 <prvInitialiseNewTask+0x4e>
 800498c:	e000      	b.n	8004990 <prvInitialiseNewTask+0x7e>
		{
			break;
 800498e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	2b06      	cmp	r3, #6
 800499c:	d901      	bls.n	80049a2 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800499e:	2306      	movs	r3, #6
 80049a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	2200      	movs	r2, #0
 80049b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	3304      	adds	r3, #4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fe79 	bl	80046b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	3318      	adds	r3, #24
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fe74 	bl	80046b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	f1c3 0207 	rsb	r2, r3, #7
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	2200      	movs	r2, #0
 80049e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	69b8      	ldr	r0, [r7, #24]
 80049f2:	f000 fc1b 	bl	800522c <pxPortInitialiseStack>
 80049f6:	4602      	mov	r2, r0
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a08:	bf00      	nop
 8004a0a:	3720      	adds	r7, #32
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a18:	f000 fcf8 	bl	800540c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a1c:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <prvAddNewTaskToReadyList+0xb8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	4a29      	ldr	r2, [pc, #164]	; (8004ac8 <prvAddNewTaskToReadyList+0xb8>)
 8004a24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a26:	4b29      	ldr	r3, [pc, #164]	; (8004acc <prvAddNewTaskToReadyList+0xbc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a2e:	4a27      	ldr	r2, [pc, #156]	; (8004acc <prvAddNewTaskToReadyList+0xbc>)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a34:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <prvAddNewTaskToReadyList+0xb8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d110      	bne.n	8004a5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a3c:	f000 face 	bl	8004fdc <prvInitialiseTaskLists>
 8004a40:	e00d      	b.n	8004a5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a42:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <prvAddNewTaskToReadyList+0xc0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <prvAddNewTaskToReadyList+0xbc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d802      	bhi.n	8004a5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a58:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <prvAddNewTaskToReadyList+0xbc>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <prvAddNewTaskToReadyList+0xc4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3301      	adds	r3, #1
 8004a64:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <prvAddNewTaskToReadyList+0xc4>)
 8004a66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <prvAddNewTaskToReadyList+0xc8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <prvAddNewTaskToReadyList+0xc8>)
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4a15      	ldr	r2, [pc, #84]	; (8004adc <prvAddNewTaskToReadyList+0xcc>)
 8004a88:	441a      	add	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f7ff fe19 	bl	80046c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a96:	f000 fce9 	bl	800546c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <prvAddNewTaskToReadyList+0xc0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00e      	beq.n	8004ac0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <prvAddNewTaskToReadyList+0xbc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d207      	bcs.n	8004ac0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <prvAddNewTaskToReadyList+0xd0>)
 8004ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	2000076c 	.word	0x2000076c
 8004acc:	2000066c 	.word	0x2000066c
 8004ad0:	20000778 	.word	0x20000778
 8004ad4:	20000788 	.word	0x20000788
 8004ad8:	20000774 	.word	0x20000774
 8004adc:	20000670 	.word	0x20000670
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d017      	beq.n	8004b26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <vTaskDelay+0x60>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <vTaskDelay+0x30>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	60bb      	str	r3, [r7, #8]
}
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b14:	f000 f87a 	bl	8004c0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b18:	2100      	movs	r1, #0
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fb20 	bl	8005160 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b20:	f000 f882 	bl	8004c28 <xTaskResumeAll>
 8004b24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d107      	bne.n	8004b3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <vTaskDelay+0x64>)
 8004b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000794 	.word	0x20000794
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b5a:	463a      	mov	r2, r7
 8004b5c:	1d39      	adds	r1, r7, #4
 8004b5e:	f107 0308 	add.w	r3, r7, #8
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc f862 	bl	8000c2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	9202      	str	r2, [sp, #8]
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	2300      	movs	r3, #0
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2300      	movs	r3, #0
 8004b78:	460a      	mov	r2, r1
 8004b7a:	491e      	ldr	r1, [pc, #120]	; (8004bf4 <vTaskStartScheduler+0xa8>)
 8004b7c:	481e      	ldr	r0, [pc, #120]	; (8004bf8 <vTaskStartScheduler+0xac>)
 8004b7e:	f7ff fe27 	bl	80047d0 <xTaskCreateStatic>
 8004b82:	4603      	mov	r3, r0
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <vTaskStartScheduler+0xb0>)
 8004b86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b88:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <vTaskStartScheduler+0xb0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b90:	2301      	movs	r3, #1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e001      	b.n	8004b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d116      	bne.n	8004bce <vTaskStartScheduler+0x82>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	613b      	str	r3, [r7, #16]
}
 8004bb2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <vTaskStartScheduler+0xb4>)
 8004bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <vTaskStartScheduler+0xb8>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <vTaskStartScheduler+0xbc>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bc8:	f000 fbae 	bl	8005328 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bcc:	e00e      	b.n	8004bec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d10a      	bne.n	8004bec <vTaskStartScheduler+0xa0>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60fb      	str	r3, [r7, #12]
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <vTaskStartScheduler+0x9e>
}
 8004bec:	bf00      	nop
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	0800a314 	.word	0x0800a314
 8004bf8:	08004fad 	.word	0x08004fad
 8004bfc:	20000790 	.word	0x20000790
 8004c00:	2000078c 	.word	0x2000078c
 8004c04:	20000778 	.word	0x20000778
 8004c08:	20000770 	.word	0x20000770

08004c0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <vTaskSuspendAll+0x18>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3301      	adds	r3, #1
 8004c16:	4a03      	ldr	r2, [pc, #12]	; (8004c24 <vTaskSuspendAll+0x18>)
 8004c18:	6013      	str	r3, [r2, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20000794 	.word	0x20000794

08004c28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c36:	4b41      	ldr	r3, [pc, #260]	; (8004d3c <xTaskResumeAll+0x114>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <xTaskResumeAll+0x2c>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	603b      	str	r3, [r7, #0]
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c54:	f000 fbda 	bl	800540c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c58:	4b38      	ldr	r3, [pc, #224]	; (8004d3c <xTaskResumeAll+0x114>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	4a37      	ldr	r2, [pc, #220]	; (8004d3c <xTaskResumeAll+0x114>)
 8004c60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c62:	4b36      	ldr	r3, [pc, #216]	; (8004d3c <xTaskResumeAll+0x114>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d161      	bne.n	8004d2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c6a:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <xTaskResumeAll+0x118>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d05d      	beq.n	8004d2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c72:	e02e      	b.n	8004cd2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c74:	4b33      	ldr	r3, [pc, #204]	; (8004d44 <xTaskResumeAll+0x11c>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3318      	adds	r3, #24
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fd7c 	bl	800477e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fd77 	bl	800477e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	2201      	movs	r2, #1
 8004c96:	409a      	lsls	r2, r3
 8004c98:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <xTaskResumeAll+0x120>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	4a2a      	ldr	r2, [pc, #168]	; (8004d48 <xTaskResumeAll+0x120>)
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <xTaskResumeAll+0x124>)
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f7ff fd05 	bl	80046c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc2:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <xTaskResumeAll+0x128>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d302      	bcc.n	8004cd2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ccc:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <xTaskResumeAll+0x12c>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <xTaskResumeAll+0x11c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1cc      	bne.n	8004c74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ce0:	f000 fa1a 	bl	8005118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ce4:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <xTaskResumeAll+0x130>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d010      	beq.n	8004d12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cf0:	f000 f844 	bl	8004d7c <xTaskIncrementTick>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004cfa:	4b16      	ldr	r3, [pc, #88]	; (8004d54 <xTaskResumeAll+0x12c>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f1      	bne.n	8004cf0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004d0c:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <xTaskResumeAll+0x130>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d12:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <xTaskResumeAll+0x12c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <xTaskResumeAll+0x134>)
 8004d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d2e:	f000 fb9d 	bl	800546c <vPortExitCritical>

	return xAlreadyYielded;
 8004d32:	68bb      	ldr	r3, [r7, #8]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000794 	.word	0x20000794
 8004d40:	2000076c 	.word	0x2000076c
 8004d44:	2000072c 	.word	0x2000072c
 8004d48:	20000774 	.word	0x20000774
 8004d4c:	20000670 	.word	0x20000670
 8004d50:	2000066c 	.word	0x2000066c
 8004d54:	20000780 	.word	0x20000780
 8004d58:	2000077c 	.word	0x2000077c
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d66:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <xTaskGetTickCount+0x18>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d6c:	687b      	ldr	r3, [r7, #4]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr
 8004d78:	20000770 	.word	0x20000770

08004d7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d86:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <xTaskIncrementTick+0x150>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f040 808d 	bne.w	8004eaa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d90:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <xTaskIncrementTick+0x154>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3301      	adds	r3, #1
 8004d96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d98:	4a4d      	ldr	r2, [pc, #308]	; (8004ed0 <xTaskIncrementTick+0x154>)
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d120      	bne.n	8004de6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004da4:	4b4b      	ldr	r3, [pc, #300]	; (8004ed4 <xTaskIncrementTick+0x158>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	603b      	str	r3, [r7, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <xTaskIncrementTick+0x46>
 8004dc4:	4b43      	ldr	r3, [pc, #268]	; (8004ed4 <xTaskIncrementTick+0x158>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	4b43      	ldr	r3, [pc, #268]	; (8004ed8 <xTaskIncrementTick+0x15c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a41      	ldr	r2, [pc, #260]	; (8004ed4 <xTaskIncrementTick+0x158>)
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	4a41      	ldr	r2, [pc, #260]	; (8004ed8 <xTaskIncrementTick+0x15c>)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	4b40      	ldr	r3, [pc, #256]	; (8004edc <xTaskIncrementTick+0x160>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	4a3f      	ldr	r2, [pc, #252]	; (8004edc <xTaskIncrementTick+0x160>)
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	f000 f999 	bl	8005118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004de6:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <xTaskIncrementTick+0x164>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d34d      	bcc.n	8004e8c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004df0:	4b38      	ldr	r3, [pc, #224]	; (8004ed4 <xTaskIncrementTick+0x158>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <xTaskIncrementTick+0x82>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <xTaskIncrementTick+0x84>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e04:	4b36      	ldr	r3, [pc, #216]	; (8004ee0 <xTaskIncrementTick+0x164>)
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	601a      	str	r2, [r3, #0]
					break;
 8004e0c:	e03e      	b.n	8004e8c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e0e:	4b31      	ldr	r3, [pc, #196]	; (8004ed4 <xTaskIncrementTick+0x158>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d203      	bcs.n	8004e2e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e26:	4a2e      	ldr	r2, [pc, #184]	; (8004ee0 <xTaskIncrementTick+0x164>)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6013      	str	r3, [r2, #0]
						break;
 8004e2c:	e02e      	b.n	8004e8c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fca3 	bl	800477e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d004      	beq.n	8004e4a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	3318      	adds	r3, #24
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fc9a 	bl	800477e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	2201      	movs	r2, #1
 8004e50:	409a      	lsls	r2, r3
 8004e52:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <xTaskIncrementTick+0x168>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	4a22      	ldr	r2, [pc, #136]	; (8004ee4 <xTaskIncrementTick+0x168>)
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4a1f      	ldr	r2, [pc, #124]	; (8004ee8 <xTaskIncrementTick+0x16c>)
 8004e6a:	441a      	add	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f7ff fc28 	bl	80046c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <xTaskIncrementTick+0x170>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d3b4      	bcc.n	8004df0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e86:	2301      	movs	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e8a:	e7b1      	b.n	8004df0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e8c:	4b17      	ldr	r3, [pc, #92]	; (8004eec <xTaskIncrementTick+0x170>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e92:	4915      	ldr	r1, [pc, #84]	; (8004ee8 <xTaskIncrementTick+0x16c>)
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d907      	bls.n	8004eb4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e004      	b.n	8004eb4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <xTaskIncrementTick+0x174>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	4a0f      	ldr	r2, [pc, #60]	; (8004ef0 <xTaskIncrementTick+0x174>)
 8004eb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <xTaskIncrementTick+0x178>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ec0:	697b      	ldr	r3, [r7, #20]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000794 	.word	0x20000794
 8004ed0:	20000770 	.word	0x20000770
 8004ed4:	20000724 	.word	0x20000724
 8004ed8:	20000728 	.word	0x20000728
 8004edc:	20000784 	.word	0x20000784
 8004ee0:	2000078c 	.word	0x2000078c
 8004ee4:	20000774 	.word	0x20000774
 8004ee8:	20000670 	.word	0x20000670
 8004eec:	2000066c 	.word	0x2000066c
 8004ef0:	2000077c 	.word	0x2000077c
 8004ef4:	20000780 	.word	0x20000780

08004ef8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004efe:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <vTaskSwitchContext+0xa0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f06:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <vTaskSwitchContext+0xa4>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f0c:	e03f      	b.n	8004f8e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004f0e:	4b23      	ldr	r3, [pc, #140]	; (8004f9c <vTaskSwitchContext+0xa4>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f14:	4b22      	ldr	r3, [pc, #136]	; (8004fa0 <vTaskSwitchContext+0xa8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	fab3 f383 	clz	r3, r3
 8004f20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f22:	7afb      	ldrb	r3, [r7, #11]
 8004f24:	f1c3 031f 	rsb	r3, r3, #31
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	491e      	ldr	r1, [pc, #120]	; (8004fa4 <vTaskSwitchContext+0xac>)
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	607b      	str	r3, [r7, #4]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <vTaskSwitchContext+0x5a>
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <vTaskSwitchContext+0xac>)
 8004f60:	4413      	add	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	3308      	adds	r3, #8
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d104      	bne.n	8004f84 <vTaskSwitchContext+0x8c>
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <vTaskSwitchContext+0xb0>)
 8004f8c:	6013      	str	r3, [r2, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	20000794 	.word	0x20000794
 8004f9c:	20000780 	.word	0x20000780
 8004fa0:	20000774 	.word	0x20000774
 8004fa4:	20000670 	.word	0x20000670
 8004fa8:	2000066c 	.word	0x2000066c

08004fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fb4:	f000 f852 	bl	800505c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <prvIdleTask+0x28>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d9f9      	bls.n	8004fb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <prvIdleTask+0x2c>)
 8004fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fd0:	e7f0      	b.n	8004fb4 <prvIdleTask+0x8>
 8004fd2:	bf00      	nop
 8004fd4:	20000670 	.word	0x20000670
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	e00c      	b.n	8005002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4a12      	ldr	r2, [pc, #72]	; (800503c <prvInitialiseTaskLists+0x60>)
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fb3b 	bl	8004672 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3301      	adds	r3, #1
 8005000:	607b      	str	r3, [r7, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b06      	cmp	r3, #6
 8005006:	d9ef      	bls.n	8004fe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005008:	480d      	ldr	r0, [pc, #52]	; (8005040 <prvInitialiseTaskLists+0x64>)
 800500a:	f7ff fb32 	bl	8004672 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800500e:	480d      	ldr	r0, [pc, #52]	; (8005044 <prvInitialiseTaskLists+0x68>)
 8005010:	f7ff fb2f 	bl	8004672 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005014:	480c      	ldr	r0, [pc, #48]	; (8005048 <prvInitialiseTaskLists+0x6c>)
 8005016:	f7ff fb2c 	bl	8004672 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800501a:	480c      	ldr	r0, [pc, #48]	; (800504c <prvInitialiseTaskLists+0x70>)
 800501c:	f7ff fb29 	bl	8004672 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005020:	480b      	ldr	r0, [pc, #44]	; (8005050 <prvInitialiseTaskLists+0x74>)
 8005022:	f7ff fb26 	bl	8004672 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005026:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <prvInitialiseTaskLists+0x78>)
 8005028:	4a05      	ldr	r2, [pc, #20]	; (8005040 <prvInitialiseTaskLists+0x64>)
 800502a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800502c:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <prvInitialiseTaskLists+0x7c>)
 800502e:	4a05      	ldr	r2, [pc, #20]	; (8005044 <prvInitialiseTaskLists+0x68>)
 8005030:	601a      	str	r2, [r3, #0]
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000670 	.word	0x20000670
 8005040:	200006fc 	.word	0x200006fc
 8005044:	20000710 	.word	0x20000710
 8005048:	2000072c 	.word	0x2000072c
 800504c:	20000740 	.word	0x20000740
 8005050:	20000758 	.word	0x20000758
 8005054:	20000724 	.word	0x20000724
 8005058:	20000728 	.word	0x20000728

0800505c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005062:	e019      	b.n	8005098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005064:	f000 f9d2 	bl	800540c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005068:	4b10      	ldr	r3, [pc, #64]	; (80050ac <prvCheckTasksWaitingTermination+0x50>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fb82 	bl	800477e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <prvCheckTasksWaitingTermination+0x54>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3b01      	subs	r3, #1
 8005080:	4a0b      	ldr	r2, [pc, #44]	; (80050b0 <prvCheckTasksWaitingTermination+0x54>)
 8005082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <prvCheckTasksWaitingTermination+0x58>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3b01      	subs	r3, #1
 800508a:	4a0a      	ldr	r2, [pc, #40]	; (80050b4 <prvCheckTasksWaitingTermination+0x58>)
 800508c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800508e:	f000 f9ed 	bl	800546c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f810 	bl	80050b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <prvCheckTasksWaitingTermination+0x58>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e1      	bne.n	8005064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000740 	.word	0x20000740
 80050b0:	2000076c 	.word	0x2000076c
 80050b4:	20000754 	.word	0x20000754

080050b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d108      	bne.n	80050dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fb22 	bl	8005718 <vPortFree>
				vPortFree( pxTCB );
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fb1f 	bl	8005718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050da:	e018      	b.n	800510e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d103      	bne.n	80050ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fb16 	bl	8005718 <vPortFree>
	}
 80050ec:	e00f      	b.n	800510e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d00a      	beq.n	800510e <prvDeleteTCB+0x56>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60fb      	str	r3, [r7, #12]
}
 800510a:	bf00      	nop
 800510c:	e7fe      	b.n	800510c <prvDeleteTCB+0x54>
	}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800511e:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <prvResetNextTaskUnblockTime+0x40>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <prvResetNextTaskUnblockTime+0x14>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <prvResetNextTaskUnblockTime+0x16>
 800512c:	2300      	movs	r3, #0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <prvResetNextTaskUnblockTime+0x44>)
 8005134:	f04f 32ff 	mov.w	r2, #4294967295
 8005138:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800513a:	e008      	b.n	800514e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <prvResetNextTaskUnblockTime+0x40>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4a04      	ldr	r2, [pc, #16]	; (800515c <prvResetNextTaskUnblockTime+0x44>)
 800514c:	6013      	str	r3, [r2, #0]
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr
 8005158:	20000724 	.word	0x20000724
 800515c:	2000078c 	.word	0x2000078c

08005160 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800516a:	4b29      	ldr	r3, [pc, #164]	; (8005210 <prvAddCurrentTaskToDelayedList+0xb0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3304      	adds	r3, #4
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff fb01 	bl	800477e <uxListRemove>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005182:	4b24      	ldr	r3, [pc, #144]	; (8005214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	2201      	movs	r2, #1
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	43da      	mvns	r2, r3
 8005190:	4b21      	ldr	r3, [pc, #132]	; (8005218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4013      	ands	r3, r2
 8005196:	4a20      	ldr	r2, [pc, #128]	; (8005218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005198:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d10a      	bne.n	80051b8 <prvAddCurrentTaskToDelayedList+0x58>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d007      	beq.n	80051b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051a8:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	481a      	ldr	r0, [pc, #104]	; (800521c <prvAddCurrentTaskToDelayedList+0xbc>)
 80051b2:	f7ff fa89 	bl	80046c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051b6:	e026      	b.n	8005206 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051c0:	4b14      	ldr	r3, [pc, #80]	; (8005214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d209      	bcs.n	80051e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d0:	4b13      	ldr	r3, [pc, #76]	; (8005220 <prvAddCurrentTaskToDelayedList+0xc0>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3304      	adds	r3, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f7ff fa96 	bl	800470e <vListInsert>
}
 80051e2:	e010      	b.n	8005206 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <prvAddCurrentTaskToDelayedList+0xc4>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4619      	mov	r1, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	f7ff fa8c 	bl	800470e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d202      	bcs.n	8005206 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005200:	4a09      	ldr	r2, [pc, #36]	; (8005228 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6013      	str	r3, [r2, #0]
}
 8005206:	bf00      	nop
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000770 	.word	0x20000770
 8005214:	2000066c 	.word	0x2000066c
 8005218:	20000774 	.word	0x20000774
 800521c:	20000758 	.word	0x20000758
 8005220:	20000728 	.word	0x20000728
 8005224:	20000724 	.word	0x20000724
 8005228:	2000078c 	.word	0x2000078c

0800522c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3b04      	subs	r3, #4
 800523c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3b04      	subs	r3, #4
 800524a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f023 0201 	bic.w	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3b04      	subs	r3, #4
 800525a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800525c:	4a08      	ldr	r2, [pc, #32]	; (8005280 <pxPortInitialiseStack+0x54>)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3b14      	subs	r3, #20
 8005266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3b20      	subs	r3, #32
 8005272:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005274:	68fb      	ldr	r3, [r7, #12]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr
 8005280:	08005285 	.word	0x08005285

08005284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800528a:	2300      	movs	r3, #0
 800528c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800528e:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <prvTaskExitError+0x54>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d00a      	beq.n	80052ae <prvTaskExitError+0x2a>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	60fb      	str	r3, [r7, #12]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <prvTaskExitError+0x28>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	60bb      	str	r3, [r7, #8]
}
 80052c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052c2:	bf00      	nop
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0fc      	beq.n	80052c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	2000001c 	.word	0x2000001c
 80052dc:	00000000 	.word	0x00000000

080052e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <pxCurrentTCBConst2>)
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	6808      	ldr	r0, [r1, #0]
 80052e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052ea:	f380 8809 	msr	PSP, r0
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8811 	msr	BASEPRI, r0
 80052fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80052fe:	4770      	bx	lr

08005300 <pxCurrentTCBConst2>:
 8005300:	2000066c 	.word	0x2000066c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005308:	4806      	ldr	r0, [pc, #24]	; (8005324 <prvPortStartFirstTask+0x1c>)
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	6800      	ldr	r0, [r0, #0]
 800530e:	f380 8808 	msr	MSP, r0
 8005312:	b662      	cpsie	i
 8005314:	b661      	cpsie	f
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	df00      	svc	0
 8005320:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005322:	bf00      	nop
 8005324:	e000ed08 	.word	0xe000ed08

08005328 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800532e:	4b32      	ldr	r3, [pc, #200]	; (80053f8 <xPortStartScheduler+0xd0>)
 8005330:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	22ff      	movs	r2, #255	; 0xff
 800533e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005350:	b2da      	uxtb	r2, r3
 8005352:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <xPortStartScheduler+0xd4>)
 8005354:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005356:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <xPortStartScheduler+0xd8>)
 8005358:	2207      	movs	r2, #7
 800535a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800535c:	e009      	b.n	8005372 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800535e:	4b28      	ldr	r3, [pc, #160]	; (8005400 <xPortStartScheduler+0xd8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3b01      	subs	r3, #1
 8005364:	4a26      	ldr	r2, [pc, #152]	; (8005400 <xPortStartScheduler+0xd8>)
 8005366:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	b2db      	uxtb	r3, r3
 8005370:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537a:	2b80      	cmp	r3, #128	; 0x80
 800537c:	d0ef      	beq.n	800535e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800537e:	4b20      	ldr	r3, [pc, #128]	; (8005400 <xPortStartScheduler+0xd8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1c3 0307 	rsb	r3, r3, #7
 8005386:	2b04      	cmp	r3, #4
 8005388:	d00a      	beq.n	80053a0 <xPortStartScheduler+0x78>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	60bb      	str	r3, [r7, #8]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053a0:	4b17      	ldr	r3, [pc, #92]	; (8005400 <xPortStartScheduler+0xd8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	4a16      	ldr	r2, [pc, #88]	; (8005400 <xPortStartScheduler+0xd8>)
 80053a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053aa:	4b15      	ldr	r3, [pc, #84]	; (8005400 <xPortStartScheduler+0xd8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <xPortStartScheduler+0xd8>)
 80053b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053be:	4b11      	ldr	r3, [pc, #68]	; (8005404 <xPortStartScheduler+0xdc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a10      	ldr	r2, [pc, #64]	; (8005404 <xPortStartScheduler+0xdc>)
 80053c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053ca:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <xPortStartScheduler+0xdc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a0d      	ldr	r2, [pc, #52]	; (8005404 <xPortStartScheduler+0xdc>)
 80053d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053d6:	f000 f8b9 	bl	800554c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <xPortStartScheduler+0xe0>)
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053e0:	f7ff ff92 	bl	8005308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053e4:	f7ff fd88 	bl	8004ef8 <vTaskSwitchContext>
	prvTaskExitError();
 80053e8:	f7ff ff4c 	bl	8005284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	e000e400 	.word	0xe000e400
 80053fc:	20000798 	.word	0x20000798
 8005400:	2000079c 	.word	0x2000079c
 8005404:	e000ed20 	.word	0xe000ed20
 8005408:	2000001c 	.word	0x2000001c

0800540c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	607b      	str	r3, [r7, #4]
}
 8005424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <vPortEnterCritical+0x58>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	4a0d      	ldr	r2, [pc, #52]	; (8005464 <vPortEnterCritical+0x58>)
 800542e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <vPortEnterCritical+0x58>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10f      	bne.n	8005458 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <vPortEnterCritical+0x5c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <vPortEnterCritical+0x4c>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	603b      	str	r3, [r7, #0]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <vPortEnterCritical+0x4a>
	}
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	2000001c 	.word	0x2000001c
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005472:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <vPortExitCritical+0x4c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <vPortExitCritical+0x24>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	607b      	str	r3, [r7, #4]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <vPortExitCritical+0x4c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3b01      	subs	r3, #1
 8005496:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <vPortExitCritical+0x4c>)
 8005498:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <vPortExitCritical+0x4c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d105      	bne.n	80054ae <vPortExitCritical+0x42>
 80054a2:	2300      	movs	r3, #0
 80054a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	2000001c 	.word	0x2000001c
 80054bc:	00000000 	.word	0x00000000

080054c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054c0:	f3ef 8009 	mrs	r0, PSP
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <pxCurrentTCBConst>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054d0:	6010      	str	r0, [r2, #0]
 80054d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80054d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054da:	f380 8811 	msr	BASEPRI, r0
 80054de:	f7ff fd0b 	bl	8004ef8 <vTaskSwitchContext>
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f380 8811 	msr	BASEPRI, r0
 80054ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80054ee:	6819      	ldr	r1, [r3, #0]
 80054f0:	6808      	ldr	r0, [r1, #0]
 80054f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054f6:	f380 8809 	msr	PSP, r0
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	4770      	bx	lr

08005500 <pxCurrentTCBConst>:
 8005500:	2000066c 	.word	0x2000066c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop

08005508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005522:	f7ff fc2b 	bl	8004d7c <xTaskIncrementTick>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <SysTick_Handler+0x40>)
 800552e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f383 8811 	msr	BASEPRI, r3
}
 800553e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <vPortSetupTimerInterrupt+0x30>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <vPortSetupTimerInterrupt+0x34>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <vPortSetupTimerInterrupt+0x38>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <vPortSetupTimerInterrupt+0x3c>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	4a08      	ldr	r2, [pc, #32]	; (800558c <vPortSetupTimerInterrupt+0x40>)
 800556a:	3b01      	subs	r3, #1
 800556c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800556e:	4b03      	ldr	r3, [pc, #12]	; (800557c <vPortSetupTimerInterrupt+0x30>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	e000e010 	.word	0xe000e010
 8005580:	e000e018 	.word	0xe000e018
 8005584:	20000010 	.word	0x20000010
 8005588:	10624dd3 	.word	0x10624dd3
 800558c:	e000e014 	.word	0xe000e014

08005590 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08a      	sub	sp, #40	; 0x28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005598:	2300      	movs	r3, #0
 800559a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800559c:	f7ff fb36 	bl	8004c0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055a0:	4b58      	ldr	r3, [pc, #352]	; (8005704 <pvPortMalloc+0x174>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055a8:	f000 f910 	bl	80057cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055ac:	4b56      	ldr	r3, [pc, #344]	; (8005708 <pvPortMalloc+0x178>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 808e 	bne.w	80056d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01d      	beq.n	80055fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80055c0:	2208      	movs	r2, #8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d014      	beq.n	80055fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f023 0307 	bic.w	r3, r3, #7
 80055d8:	3308      	adds	r3, #8
 80055da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <pvPortMalloc+0x6c>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	617b      	str	r3, [r7, #20]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d069      	beq.n	80056d6 <pvPortMalloc+0x146>
 8005602:	4b42      	ldr	r3, [pc, #264]	; (800570c <pvPortMalloc+0x17c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d864      	bhi.n	80056d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800560c:	4b40      	ldr	r3, [pc, #256]	; (8005710 <pvPortMalloc+0x180>)
 800560e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005610:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <pvPortMalloc+0x180>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005616:	e004      	b.n	8005622 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d903      	bls.n	8005634 <pvPortMalloc+0xa4>
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1f1      	bne.n	8005618 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005634:	4b33      	ldr	r3, [pc, #204]	; (8005704 <pvPortMalloc+0x174>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563a:	429a      	cmp	r2, r3
 800563c:	d04b      	beq.n	80056d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2208      	movs	r2, #8
 8005644:	4413      	add	r3, r2
 8005646:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	2308      	movs	r3, #8
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	429a      	cmp	r2, r3
 800565e:	d91f      	bls.n	80056a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4413      	add	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <pvPortMalloc+0xf8>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	613b      	str	r3, [r7, #16]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800569a:	69b8      	ldr	r0, [r7, #24]
 800569c:	f000 f8f8 	bl	8005890 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <pvPortMalloc+0x17c>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	4a18      	ldr	r2, [pc, #96]	; (800570c <pvPortMalloc+0x17c>)
 80056ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056ae:	4b17      	ldr	r3, [pc, #92]	; (800570c <pvPortMalloc+0x17c>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b18      	ldr	r3, [pc, #96]	; (8005714 <pvPortMalloc+0x184>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d203      	bcs.n	80056c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ba:	4b14      	ldr	r3, [pc, #80]	; (800570c <pvPortMalloc+0x17c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a15      	ldr	r2, [pc, #84]	; (8005714 <pvPortMalloc+0x184>)
 80056c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	4b10      	ldr	r3, [pc, #64]	; (8005708 <pvPortMalloc+0x178>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056d6:	f7ff faa7 	bl	8004c28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <pvPortMalloc+0x16a>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	60fb      	str	r3, [r7, #12]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <pvPortMalloc+0x168>
	return pvReturn;
 80056fa:	69fb      	ldr	r3, [r7, #28]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3728      	adds	r7, #40	; 0x28
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	200013a8 	.word	0x200013a8
 8005708:	200013b4 	.word	0x200013b4
 800570c:	200013ac 	.word	0x200013ac
 8005710:	200013a0 	.word	0x200013a0
 8005714:	200013b0 	.word	0x200013b0

08005718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d048      	beq.n	80057bc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800572a:	2308      	movs	r3, #8
 800572c:	425b      	negs	r3, r3
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b21      	ldr	r3, [pc, #132]	; (80057c4 <vPortFree+0xac>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <vPortFree+0x44>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60fb      	str	r3, [r7, #12]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <vPortFree+0x62>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	60bb      	str	r3, [r7, #8]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <vPortFree+0xac>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d019      	beq.n	80057bc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d115      	bne.n	80057bc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <vPortFree+0xac>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	43db      	mvns	r3, r3
 800579a:	401a      	ands	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057a0:	f7ff fa34 	bl	8004c0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <vPortFree+0xb0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4413      	add	r3, r2
 80057ae:	4a06      	ldr	r2, [pc, #24]	; (80057c8 <vPortFree+0xb0>)
 80057b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057b2:	6938      	ldr	r0, [r7, #16]
 80057b4:	f000 f86c 	bl	8005890 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057b8:	f7ff fa36 	bl	8004c28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057bc:	bf00      	nop
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	200013b4 	.word	0x200013b4
 80057c8:	200013ac 	.word	0x200013ac

080057cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80057d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057d8:	4b27      	ldr	r3, [pc, #156]	; (8005878 <prvHeapInit+0xac>)
 80057da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00c      	beq.n	8005800 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3307      	adds	r3, #7
 80057ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0307 	bic.w	r3, r3, #7
 80057f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <prvHeapInit+0xac>)
 80057fc:	4413      	add	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005804:	4a1d      	ldr	r2, [pc, #116]	; (800587c <prvHeapInit+0xb0>)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800580a:	4b1c      	ldr	r3, [pc, #112]	; (800587c <prvHeapInit+0xb0>)
 800580c:	2200      	movs	r2, #0
 800580e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4413      	add	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005818:	2208      	movs	r2, #8
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0307 	bic.w	r3, r3, #7
 8005826:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a15      	ldr	r2, [pc, #84]	; (8005880 <prvHeapInit+0xb4>)
 800582c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800582e:	4b14      	ldr	r3, [pc, #80]	; (8005880 <prvHeapInit+0xb4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005836:	4b12      	ldr	r3, [pc, #72]	; (8005880 <prvHeapInit+0xb4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	1ad2      	subs	r2, r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800584c:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <prvHeapInit+0xb4>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <prvHeapInit+0xb8>)
 800585a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4a09      	ldr	r2, [pc, #36]	; (8005888 <prvHeapInit+0xbc>)
 8005862:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005864:	4b09      	ldr	r3, [pc, #36]	; (800588c <prvHeapInit+0xc0>)
 8005866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800586a:	601a      	str	r2, [r3, #0]
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	200007a0 	.word	0x200007a0
 800587c:	200013a0 	.word	0x200013a0
 8005880:	200013a8 	.word	0x200013a8
 8005884:	200013b0 	.word	0x200013b0
 8005888:	200013ac 	.word	0x200013ac
 800588c:	200013b4 	.word	0x200013b4

08005890 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005898:	4b27      	ldr	r3, [pc, #156]	; (8005938 <prvInsertBlockIntoFreeList+0xa8>)
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e002      	b.n	80058a4 <prvInsertBlockIntoFreeList+0x14>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d8f7      	bhi.n	800589e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	4413      	add	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d108      	bne.n	80058d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	441a      	add	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	441a      	add	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d118      	bne.n	8005918 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <prvInsertBlockIntoFreeList+0xac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d00d      	beq.n	800590e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	441a      	add	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e008      	b.n	8005920 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <prvInsertBlockIntoFreeList+0xac>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e003      	b.n	8005920 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d002      	beq.n	800592e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	200013a0 	.word	0x200013a0
 800593c:	200013a8 	.word	0x200013a8

08005940 <atof>:
 8005940:	2100      	movs	r1, #0
 8005942:	f000 bef1 	b.w	8006728 <strtod>
	...

08005948 <__errno>:
 8005948:	4b01      	ldr	r3, [pc, #4]	; (8005950 <__errno+0x8>)
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000020 	.word	0x20000020

08005954 <__libc_init_array>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	2600      	movs	r6, #0
 8005958:	4d0c      	ldr	r5, [pc, #48]	; (800598c <__libc_init_array+0x38>)
 800595a:	4c0d      	ldr	r4, [pc, #52]	; (8005990 <__libc_init_array+0x3c>)
 800595c:	1b64      	subs	r4, r4, r5
 800595e:	10a4      	asrs	r4, r4, #2
 8005960:	42a6      	cmp	r6, r4
 8005962:	d109      	bne.n	8005978 <__libc_init_array+0x24>
 8005964:	f004 fc2a 	bl	800a1bc <_init>
 8005968:	2600      	movs	r6, #0
 800596a:	4d0a      	ldr	r5, [pc, #40]	; (8005994 <__libc_init_array+0x40>)
 800596c:	4c0a      	ldr	r4, [pc, #40]	; (8005998 <__libc_init_array+0x44>)
 800596e:	1b64      	subs	r4, r4, r5
 8005970:	10a4      	asrs	r4, r4, #2
 8005972:	42a6      	cmp	r6, r4
 8005974:	d105      	bne.n	8005982 <__libc_init_array+0x2e>
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	f855 3b04 	ldr.w	r3, [r5], #4
 800597c:	4798      	blx	r3
 800597e:	3601      	adds	r6, #1
 8005980:	e7ee      	b.n	8005960 <__libc_init_array+0xc>
 8005982:	f855 3b04 	ldr.w	r3, [r5], #4
 8005986:	4798      	blx	r3
 8005988:	3601      	adds	r6, #1
 800598a:	e7f2      	b.n	8005972 <__libc_init_array+0x1e>
 800598c:	0800a7b8 	.word	0x0800a7b8
 8005990:	0800a7b8 	.word	0x0800a7b8
 8005994:	0800a7b8 	.word	0x0800a7b8
 8005998:	0800a7bc 	.word	0x0800a7bc

0800599c <memcpy>:
 800599c:	440a      	add	r2, r1
 800599e:	4291      	cmp	r1, r2
 80059a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80059a4:	d100      	bne.n	80059a8 <memcpy+0xc>
 80059a6:	4770      	bx	lr
 80059a8:	b510      	push	{r4, lr}
 80059aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ae:	4291      	cmp	r1, r2
 80059b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059b4:	d1f9      	bne.n	80059aa <memcpy+0xe>
 80059b6:	bd10      	pop	{r4, pc}

080059b8 <memset>:
 80059b8:	4603      	mov	r3, r0
 80059ba:	4402      	add	r2, r0
 80059bc:	4293      	cmp	r3, r2
 80059be:	d100      	bne.n	80059c2 <memset+0xa>
 80059c0:	4770      	bx	lr
 80059c2:	f803 1b01 	strb.w	r1, [r3], #1
 80059c6:	e7f9      	b.n	80059bc <memset+0x4>

080059c8 <siprintf>:
 80059c8:	b40e      	push	{r1, r2, r3}
 80059ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059ce:	b500      	push	{lr}
 80059d0:	b09c      	sub	sp, #112	; 0x70
 80059d2:	ab1d      	add	r3, sp, #116	; 0x74
 80059d4:	9002      	str	r0, [sp, #8]
 80059d6:	9006      	str	r0, [sp, #24]
 80059d8:	9107      	str	r1, [sp, #28]
 80059da:	9104      	str	r1, [sp, #16]
 80059dc:	4808      	ldr	r0, [pc, #32]	; (8005a00 <siprintf+0x38>)
 80059de:	4909      	ldr	r1, [pc, #36]	; (8005a04 <siprintf+0x3c>)
 80059e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059e4:	9105      	str	r1, [sp, #20]
 80059e6:	6800      	ldr	r0, [r0, #0]
 80059e8:	a902      	add	r1, sp, #8
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	f002 f810 	bl	8007a10 <_svfiprintf_r>
 80059f0:	2200      	movs	r2, #0
 80059f2:	9b02      	ldr	r3, [sp, #8]
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	b01c      	add	sp, #112	; 0x70
 80059f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059fc:	b003      	add	sp, #12
 80059fe:	4770      	bx	lr
 8005a00:	20000020 	.word	0x20000020
 8005a04:	ffff0208 	.word	0xffff0208

08005a08 <siscanf>:
 8005a08:	b40e      	push	{r1, r2, r3}
 8005a0a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005a0e:	b530      	push	{r4, r5, lr}
 8005a10:	b09c      	sub	sp, #112	; 0x70
 8005a12:	ac1f      	add	r4, sp, #124	; 0x7c
 8005a14:	f854 5b04 	ldr.w	r5, [r4], #4
 8005a18:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005a1c:	9002      	str	r0, [sp, #8]
 8005a1e:	9006      	str	r0, [sp, #24]
 8005a20:	f7fa fb96 	bl	8000150 <strlen>
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <siscanf+0x4c>)
 8005a26:	9003      	str	r0, [sp, #12]
 8005a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a2e:	9314      	str	r3, [sp, #80]	; 0x50
 8005a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a34:	9007      	str	r0, [sp, #28]
 8005a36:	4808      	ldr	r0, [pc, #32]	; (8005a58 <siscanf+0x50>)
 8005a38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	4623      	mov	r3, r4
 8005a40:	a902      	add	r1, sp, #8
 8005a42:	6800      	ldr	r0, [r0, #0]
 8005a44:	9401      	str	r4, [sp, #4]
 8005a46:	f002 f93d 	bl	8007cc4 <__ssvfiscanf_r>
 8005a4a:	b01c      	add	sp, #112	; 0x70
 8005a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a50:	b003      	add	sp, #12
 8005a52:	4770      	bx	lr
 8005a54:	08005a7f 	.word	0x08005a7f
 8005a58:	20000020 	.word	0x20000020

08005a5c <__sread>:
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	460c      	mov	r4, r1
 8005a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a64:	f002 fd90 	bl	8008588 <_read_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	bfab      	itete	ge
 8005a6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a70:	181b      	addge	r3, r3, r0
 8005a72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a76:	bfac      	ite	ge
 8005a78:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a7a:	81a3      	strhlt	r3, [r4, #12]
 8005a7c:	bd10      	pop	{r4, pc}

08005a7e <__seofread>:
 8005a7e:	2000      	movs	r0, #0
 8005a80:	4770      	bx	lr

08005a82 <__swrite>:
 8005a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a86:	461f      	mov	r7, r3
 8005a88:	898b      	ldrh	r3, [r1, #12]
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	05db      	lsls	r3, r3, #23
 8005a8e:	460c      	mov	r4, r1
 8005a90:	4616      	mov	r6, r2
 8005a92:	d505      	bpl.n	8005aa0 <__swrite+0x1e>
 8005a94:	2302      	movs	r3, #2
 8005a96:	2200      	movs	r2, #0
 8005a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9c:	f001 f9d8 	bl	8006e50 <_lseek_r>
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	4632      	mov	r2, r6
 8005aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	4628      	mov	r0, r5
 8005aac:	463b      	mov	r3, r7
 8005aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab6:	f000 be43 	b.w	8006740 <_write_r>

08005aba <__sseek>:
 8005aba:	b510      	push	{r4, lr}
 8005abc:	460c      	mov	r4, r1
 8005abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac2:	f001 f9c5 	bl	8006e50 <_lseek_r>
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	bf15      	itete	ne
 8005acc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ad6:	81a3      	strheq	r3, [r4, #12]
 8005ad8:	bf18      	it	ne
 8005ada:	81a3      	strhne	r3, [r4, #12]
 8005adc:	bd10      	pop	{r4, pc}

08005ade <__sclose>:
 8005ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae2:	f000 be3f 	b.w	8006764 <_close_r>

08005ae6 <strstr>:
 8005ae6:	780a      	ldrb	r2, [r1, #0]
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	b96a      	cbnz	r2, 8005b08 <strstr+0x22>
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d109      	bne.n	8005b06 <strstr+0x20>
 8005af2:	460c      	mov	r4, r1
 8005af4:	4605      	mov	r5, r0
 8005af6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f6      	beq.n	8005aec <strstr+0x6>
 8005afe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005b02:	429e      	cmp	r6, r3
 8005b04:	d0f7      	beq.n	8005af6 <strstr+0x10>
 8005b06:	3001      	adds	r0, #1
 8005b08:	7803      	ldrb	r3, [r0, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1ef      	bne.n	8005aee <strstr+0x8>
 8005b0e:	4618      	mov	r0, r3
 8005b10:	e7ec      	b.n	8005aec <strstr+0x6>

08005b12 <sulp>:
 8005b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b16:	460f      	mov	r7, r1
 8005b18:	4690      	mov	r8, r2
 8005b1a:	f001 fd2d 	bl	8007578 <__ulp>
 8005b1e:	4604      	mov	r4, r0
 8005b20:	460d      	mov	r5, r1
 8005b22:	f1b8 0f00 	cmp.w	r8, #0
 8005b26:	d011      	beq.n	8005b4c <sulp+0x3a>
 8005b28:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005b2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	dd0b      	ble.n	8005b4c <sulp+0x3a>
 8005b34:	2400      	movs	r4, #0
 8005b36:	051b      	lsls	r3, r3, #20
 8005b38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005b3c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005b40:	4622      	mov	r2, r4
 8005b42:	462b      	mov	r3, r5
 8005b44:	f7fa fcc8 	bl	80004d8 <__aeabi_dmul>
 8005b48:	4604      	mov	r4, r0
 8005b4a:	460d      	mov	r5, r1
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	4629      	mov	r1, r5
 8005b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b54:	0000      	movs	r0, r0
	...

08005b58 <_strtod_l>:
 8005b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	469b      	mov	fp, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	b09f      	sub	sp, #124	; 0x7c
 8005b62:	931a      	str	r3, [sp, #104]	; 0x68
 8005b64:	4b9e      	ldr	r3, [pc, #632]	; (8005de0 <_strtod_l+0x288>)
 8005b66:	4682      	mov	sl, r0
 8005b68:	681f      	ldr	r7, [r3, #0]
 8005b6a:	460e      	mov	r6, r1
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	9215      	str	r2, [sp, #84]	; 0x54
 8005b70:	f7fa faee 	bl	8000150 <strlen>
 8005b74:	f04f 0800 	mov.w	r8, #0
 8005b78:	4604      	mov	r4, r0
 8005b7a:	f04f 0900 	mov.w	r9, #0
 8005b7e:	9619      	str	r6, [sp, #100]	; 0x64
 8005b80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	2a2b      	cmp	r2, #43	; 0x2b
 8005b86:	d04c      	beq.n	8005c22 <_strtod_l+0xca>
 8005b88:	d83a      	bhi.n	8005c00 <_strtod_l+0xa8>
 8005b8a:	2a0d      	cmp	r2, #13
 8005b8c:	d833      	bhi.n	8005bf6 <_strtod_l+0x9e>
 8005b8e:	2a08      	cmp	r2, #8
 8005b90:	d833      	bhi.n	8005bfa <_strtod_l+0xa2>
 8005b92:	2a00      	cmp	r2, #0
 8005b94:	d03d      	beq.n	8005c12 <_strtod_l+0xba>
 8005b96:	2300      	movs	r3, #0
 8005b98:	930a      	str	r3, [sp, #40]	; 0x28
 8005b9a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005b9c:	782b      	ldrb	r3, [r5, #0]
 8005b9e:	2b30      	cmp	r3, #48	; 0x30
 8005ba0:	f040 80aa 	bne.w	8005cf8 <_strtod_l+0x1a0>
 8005ba4:	786b      	ldrb	r3, [r5, #1]
 8005ba6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005baa:	2b58      	cmp	r3, #88	; 0x58
 8005bac:	d166      	bne.n	8005c7c <_strtod_l+0x124>
 8005bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb0:	4650      	mov	r0, sl
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	ab1a      	add	r3, sp, #104	; 0x68
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4a8a      	ldr	r2, [pc, #552]	; (8005de4 <_strtod_l+0x28c>)
 8005bba:	f8cd b008 	str.w	fp, [sp, #8]
 8005bbe:	ab1b      	add	r3, sp, #108	; 0x6c
 8005bc0:	a919      	add	r1, sp, #100	; 0x64
 8005bc2:	f000 fe47 	bl	8006854 <__gethex>
 8005bc6:	f010 0607 	ands.w	r6, r0, #7
 8005bca:	4604      	mov	r4, r0
 8005bcc:	d005      	beq.n	8005bda <_strtod_l+0x82>
 8005bce:	2e06      	cmp	r6, #6
 8005bd0:	d129      	bne.n	8005c26 <_strtod_l+0xce>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	9519      	str	r5, [sp, #100]	; 0x64
 8005bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8005bda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f040 858a 	bne.w	80066f6 <_strtod_l+0xb9e>
 8005be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be4:	b1d3      	cbz	r3, 8005c1c <_strtod_l+0xc4>
 8005be6:	4642      	mov	r2, r8
 8005be8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005bec:	4610      	mov	r0, r2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	b01f      	add	sp, #124	; 0x7c
 8005bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf6:	2a20      	cmp	r2, #32
 8005bf8:	d1cd      	bne.n	8005b96 <_strtod_l+0x3e>
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	9319      	str	r3, [sp, #100]	; 0x64
 8005bfe:	e7bf      	b.n	8005b80 <_strtod_l+0x28>
 8005c00:	2a2d      	cmp	r2, #45	; 0x2d
 8005c02:	d1c8      	bne.n	8005b96 <_strtod_l+0x3e>
 8005c04:	2201      	movs	r2, #1
 8005c06:	920a      	str	r2, [sp, #40]	; 0x28
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	9219      	str	r2, [sp, #100]	; 0x64
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1c3      	bne.n	8005b9a <_strtod_l+0x42>
 8005c12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c14:	9619      	str	r6, [sp, #100]	; 0x64
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 856b 	bne.w	80066f2 <_strtod_l+0xb9a>
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	464b      	mov	r3, r9
 8005c20:	e7e4      	b.n	8005bec <_strtod_l+0x94>
 8005c22:	2200      	movs	r2, #0
 8005c24:	e7ef      	b.n	8005c06 <_strtod_l+0xae>
 8005c26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c28:	b13a      	cbz	r2, 8005c3a <_strtod_l+0xe2>
 8005c2a:	2135      	movs	r1, #53	; 0x35
 8005c2c:	a81c      	add	r0, sp, #112	; 0x70
 8005c2e:	f001 fda7 	bl	8007780 <__copybits>
 8005c32:	4650      	mov	r0, sl
 8005c34:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c36:	f001 f96f 	bl	8006f18 <_Bfree>
 8005c3a:	3e01      	subs	r6, #1
 8005c3c:	2e04      	cmp	r6, #4
 8005c3e:	d806      	bhi.n	8005c4e <_strtod_l+0xf6>
 8005c40:	e8df f006 	tbb	[pc, r6]
 8005c44:	1714030a 	.word	0x1714030a
 8005c48:	0a          	.byte	0x0a
 8005c49:	00          	.byte	0x00
 8005c4a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005c4e:	0721      	lsls	r1, r4, #28
 8005c50:	d5c3      	bpl.n	8005bda <_strtod_l+0x82>
 8005c52:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005c56:	e7c0      	b.n	8005bda <_strtod_l+0x82>
 8005c58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005c5a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005c5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c66:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005c6a:	e7f0      	b.n	8005c4e <_strtod_l+0xf6>
 8005c6c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005de8 <_strtod_l+0x290>
 8005c70:	e7ed      	b.n	8005c4e <_strtod_l+0xf6>
 8005c72:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005c76:	f04f 38ff 	mov.w	r8, #4294967295
 8005c7a:	e7e8      	b.n	8005c4e <_strtod_l+0xf6>
 8005c7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	9219      	str	r2, [sp, #100]	; 0x64
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b30      	cmp	r3, #48	; 0x30
 8005c86:	d0f9      	beq.n	8005c7c <_strtod_l+0x124>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0a6      	beq.n	8005bda <_strtod_l+0x82>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	9307      	str	r3, [sp, #28]
 8005c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c92:	220a      	movs	r2, #10
 8005c94:	9308      	str	r3, [sp, #32]
 8005c96:	2300      	movs	r3, #0
 8005c98:	469b      	mov	fp, r3
 8005c9a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005c9e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005ca0:	7805      	ldrb	r5, [r0, #0]
 8005ca2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005ca6:	b2d9      	uxtb	r1, r3
 8005ca8:	2909      	cmp	r1, #9
 8005caa:	d927      	bls.n	8005cfc <_strtod_l+0x1a4>
 8005cac:	4622      	mov	r2, r4
 8005cae:	4639      	mov	r1, r7
 8005cb0:	f002 fcca 	bl	8008648 <strncmp>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d033      	beq.n	8005d20 <_strtod_l+0x1c8>
 8005cb8:	2000      	movs	r0, #0
 8005cba:	462a      	mov	r2, r5
 8005cbc:	465c      	mov	r4, fp
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	9004      	str	r0, [sp, #16]
 8005cc2:	2a65      	cmp	r2, #101	; 0x65
 8005cc4:	d001      	beq.n	8005cca <_strtod_l+0x172>
 8005cc6:	2a45      	cmp	r2, #69	; 0x45
 8005cc8:	d114      	bne.n	8005cf4 <_strtod_l+0x19c>
 8005cca:	b91c      	cbnz	r4, 8005cd4 <_strtod_l+0x17c>
 8005ccc:	9a07      	ldr	r2, [sp, #28]
 8005cce:	4302      	orrs	r2, r0
 8005cd0:	d09f      	beq.n	8005c12 <_strtod_l+0xba>
 8005cd2:	2400      	movs	r4, #0
 8005cd4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005cd6:	1c72      	adds	r2, r6, #1
 8005cd8:	9219      	str	r2, [sp, #100]	; 0x64
 8005cda:	7872      	ldrb	r2, [r6, #1]
 8005cdc:	2a2b      	cmp	r2, #43	; 0x2b
 8005cde:	d079      	beq.n	8005dd4 <_strtod_l+0x27c>
 8005ce0:	2a2d      	cmp	r2, #45	; 0x2d
 8005ce2:	f000 8083 	beq.w	8005dec <_strtod_l+0x294>
 8005ce6:	2700      	movs	r7, #0
 8005ce8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005cec:	2909      	cmp	r1, #9
 8005cee:	f240 8083 	bls.w	8005df8 <_strtod_l+0x2a0>
 8005cf2:	9619      	str	r6, [sp, #100]	; 0x64
 8005cf4:	2500      	movs	r5, #0
 8005cf6:	e09f      	b.n	8005e38 <_strtod_l+0x2e0>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e7c8      	b.n	8005c8e <_strtod_l+0x136>
 8005cfc:	f1bb 0f08 	cmp.w	fp, #8
 8005d00:	bfd5      	itete	le
 8005d02:	9906      	ldrle	r1, [sp, #24]
 8005d04:	9905      	ldrgt	r1, [sp, #20]
 8005d06:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d0a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005d0e:	f100 0001 	add.w	r0, r0, #1
 8005d12:	bfd4      	ite	le
 8005d14:	9306      	strle	r3, [sp, #24]
 8005d16:	9305      	strgt	r3, [sp, #20]
 8005d18:	f10b 0b01 	add.w	fp, fp, #1
 8005d1c:	9019      	str	r0, [sp, #100]	; 0x64
 8005d1e:	e7be      	b.n	8005c9e <_strtod_l+0x146>
 8005d20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d22:	191a      	adds	r2, r3, r4
 8005d24:	9219      	str	r2, [sp, #100]	; 0x64
 8005d26:	5d1a      	ldrb	r2, [r3, r4]
 8005d28:	f1bb 0f00 	cmp.w	fp, #0
 8005d2c:	d036      	beq.n	8005d9c <_strtod_l+0x244>
 8005d2e:	465c      	mov	r4, fp
 8005d30:	9004      	str	r0, [sp, #16]
 8005d32:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005d36:	2b09      	cmp	r3, #9
 8005d38:	d912      	bls.n	8005d60 <_strtod_l+0x208>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e7c1      	b.n	8005cc2 <_strtod_l+0x16a>
 8005d3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d40:	3001      	adds	r0, #1
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	9219      	str	r2, [sp, #100]	; 0x64
 8005d46:	785a      	ldrb	r2, [r3, #1]
 8005d48:	2a30      	cmp	r2, #48	; 0x30
 8005d4a:	d0f8      	beq.n	8005d3e <_strtod_l+0x1e6>
 8005d4c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	f200 84d5 	bhi.w	8006700 <_strtod_l+0xba8>
 8005d56:	9004      	str	r0, [sp, #16]
 8005d58:	2000      	movs	r0, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d5e:	9308      	str	r3, [sp, #32]
 8005d60:	3a30      	subs	r2, #48	; 0x30
 8005d62:	f100 0301 	add.w	r3, r0, #1
 8005d66:	d013      	beq.n	8005d90 <_strtod_l+0x238>
 8005d68:	9904      	ldr	r1, [sp, #16]
 8005d6a:	1905      	adds	r5, r0, r4
 8005d6c:	4419      	add	r1, r3
 8005d6e:	9104      	str	r1, [sp, #16]
 8005d70:	4623      	mov	r3, r4
 8005d72:	210a      	movs	r1, #10
 8005d74:	42ab      	cmp	r3, r5
 8005d76:	d113      	bne.n	8005da0 <_strtod_l+0x248>
 8005d78:	1823      	adds	r3, r4, r0
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	f104 0401 	add.w	r4, r4, #1
 8005d80:	4404      	add	r4, r0
 8005d82:	dc1b      	bgt.n	8005dbc <_strtod_l+0x264>
 8005d84:	230a      	movs	r3, #10
 8005d86:	9906      	ldr	r1, [sp, #24]
 8005d88:	fb03 2301 	mla	r3, r3, r1, r2
 8005d8c:	9306      	str	r3, [sp, #24]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d92:	4618      	mov	r0, r3
 8005d94:	1c51      	adds	r1, r2, #1
 8005d96:	9119      	str	r1, [sp, #100]	; 0x64
 8005d98:	7852      	ldrb	r2, [r2, #1]
 8005d9a:	e7ca      	b.n	8005d32 <_strtod_l+0x1da>
 8005d9c:	4658      	mov	r0, fp
 8005d9e:	e7d3      	b.n	8005d48 <_strtod_l+0x1f0>
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	dc04      	bgt.n	8005dae <_strtod_l+0x256>
 8005da4:	9f06      	ldr	r7, [sp, #24]
 8005da6:	434f      	muls	r7, r1
 8005da8:	9706      	str	r7, [sp, #24]
 8005daa:	3301      	adds	r3, #1
 8005dac:	e7e2      	b.n	8005d74 <_strtod_l+0x21c>
 8005dae:	1c5f      	adds	r7, r3, #1
 8005db0:	2f10      	cmp	r7, #16
 8005db2:	bfde      	ittt	le
 8005db4:	9f05      	ldrle	r7, [sp, #20]
 8005db6:	434f      	mulle	r7, r1
 8005db8:	9705      	strle	r7, [sp, #20]
 8005dba:	e7f6      	b.n	8005daa <_strtod_l+0x252>
 8005dbc:	2c10      	cmp	r4, #16
 8005dbe:	bfdf      	itttt	le
 8005dc0:	230a      	movle	r3, #10
 8005dc2:	9905      	ldrle	r1, [sp, #20]
 8005dc4:	fb03 2301 	mlale	r3, r3, r1, r2
 8005dc8:	9305      	strle	r3, [sp, #20]
 8005dca:	e7e0      	b.n	8005d8e <_strtod_l+0x236>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	9304      	str	r3, [sp, #16]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e77b      	b.n	8005ccc <_strtod_l+0x174>
 8005dd4:	2700      	movs	r7, #0
 8005dd6:	1cb2      	adds	r2, r6, #2
 8005dd8:	9219      	str	r2, [sp, #100]	; 0x64
 8005dda:	78b2      	ldrb	r2, [r6, #2]
 8005ddc:	e784      	b.n	8005ce8 <_strtod_l+0x190>
 8005dde:	bf00      	nop
 8005de0:	0800a418 	.word	0x0800a418
 8005de4:	0800a350 	.word	0x0800a350
 8005de8:	7ff00000 	.word	0x7ff00000
 8005dec:	2701      	movs	r7, #1
 8005dee:	e7f2      	b.n	8005dd6 <_strtod_l+0x27e>
 8005df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005df2:	1c51      	adds	r1, r2, #1
 8005df4:	9119      	str	r1, [sp, #100]	; 0x64
 8005df6:	7852      	ldrb	r2, [r2, #1]
 8005df8:	2a30      	cmp	r2, #48	; 0x30
 8005dfa:	d0f9      	beq.n	8005df0 <_strtod_l+0x298>
 8005dfc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005e00:	2908      	cmp	r1, #8
 8005e02:	f63f af77 	bhi.w	8005cf4 <_strtod_l+0x19c>
 8005e06:	f04f 0e0a 	mov.w	lr, #10
 8005e0a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005e0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e10:	9209      	str	r2, [sp, #36]	; 0x24
 8005e12:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e14:	1c51      	adds	r1, r2, #1
 8005e16:	9119      	str	r1, [sp, #100]	; 0x64
 8005e18:	7852      	ldrb	r2, [r2, #1]
 8005e1a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005e1e:	2d09      	cmp	r5, #9
 8005e20:	d935      	bls.n	8005e8e <_strtod_l+0x336>
 8005e22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e24:	1b49      	subs	r1, r1, r5
 8005e26:	2908      	cmp	r1, #8
 8005e28:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005e2c:	dc02      	bgt.n	8005e34 <_strtod_l+0x2dc>
 8005e2e:	4565      	cmp	r5, ip
 8005e30:	bfa8      	it	ge
 8005e32:	4665      	movge	r5, ip
 8005e34:	b107      	cbz	r7, 8005e38 <_strtod_l+0x2e0>
 8005e36:	426d      	negs	r5, r5
 8005e38:	2c00      	cmp	r4, #0
 8005e3a:	d14c      	bne.n	8005ed6 <_strtod_l+0x37e>
 8005e3c:	9907      	ldr	r1, [sp, #28]
 8005e3e:	4301      	orrs	r1, r0
 8005e40:	f47f aecb 	bne.w	8005bda <_strtod_l+0x82>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f47f aee4 	bne.w	8005c12 <_strtod_l+0xba>
 8005e4a:	2a69      	cmp	r2, #105	; 0x69
 8005e4c:	d026      	beq.n	8005e9c <_strtod_l+0x344>
 8005e4e:	dc23      	bgt.n	8005e98 <_strtod_l+0x340>
 8005e50:	2a49      	cmp	r2, #73	; 0x49
 8005e52:	d023      	beq.n	8005e9c <_strtod_l+0x344>
 8005e54:	2a4e      	cmp	r2, #78	; 0x4e
 8005e56:	f47f aedc 	bne.w	8005c12 <_strtod_l+0xba>
 8005e5a:	499d      	ldr	r1, [pc, #628]	; (80060d0 <_strtod_l+0x578>)
 8005e5c:	a819      	add	r0, sp, #100	; 0x64
 8005e5e:	f000 ff47 	bl	8006cf0 <__match>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	f43f aed5 	beq.w	8005c12 <_strtod_l+0xba>
 8005e68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b28      	cmp	r3, #40	; 0x28
 8005e6e:	d12c      	bne.n	8005eca <_strtod_l+0x372>
 8005e70:	4998      	ldr	r1, [pc, #608]	; (80060d4 <_strtod_l+0x57c>)
 8005e72:	aa1c      	add	r2, sp, #112	; 0x70
 8005e74:	a819      	add	r0, sp, #100	; 0x64
 8005e76:	f000 ff4f 	bl	8006d18 <__hexnan>
 8005e7a:	2805      	cmp	r0, #5
 8005e7c:	d125      	bne.n	8005eca <_strtod_l+0x372>
 8005e7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e80:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005e84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005e88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005e8c:	e6a5      	b.n	8005bda <_strtod_l+0x82>
 8005e8e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005e92:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005e96:	e7bc      	b.n	8005e12 <_strtod_l+0x2ba>
 8005e98:	2a6e      	cmp	r2, #110	; 0x6e
 8005e9a:	e7dc      	b.n	8005e56 <_strtod_l+0x2fe>
 8005e9c:	498e      	ldr	r1, [pc, #568]	; (80060d8 <_strtod_l+0x580>)
 8005e9e:	a819      	add	r0, sp, #100	; 0x64
 8005ea0:	f000 ff26 	bl	8006cf0 <__match>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	f43f aeb4 	beq.w	8005c12 <_strtod_l+0xba>
 8005eaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005eac:	498b      	ldr	r1, [pc, #556]	; (80060dc <_strtod_l+0x584>)
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	a819      	add	r0, sp, #100	; 0x64
 8005eb2:	9319      	str	r3, [sp, #100]	; 0x64
 8005eb4:	f000 ff1c 	bl	8006cf0 <__match>
 8005eb8:	b910      	cbnz	r0, 8005ec0 <_strtod_l+0x368>
 8005eba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	9319      	str	r3, [sp, #100]	; 0x64
 8005ec0:	f04f 0800 	mov.w	r8, #0
 8005ec4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80060e0 <_strtod_l+0x588>
 8005ec8:	e687      	b.n	8005bda <_strtod_l+0x82>
 8005eca:	4886      	ldr	r0, [pc, #536]	; (80060e4 <_strtod_l+0x58c>)
 8005ecc:	f002 fb6e 	bl	80085ac <nan>
 8005ed0:	4680      	mov	r8, r0
 8005ed2:	4689      	mov	r9, r1
 8005ed4:	e681      	b.n	8005bda <_strtod_l+0x82>
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	f1bb 0f00 	cmp.w	fp, #0
 8005edc:	bf08      	it	eq
 8005ede:	46a3      	moveq	fp, r4
 8005ee0:	1aeb      	subs	r3, r5, r3
 8005ee2:	2c10      	cmp	r4, #16
 8005ee4:	9806      	ldr	r0, [sp, #24]
 8005ee6:	4626      	mov	r6, r4
 8005ee8:	9307      	str	r3, [sp, #28]
 8005eea:	bfa8      	it	ge
 8005eec:	2610      	movge	r6, #16
 8005eee:	f7fa fa79 	bl	80003e4 <__aeabi_ui2d>
 8005ef2:	2c09      	cmp	r4, #9
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	4689      	mov	r9, r1
 8005ef8:	dd13      	ble.n	8005f22 <_strtod_l+0x3ca>
 8005efa:	4b7b      	ldr	r3, [pc, #492]	; (80060e8 <_strtod_l+0x590>)
 8005efc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f00:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005f04:	f7fa fae8 	bl	80004d8 <__aeabi_dmul>
 8005f08:	4680      	mov	r8, r0
 8005f0a:	9805      	ldr	r0, [sp, #20]
 8005f0c:	4689      	mov	r9, r1
 8005f0e:	f7fa fa69 	bl	80003e4 <__aeabi_ui2d>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4640      	mov	r0, r8
 8005f18:	4649      	mov	r1, r9
 8005f1a:	f7fa f927 	bl	800016c <__adddf3>
 8005f1e:	4680      	mov	r8, r0
 8005f20:	4689      	mov	r9, r1
 8005f22:	2c0f      	cmp	r4, #15
 8005f24:	dc36      	bgt.n	8005f94 <_strtod_l+0x43c>
 8005f26:	9b07      	ldr	r3, [sp, #28]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f43f ae56 	beq.w	8005bda <_strtod_l+0x82>
 8005f2e:	dd22      	ble.n	8005f76 <_strtod_l+0x41e>
 8005f30:	2b16      	cmp	r3, #22
 8005f32:	dc09      	bgt.n	8005f48 <_strtod_l+0x3f0>
 8005f34:	496c      	ldr	r1, [pc, #432]	; (80060e8 <_strtod_l+0x590>)
 8005f36:	4642      	mov	r2, r8
 8005f38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f42:	f7fa fac9 	bl	80004d8 <__aeabi_dmul>
 8005f46:	e7c3      	b.n	8005ed0 <_strtod_l+0x378>
 8005f48:	9a07      	ldr	r2, [sp, #28]
 8005f4a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	db20      	blt.n	8005f94 <_strtod_l+0x43c>
 8005f52:	4d65      	ldr	r5, [pc, #404]	; (80060e8 <_strtod_l+0x590>)
 8005f54:	f1c4 040f 	rsb	r4, r4, #15
 8005f58:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f62:	464b      	mov	r3, r9
 8005f64:	f7fa fab8 	bl	80004d8 <__aeabi_dmul>
 8005f68:	9b07      	ldr	r3, [sp, #28]
 8005f6a:	1b1c      	subs	r4, r3, r4
 8005f6c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005f70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f74:	e7e5      	b.n	8005f42 <_strtod_l+0x3ea>
 8005f76:	9b07      	ldr	r3, [sp, #28]
 8005f78:	3316      	adds	r3, #22
 8005f7a:	db0b      	blt.n	8005f94 <_strtod_l+0x43c>
 8005f7c:	9b04      	ldr	r3, [sp, #16]
 8005f7e:	4640      	mov	r0, r8
 8005f80:	1b5d      	subs	r5, r3, r5
 8005f82:	4b59      	ldr	r3, [pc, #356]	; (80060e8 <_strtod_l+0x590>)
 8005f84:	4649      	mov	r1, r9
 8005f86:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005f8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f8e:	f7fa fbcd 	bl	800072c <__aeabi_ddiv>
 8005f92:	e79d      	b.n	8005ed0 <_strtod_l+0x378>
 8005f94:	9b07      	ldr	r3, [sp, #28]
 8005f96:	1ba6      	subs	r6, r4, r6
 8005f98:	441e      	add	r6, r3
 8005f9a:	2e00      	cmp	r6, #0
 8005f9c:	dd74      	ble.n	8006088 <_strtod_l+0x530>
 8005f9e:	f016 030f 	ands.w	r3, r6, #15
 8005fa2:	d00a      	beq.n	8005fba <_strtod_l+0x462>
 8005fa4:	4950      	ldr	r1, [pc, #320]	; (80060e8 <_strtod_l+0x590>)
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	f7fa fa91 	bl	80004d8 <__aeabi_dmul>
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	4689      	mov	r9, r1
 8005fba:	f036 060f 	bics.w	r6, r6, #15
 8005fbe:	d052      	beq.n	8006066 <_strtod_l+0x50e>
 8005fc0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005fc4:	dd27      	ble.n	8006016 <_strtod_l+0x4be>
 8005fc6:	f04f 0b00 	mov.w	fp, #0
 8005fca:	f8cd b010 	str.w	fp, [sp, #16]
 8005fce:	f8cd b020 	str.w	fp, [sp, #32]
 8005fd2:	f8cd b018 	str.w	fp, [sp, #24]
 8005fd6:	2322      	movs	r3, #34	; 0x22
 8005fd8:	f04f 0800 	mov.w	r8, #0
 8005fdc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80060e0 <_strtod_l+0x588>
 8005fe0:	f8ca 3000 	str.w	r3, [sl]
 8005fe4:	9b08      	ldr	r3, [sp, #32]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f43f adf7 	beq.w	8005bda <_strtod_l+0x82>
 8005fec:	4650      	mov	r0, sl
 8005fee:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ff0:	f000 ff92 	bl	8006f18 <_Bfree>
 8005ff4:	4650      	mov	r0, sl
 8005ff6:	9906      	ldr	r1, [sp, #24]
 8005ff8:	f000 ff8e 	bl	8006f18 <_Bfree>
 8005ffc:	4650      	mov	r0, sl
 8005ffe:	9904      	ldr	r1, [sp, #16]
 8006000:	f000 ff8a 	bl	8006f18 <_Bfree>
 8006004:	4650      	mov	r0, sl
 8006006:	9908      	ldr	r1, [sp, #32]
 8006008:	f000 ff86 	bl	8006f18 <_Bfree>
 800600c:	4659      	mov	r1, fp
 800600e:	4650      	mov	r0, sl
 8006010:	f000 ff82 	bl	8006f18 <_Bfree>
 8006014:	e5e1      	b.n	8005bda <_strtod_l+0x82>
 8006016:	4b35      	ldr	r3, [pc, #212]	; (80060ec <_strtod_l+0x594>)
 8006018:	4640      	mov	r0, r8
 800601a:	9305      	str	r3, [sp, #20]
 800601c:	2300      	movs	r3, #0
 800601e:	4649      	mov	r1, r9
 8006020:	461f      	mov	r7, r3
 8006022:	1136      	asrs	r6, r6, #4
 8006024:	2e01      	cmp	r6, #1
 8006026:	dc21      	bgt.n	800606c <_strtod_l+0x514>
 8006028:	b10b      	cbz	r3, 800602e <_strtod_l+0x4d6>
 800602a:	4680      	mov	r8, r0
 800602c:	4689      	mov	r9, r1
 800602e:	4b2f      	ldr	r3, [pc, #188]	; (80060ec <_strtod_l+0x594>)
 8006030:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006034:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006038:	4642      	mov	r2, r8
 800603a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800603e:	464b      	mov	r3, r9
 8006040:	f7fa fa4a 	bl	80004d8 <__aeabi_dmul>
 8006044:	4b26      	ldr	r3, [pc, #152]	; (80060e0 <_strtod_l+0x588>)
 8006046:	460a      	mov	r2, r1
 8006048:	400b      	ands	r3, r1
 800604a:	4929      	ldr	r1, [pc, #164]	; (80060f0 <_strtod_l+0x598>)
 800604c:	4680      	mov	r8, r0
 800604e:	428b      	cmp	r3, r1
 8006050:	d8b9      	bhi.n	8005fc6 <_strtod_l+0x46e>
 8006052:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006056:	428b      	cmp	r3, r1
 8006058:	bf86      	itte	hi
 800605a:	f04f 38ff 	movhi.w	r8, #4294967295
 800605e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80060f4 <_strtod_l+0x59c>
 8006062:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006066:	2300      	movs	r3, #0
 8006068:	9305      	str	r3, [sp, #20]
 800606a:	e07f      	b.n	800616c <_strtod_l+0x614>
 800606c:	07f2      	lsls	r2, r6, #31
 800606e:	d505      	bpl.n	800607c <_strtod_l+0x524>
 8006070:	9b05      	ldr	r3, [sp, #20]
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f7fa fa2f 	bl	80004d8 <__aeabi_dmul>
 800607a:	2301      	movs	r3, #1
 800607c:	9a05      	ldr	r2, [sp, #20]
 800607e:	3701      	adds	r7, #1
 8006080:	3208      	adds	r2, #8
 8006082:	1076      	asrs	r6, r6, #1
 8006084:	9205      	str	r2, [sp, #20]
 8006086:	e7cd      	b.n	8006024 <_strtod_l+0x4cc>
 8006088:	d0ed      	beq.n	8006066 <_strtod_l+0x50e>
 800608a:	4276      	negs	r6, r6
 800608c:	f016 020f 	ands.w	r2, r6, #15
 8006090:	d00a      	beq.n	80060a8 <_strtod_l+0x550>
 8006092:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <_strtod_l+0x590>)
 8006094:	4640      	mov	r0, r8
 8006096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800609a:	4649      	mov	r1, r9
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa fb44 	bl	800072c <__aeabi_ddiv>
 80060a4:	4680      	mov	r8, r0
 80060a6:	4689      	mov	r9, r1
 80060a8:	1136      	asrs	r6, r6, #4
 80060aa:	d0dc      	beq.n	8006066 <_strtod_l+0x50e>
 80060ac:	2e1f      	cmp	r6, #31
 80060ae:	dd23      	ble.n	80060f8 <_strtod_l+0x5a0>
 80060b0:	f04f 0b00 	mov.w	fp, #0
 80060b4:	f8cd b010 	str.w	fp, [sp, #16]
 80060b8:	f8cd b020 	str.w	fp, [sp, #32]
 80060bc:	f8cd b018 	str.w	fp, [sp, #24]
 80060c0:	2322      	movs	r3, #34	; 0x22
 80060c2:	f04f 0800 	mov.w	r8, #0
 80060c6:	f04f 0900 	mov.w	r9, #0
 80060ca:	f8ca 3000 	str.w	r3, [sl]
 80060ce:	e789      	b.n	8005fe4 <_strtod_l+0x48c>
 80060d0:	0800a34d 	.word	0x0800a34d
 80060d4:	0800a364 	.word	0x0800a364
 80060d8:	0800a344 	.word	0x0800a344
 80060dc:	0800a347 	.word	0x0800a347
 80060e0:	7ff00000 	.word	0x7ff00000
 80060e4:	0800a625 	.word	0x0800a625
 80060e8:	0800a4c8 	.word	0x0800a4c8
 80060ec:	0800a4a0 	.word	0x0800a4a0
 80060f0:	7ca00000 	.word	0x7ca00000
 80060f4:	7fefffff 	.word	0x7fefffff
 80060f8:	f016 0310 	ands.w	r3, r6, #16
 80060fc:	bf18      	it	ne
 80060fe:	236a      	movne	r3, #106	; 0x6a
 8006100:	4640      	mov	r0, r8
 8006102:	9305      	str	r3, [sp, #20]
 8006104:	4649      	mov	r1, r9
 8006106:	2300      	movs	r3, #0
 8006108:	4fb0      	ldr	r7, [pc, #704]	; (80063cc <_strtod_l+0x874>)
 800610a:	07f2      	lsls	r2, r6, #31
 800610c:	d504      	bpl.n	8006118 <_strtod_l+0x5c0>
 800610e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006112:	f7fa f9e1 	bl	80004d8 <__aeabi_dmul>
 8006116:	2301      	movs	r3, #1
 8006118:	1076      	asrs	r6, r6, #1
 800611a:	f107 0708 	add.w	r7, r7, #8
 800611e:	d1f4      	bne.n	800610a <_strtod_l+0x5b2>
 8006120:	b10b      	cbz	r3, 8006126 <_strtod_l+0x5ce>
 8006122:	4680      	mov	r8, r0
 8006124:	4689      	mov	r9, r1
 8006126:	9b05      	ldr	r3, [sp, #20]
 8006128:	b1c3      	cbz	r3, 800615c <_strtod_l+0x604>
 800612a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800612e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006132:	2b00      	cmp	r3, #0
 8006134:	4649      	mov	r1, r9
 8006136:	dd11      	ble.n	800615c <_strtod_l+0x604>
 8006138:	2b1f      	cmp	r3, #31
 800613a:	f340 8127 	ble.w	800638c <_strtod_l+0x834>
 800613e:	2b34      	cmp	r3, #52	; 0x34
 8006140:	bfd8      	it	le
 8006142:	f04f 33ff 	movle.w	r3, #4294967295
 8006146:	f04f 0800 	mov.w	r8, #0
 800614a:	bfcf      	iteee	gt
 800614c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006150:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006154:	fa03 f202 	lslle.w	r2, r3, r2
 8006158:	ea02 0901 	andle.w	r9, r2, r1
 800615c:	2200      	movs	r2, #0
 800615e:	2300      	movs	r3, #0
 8006160:	4640      	mov	r0, r8
 8006162:	4649      	mov	r1, r9
 8006164:	f7fa fc20 	bl	80009a8 <__aeabi_dcmpeq>
 8006168:	2800      	cmp	r0, #0
 800616a:	d1a1      	bne.n	80060b0 <_strtod_l+0x558>
 800616c:	9b06      	ldr	r3, [sp, #24]
 800616e:	465a      	mov	r2, fp
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	4650      	mov	r0, sl
 8006174:	4623      	mov	r3, r4
 8006176:	9908      	ldr	r1, [sp, #32]
 8006178:	f000 ff36 	bl	8006fe8 <__s2b>
 800617c:	9008      	str	r0, [sp, #32]
 800617e:	2800      	cmp	r0, #0
 8006180:	f43f af21 	beq.w	8005fc6 <_strtod_l+0x46e>
 8006184:	9b04      	ldr	r3, [sp, #16]
 8006186:	f04f 0b00 	mov.w	fp, #0
 800618a:	1b5d      	subs	r5, r3, r5
 800618c:	9b07      	ldr	r3, [sp, #28]
 800618e:	f8cd b010 	str.w	fp, [sp, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	bfb4      	ite	lt
 8006196:	462b      	movlt	r3, r5
 8006198:	2300      	movge	r3, #0
 800619a:	930e      	str	r3, [sp, #56]	; 0x38
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80061a2:	9314      	str	r3, [sp, #80]	; 0x50
 80061a4:	9b08      	ldr	r3, [sp, #32]
 80061a6:	4650      	mov	r0, sl
 80061a8:	6859      	ldr	r1, [r3, #4]
 80061aa:	f000 fe75 	bl	8006e98 <_Balloc>
 80061ae:	9006      	str	r0, [sp, #24]
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f43f af10 	beq.w	8005fd6 <_strtod_l+0x47e>
 80061b6:	9b08      	ldr	r3, [sp, #32]
 80061b8:	300c      	adds	r0, #12
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	f103 010c 	add.w	r1, r3, #12
 80061c0:	3202      	adds	r2, #2
 80061c2:	0092      	lsls	r2, r2, #2
 80061c4:	f7ff fbea 	bl	800599c <memcpy>
 80061c8:	ab1c      	add	r3, sp, #112	; 0x70
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	ab1b      	add	r3, sp, #108	; 0x6c
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	4650      	mov	r0, sl
 80061d6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80061da:	f001 fa47 	bl	800766c <__d2b>
 80061de:	901a      	str	r0, [sp, #104]	; 0x68
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f43f aef8 	beq.w	8005fd6 <_strtod_l+0x47e>
 80061e6:	2101      	movs	r1, #1
 80061e8:	4650      	mov	r0, sl
 80061ea:	f000 ff95 	bl	8007118 <__i2b>
 80061ee:	4603      	mov	r3, r0
 80061f0:	9004      	str	r0, [sp, #16]
 80061f2:	2800      	cmp	r0, #0
 80061f4:	f43f aeef 	beq.w	8005fd6 <_strtod_l+0x47e>
 80061f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80061fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	bfab      	itete	ge
 8006200:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006202:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006204:	18ee      	addge	r6, r5, r3
 8006206:	1b5c      	sublt	r4, r3, r5
 8006208:	9b05      	ldr	r3, [sp, #20]
 800620a:	bfa8      	it	ge
 800620c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800620e:	eba5 0503 	sub.w	r5, r5, r3
 8006212:	4415      	add	r5, r2
 8006214:	4b6e      	ldr	r3, [pc, #440]	; (80063d0 <_strtod_l+0x878>)
 8006216:	f105 35ff 	add.w	r5, r5, #4294967295
 800621a:	bfb8      	it	lt
 800621c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800621e:	429d      	cmp	r5, r3
 8006220:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006224:	f280 80c4 	bge.w	80063b0 <_strtod_l+0x858>
 8006228:	1b5b      	subs	r3, r3, r5
 800622a:	2b1f      	cmp	r3, #31
 800622c:	f04f 0701 	mov.w	r7, #1
 8006230:	eba2 0203 	sub.w	r2, r2, r3
 8006234:	f300 80b1 	bgt.w	800639a <_strtod_l+0x842>
 8006238:	2500      	movs	r5, #0
 800623a:	fa07 f303 	lsl.w	r3, r7, r3
 800623e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006240:	18b7      	adds	r7, r6, r2
 8006242:	9b05      	ldr	r3, [sp, #20]
 8006244:	42be      	cmp	r6, r7
 8006246:	4414      	add	r4, r2
 8006248:	441c      	add	r4, r3
 800624a:	4633      	mov	r3, r6
 800624c:	bfa8      	it	ge
 800624e:	463b      	movge	r3, r7
 8006250:	42a3      	cmp	r3, r4
 8006252:	bfa8      	it	ge
 8006254:	4623      	movge	r3, r4
 8006256:	2b00      	cmp	r3, #0
 8006258:	bfc2      	ittt	gt
 800625a:	1aff      	subgt	r7, r7, r3
 800625c:	1ae4      	subgt	r4, r4, r3
 800625e:	1af6      	subgt	r6, r6, r3
 8006260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006262:	2b00      	cmp	r3, #0
 8006264:	dd17      	ble.n	8006296 <_strtod_l+0x73e>
 8006266:	461a      	mov	r2, r3
 8006268:	4650      	mov	r0, sl
 800626a:	9904      	ldr	r1, [sp, #16]
 800626c:	f001 f812 	bl	8007294 <__pow5mult>
 8006270:	9004      	str	r0, [sp, #16]
 8006272:	2800      	cmp	r0, #0
 8006274:	f43f aeaf 	beq.w	8005fd6 <_strtod_l+0x47e>
 8006278:	4601      	mov	r1, r0
 800627a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800627c:	4650      	mov	r0, sl
 800627e:	f000 ff61 	bl	8007144 <__multiply>
 8006282:	9009      	str	r0, [sp, #36]	; 0x24
 8006284:	2800      	cmp	r0, #0
 8006286:	f43f aea6 	beq.w	8005fd6 <_strtod_l+0x47e>
 800628a:	4650      	mov	r0, sl
 800628c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800628e:	f000 fe43 	bl	8006f18 <_Bfree>
 8006292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006294:	931a      	str	r3, [sp, #104]	; 0x68
 8006296:	2f00      	cmp	r7, #0
 8006298:	f300 808e 	bgt.w	80063b8 <_strtod_l+0x860>
 800629c:	9b07      	ldr	r3, [sp, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dd08      	ble.n	80062b4 <_strtod_l+0x75c>
 80062a2:	4650      	mov	r0, sl
 80062a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80062a6:	9906      	ldr	r1, [sp, #24]
 80062a8:	f000 fff4 	bl	8007294 <__pow5mult>
 80062ac:	9006      	str	r0, [sp, #24]
 80062ae:	2800      	cmp	r0, #0
 80062b0:	f43f ae91 	beq.w	8005fd6 <_strtod_l+0x47e>
 80062b4:	2c00      	cmp	r4, #0
 80062b6:	dd08      	ble.n	80062ca <_strtod_l+0x772>
 80062b8:	4622      	mov	r2, r4
 80062ba:	4650      	mov	r0, sl
 80062bc:	9906      	ldr	r1, [sp, #24]
 80062be:	f001 f843 	bl	8007348 <__lshift>
 80062c2:	9006      	str	r0, [sp, #24]
 80062c4:	2800      	cmp	r0, #0
 80062c6:	f43f ae86 	beq.w	8005fd6 <_strtod_l+0x47e>
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	dd08      	ble.n	80062e0 <_strtod_l+0x788>
 80062ce:	4632      	mov	r2, r6
 80062d0:	4650      	mov	r0, sl
 80062d2:	9904      	ldr	r1, [sp, #16]
 80062d4:	f001 f838 	bl	8007348 <__lshift>
 80062d8:	9004      	str	r0, [sp, #16]
 80062da:	2800      	cmp	r0, #0
 80062dc:	f43f ae7b 	beq.w	8005fd6 <_strtod_l+0x47e>
 80062e0:	4650      	mov	r0, sl
 80062e2:	9a06      	ldr	r2, [sp, #24]
 80062e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062e6:	f001 f8bb 	bl	8007460 <__mdiff>
 80062ea:	4683      	mov	fp, r0
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f43f ae72 	beq.w	8005fd6 <_strtod_l+0x47e>
 80062f2:	2400      	movs	r4, #0
 80062f4:	68c3      	ldr	r3, [r0, #12]
 80062f6:	9904      	ldr	r1, [sp, #16]
 80062f8:	60c4      	str	r4, [r0, #12]
 80062fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80062fc:	f001 f894 	bl	8007428 <__mcmp>
 8006300:	42a0      	cmp	r0, r4
 8006302:	da6b      	bge.n	80063dc <_strtod_l+0x884>
 8006304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006306:	ea53 0308 	orrs.w	r3, r3, r8
 800630a:	f040 8091 	bne.w	8006430 <_strtod_l+0x8d8>
 800630e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 808c 	bne.w	8006430 <_strtod_l+0x8d8>
 8006318:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800631c:	0d1b      	lsrs	r3, r3, #20
 800631e:	051b      	lsls	r3, r3, #20
 8006320:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006324:	f240 8084 	bls.w	8006430 <_strtod_l+0x8d8>
 8006328:	f8db 3014 	ldr.w	r3, [fp, #20]
 800632c:	b91b      	cbnz	r3, 8006336 <_strtod_l+0x7de>
 800632e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006332:	2b01      	cmp	r3, #1
 8006334:	dd7c      	ble.n	8006430 <_strtod_l+0x8d8>
 8006336:	4659      	mov	r1, fp
 8006338:	2201      	movs	r2, #1
 800633a:	4650      	mov	r0, sl
 800633c:	f001 f804 	bl	8007348 <__lshift>
 8006340:	9904      	ldr	r1, [sp, #16]
 8006342:	4683      	mov	fp, r0
 8006344:	f001 f870 	bl	8007428 <__mcmp>
 8006348:	2800      	cmp	r0, #0
 800634a:	dd71      	ble.n	8006430 <_strtod_l+0x8d8>
 800634c:	9905      	ldr	r1, [sp, #20]
 800634e:	464b      	mov	r3, r9
 8006350:	4a20      	ldr	r2, [pc, #128]	; (80063d4 <_strtod_l+0x87c>)
 8006352:	2900      	cmp	r1, #0
 8006354:	f000 808c 	beq.w	8006470 <_strtod_l+0x918>
 8006358:	ea02 0109 	and.w	r1, r2, r9
 800635c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006360:	f300 8086 	bgt.w	8006470 <_strtod_l+0x918>
 8006364:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006368:	f77f aeaa 	ble.w	80060c0 <_strtod_l+0x568>
 800636c:	4640      	mov	r0, r8
 800636e:	4649      	mov	r1, r9
 8006370:	4b19      	ldr	r3, [pc, #100]	; (80063d8 <_strtod_l+0x880>)
 8006372:	2200      	movs	r2, #0
 8006374:	f7fa f8b0 	bl	80004d8 <__aeabi_dmul>
 8006378:	460b      	mov	r3, r1
 800637a:	4303      	orrs	r3, r0
 800637c:	bf08      	it	eq
 800637e:	2322      	moveq	r3, #34	; 0x22
 8006380:	4680      	mov	r8, r0
 8006382:	4689      	mov	r9, r1
 8006384:	bf08      	it	eq
 8006386:	f8ca 3000 	streq.w	r3, [sl]
 800638a:	e62f      	b.n	8005fec <_strtod_l+0x494>
 800638c:	f04f 32ff 	mov.w	r2, #4294967295
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	ea03 0808 	and.w	r8, r3, r8
 8006398:	e6e0      	b.n	800615c <_strtod_l+0x604>
 800639a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800639e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80063a2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80063a6:	35e2      	adds	r5, #226	; 0xe2
 80063a8:	fa07 f505 	lsl.w	r5, r7, r5
 80063ac:	970f      	str	r7, [sp, #60]	; 0x3c
 80063ae:	e747      	b.n	8006240 <_strtod_l+0x6e8>
 80063b0:	2301      	movs	r3, #1
 80063b2:	2500      	movs	r5, #0
 80063b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80063b6:	e743      	b.n	8006240 <_strtod_l+0x6e8>
 80063b8:	463a      	mov	r2, r7
 80063ba:	4650      	mov	r0, sl
 80063bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063be:	f000 ffc3 	bl	8007348 <__lshift>
 80063c2:	901a      	str	r0, [sp, #104]	; 0x68
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f47f af69 	bne.w	800629c <_strtod_l+0x744>
 80063ca:	e604      	b.n	8005fd6 <_strtod_l+0x47e>
 80063cc:	0800a378 	.word	0x0800a378
 80063d0:	fffffc02 	.word	0xfffffc02
 80063d4:	7ff00000 	.word	0x7ff00000
 80063d8:	39500000 	.word	0x39500000
 80063dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063e0:	d165      	bne.n	80064ae <_strtod_l+0x956>
 80063e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063e8:	b35a      	cbz	r2, 8006442 <_strtod_l+0x8ea>
 80063ea:	4a99      	ldr	r2, [pc, #612]	; (8006650 <_strtod_l+0xaf8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d12b      	bne.n	8006448 <_strtod_l+0x8f0>
 80063f0:	9b05      	ldr	r3, [sp, #20]
 80063f2:	4641      	mov	r1, r8
 80063f4:	b303      	cbz	r3, 8006438 <_strtod_l+0x8e0>
 80063f6:	464a      	mov	r2, r9
 80063f8:	4b96      	ldr	r3, [pc, #600]	; (8006654 <_strtod_l+0xafc>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006400:	f04f 32ff 	mov.w	r2, #4294967295
 8006404:	d81b      	bhi.n	800643e <_strtod_l+0x8e6>
 8006406:	0d1b      	lsrs	r3, r3, #20
 8006408:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	4299      	cmp	r1, r3
 8006412:	d119      	bne.n	8006448 <_strtod_l+0x8f0>
 8006414:	4b90      	ldr	r3, [pc, #576]	; (8006658 <_strtod_l+0xb00>)
 8006416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006418:	429a      	cmp	r2, r3
 800641a:	d102      	bne.n	8006422 <_strtod_l+0x8ca>
 800641c:	3101      	adds	r1, #1
 800641e:	f43f adda 	beq.w	8005fd6 <_strtod_l+0x47e>
 8006422:	f04f 0800 	mov.w	r8, #0
 8006426:	4b8b      	ldr	r3, [pc, #556]	; (8006654 <_strtod_l+0xafc>)
 8006428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800642a:	401a      	ands	r2, r3
 800642c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006430:	9b05      	ldr	r3, [sp, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d19a      	bne.n	800636c <_strtod_l+0x814>
 8006436:	e5d9      	b.n	8005fec <_strtod_l+0x494>
 8006438:	f04f 33ff 	mov.w	r3, #4294967295
 800643c:	e7e8      	b.n	8006410 <_strtod_l+0x8b8>
 800643e:	4613      	mov	r3, r2
 8006440:	e7e6      	b.n	8006410 <_strtod_l+0x8b8>
 8006442:	ea53 0308 	orrs.w	r3, r3, r8
 8006446:	d081      	beq.n	800634c <_strtod_l+0x7f4>
 8006448:	b1e5      	cbz	r5, 8006484 <_strtod_l+0x92c>
 800644a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644c:	421d      	tst	r5, r3
 800644e:	d0ef      	beq.n	8006430 <_strtod_l+0x8d8>
 8006450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006452:	4640      	mov	r0, r8
 8006454:	4649      	mov	r1, r9
 8006456:	9a05      	ldr	r2, [sp, #20]
 8006458:	b1c3      	cbz	r3, 800648c <_strtod_l+0x934>
 800645a:	f7ff fb5a 	bl	8005b12 <sulp>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006466:	f7f9 fe81 	bl	800016c <__adddf3>
 800646a:	4680      	mov	r8, r0
 800646c:	4689      	mov	r9, r1
 800646e:	e7df      	b.n	8006430 <_strtod_l+0x8d8>
 8006470:	4013      	ands	r3, r2
 8006472:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006476:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800647a:	f04f 38ff 	mov.w	r8, #4294967295
 800647e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006482:	e7d5      	b.n	8006430 <_strtod_l+0x8d8>
 8006484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006486:	ea13 0f08 	tst.w	r3, r8
 800648a:	e7e0      	b.n	800644e <_strtod_l+0x8f6>
 800648c:	f7ff fb41 	bl	8005b12 <sulp>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006498:	f7f9 fe66 	bl	8000168 <__aeabi_dsub>
 800649c:	2200      	movs	r2, #0
 800649e:	2300      	movs	r3, #0
 80064a0:	4680      	mov	r8, r0
 80064a2:	4689      	mov	r9, r1
 80064a4:	f7fa fa80 	bl	80009a8 <__aeabi_dcmpeq>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d0c1      	beq.n	8006430 <_strtod_l+0x8d8>
 80064ac:	e608      	b.n	80060c0 <_strtod_l+0x568>
 80064ae:	4658      	mov	r0, fp
 80064b0:	9904      	ldr	r1, [sp, #16]
 80064b2:	f001 f937 	bl	8007724 <__ratio>
 80064b6:	2200      	movs	r2, #0
 80064b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064bc:	4606      	mov	r6, r0
 80064be:	460f      	mov	r7, r1
 80064c0:	f7fa fa86 	bl	80009d0 <__aeabi_dcmple>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d070      	beq.n	80065aa <_strtod_l+0xa52>
 80064c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d042      	beq.n	8006554 <_strtod_l+0x9fc>
 80064ce:	2600      	movs	r6, #0
 80064d0:	4f62      	ldr	r7, [pc, #392]	; (800665c <_strtod_l+0xb04>)
 80064d2:	4d62      	ldr	r5, [pc, #392]	; (800665c <_strtod_l+0xb04>)
 80064d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064da:	0d1b      	lsrs	r3, r3, #20
 80064dc:	051b      	lsls	r3, r3, #20
 80064de:	930f      	str	r3, [sp, #60]	; 0x3c
 80064e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064e2:	4b5f      	ldr	r3, [pc, #380]	; (8006660 <_strtod_l+0xb08>)
 80064e4:	429a      	cmp	r2, r3
 80064e6:	f040 80c3 	bne.w	8006670 <_strtod_l+0xb18>
 80064ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ec:	4640      	mov	r0, r8
 80064ee:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80064f2:	4649      	mov	r1, r9
 80064f4:	f001 f840 	bl	8007578 <__ulp>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7f9 ffea 	bl	80004d8 <__aeabi_dmul>
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	f7f9 fe30 	bl	800016c <__adddf3>
 800650c:	460b      	mov	r3, r1
 800650e:	4951      	ldr	r1, [pc, #324]	; (8006654 <_strtod_l+0xafc>)
 8006510:	4a54      	ldr	r2, [pc, #336]	; (8006664 <_strtod_l+0xb0c>)
 8006512:	4019      	ands	r1, r3
 8006514:	4291      	cmp	r1, r2
 8006516:	4680      	mov	r8, r0
 8006518:	d95d      	bls.n	80065d6 <_strtod_l+0xa7e>
 800651a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800651c:	4b4e      	ldr	r3, [pc, #312]	; (8006658 <_strtod_l+0xb00>)
 800651e:	429a      	cmp	r2, r3
 8006520:	d103      	bne.n	800652a <_strtod_l+0x9d2>
 8006522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006524:	3301      	adds	r3, #1
 8006526:	f43f ad56 	beq.w	8005fd6 <_strtod_l+0x47e>
 800652a:	f04f 38ff 	mov.w	r8, #4294967295
 800652e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006658 <_strtod_l+0xb00>
 8006532:	4650      	mov	r0, sl
 8006534:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006536:	f000 fcef 	bl	8006f18 <_Bfree>
 800653a:	4650      	mov	r0, sl
 800653c:	9906      	ldr	r1, [sp, #24]
 800653e:	f000 fceb 	bl	8006f18 <_Bfree>
 8006542:	4650      	mov	r0, sl
 8006544:	9904      	ldr	r1, [sp, #16]
 8006546:	f000 fce7 	bl	8006f18 <_Bfree>
 800654a:	4659      	mov	r1, fp
 800654c:	4650      	mov	r0, sl
 800654e:	f000 fce3 	bl	8006f18 <_Bfree>
 8006552:	e627      	b.n	80061a4 <_strtod_l+0x64c>
 8006554:	f1b8 0f00 	cmp.w	r8, #0
 8006558:	d119      	bne.n	800658e <_strtod_l+0xa36>
 800655a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006560:	b9e3      	cbnz	r3, 800659c <_strtod_l+0xa44>
 8006562:	2200      	movs	r2, #0
 8006564:	4630      	mov	r0, r6
 8006566:	4639      	mov	r1, r7
 8006568:	4b3c      	ldr	r3, [pc, #240]	; (800665c <_strtod_l+0xb04>)
 800656a:	f7fa fa27 	bl	80009bc <__aeabi_dcmplt>
 800656e:	b9c8      	cbnz	r0, 80065a4 <_strtod_l+0xa4c>
 8006570:	2200      	movs	r2, #0
 8006572:	4630      	mov	r0, r6
 8006574:	4639      	mov	r1, r7
 8006576:	4b3c      	ldr	r3, [pc, #240]	; (8006668 <_strtod_l+0xb10>)
 8006578:	f7f9 ffae 	bl	80004d8 <__aeabi_dmul>
 800657c:	4604      	mov	r4, r0
 800657e:	460d      	mov	r5, r1
 8006580:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006584:	9416      	str	r4, [sp, #88]	; 0x58
 8006586:	9317      	str	r3, [sp, #92]	; 0x5c
 8006588:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800658c:	e7a2      	b.n	80064d4 <_strtod_l+0x97c>
 800658e:	f1b8 0f01 	cmp.w	r8, #1
 8006592:	d103      	bne.n	800659c <_strtod_l+0xa44>
 8006594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	f43f ad92 	beq.w	80060c0 <_strtod_l+0x568>
 800659c:	2600      	movs	r6, #0
 800659e:	2400      	movs	r4, #0
 80065a0:	4f32      	ldr	r7, [pc, #200]	; (800666c <_strtod_l+0xb14>)
 80065a2:	e796      	b.n	80064d2 <_strtod_l+0x97a>
 80065a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80065a6:	4d30      	ldr	r5, [pc, #192]	; (8006668 <_strtod_l+0xb10>)
 80065a8:	e7ea      	b.n	8006580 <_strtod_l+0xa28>
 80065aa:	4b2f      	ldr	r3, [pc, #188]	; (8006668 <_strtod_l+0xb10>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7f9 ff91 	bl	80004d8 <__aeabi_dmul>
 80065b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065b8:	4604      	mov	r4, r0
 80065ba:	460d      	mov	r5, r1
 80065bc:	b933      	cbnz	r3, 80065cc <_strtod_l+0xa74>
 80065be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065c2:	9010      	str	r0, [sp, #64]	; 0x40
 80065c4:	9311      	str	r3, [sp, #68]	; 0x44
 80065c6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80065ca:	e783      	b.n	80064d4 <_strtod_l+0x97c>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80065d4:	e7f7      	b.n	80065c6 <_strtod_l+0xa6e>
 80065d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80065da:	9b05      	ldr	r3, [sp, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1a8      	bne.n	8006532 <_strtod_l+0x9da>
 80065e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065e6:	0d1b      	lsrs	r3, r3, #20
 80065e8:	051b      	lsls	r3, r3, #20
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d1a1      	bne.n	8006532 <_strtod_l+0x9da>
 80065ee:	4620      	mov	r0, r4
 80065f0:	4629      	mov	r1, r5
 80065f2:	f7fa fa69 	bl	8000ac8 <__aeabi_d2lz>
 80065f6:	f7f9 ff41 	bl	800047c <__aeabi_l2d>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4620      	mov	r0, r4
 8006600:	4629      	mov	r1, r5
 8006602:	f7f9 fdb1 	bl	8000168 <__aeabi_dsub>
 8006606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800660c:	ea43 0308 	orr.w	r3, r3, r8
 8006610:	4313      	orrs	r3, r2
 8006612:	4604      	mov	r4, r0
 8006614:	460d      	mov	r5, r1
 8006616:	d066      	beq.n	80066e6 <_strtod_l+0xb8e>
 8006618:	a309      	add	r3, pc, #36	; (adr r3, 8006640 <_strtod_l+0xae8>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f7fa f9cd 	bl	80009bc <__aeabi_dcmplt>
 8006622:	2800      	cmp	r0, #0
 8006624:	f47f ace2 	bne.w	8005fec <_strtod_l+0x494>
 8006628:	a307      	add	r3, pc, #28	; (adr r3, 8006648 <_strtod_l+0xaf0>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	4620      	mov	r0, r4
 8006630:	4629      	mov	r1, r5
 8006632:	f7fa f9e1 	bl	80009f8 <__aeabi_dcmpgt>
 8006636:	2800      	cmp	r0, #0
 8006638:	f43f af7b 	beq.w	8006532 <_strtod_l+0x9da>
 800663c:	e4d6      	b.n	8005fec <_strtod_l+0x494>
 800663e:	bf00      	nop
 8006640:	94a03595 	.word	0x94a03595
 8006644:	3fdfffff 	.word	0x3fdfffff
 8006648:	35afe535 	.word	0x35afe535
 800664c:	3fe00000 	.word	0x3fe00000
 8006650:	000fffff 	.word	0x000fffff
 8006654:	7ff00000 	.word	0x7ff00000
 8006658:	7fefffff 	.word	0x7fefffff
 800665c:	3ff00000 	.word	0x3ff00000
 8006660:	7fe00000 	.word	0x7fe00000
 8006664:	7c9fffff 	.word	0x7c9fffff
 8006668:	3fe00000 	.word	0x3fe00000
 800666c:	bff00000 	.word	0xbff00000
 8006670:	9b05      	ldr	r3, [sp, #20]
 8006672:	b313      	cbz	r3, 80066ba <_strtod_l+0xb62>
 8006674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006676:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800667a:	d81e      	bhi.n	80066ba <_strtod_l+0xb62>
 800667c:	a326      	add	r3, pc, #152	; (adr r3, 8006718 <_strtod_l+0xbc0>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	4620      	mov	r0, r4
 8006684:	4629      	mov	r1, r5
 8006686:	f7fa f9a3 	bl	80009d0 <__aeabi_dcmple>
 800668a:	b190      	cbz	r0, 80066b2 <_strtod_l+0xb5a>
 800668c:	4629      	mov	r1, r5
 800668e:	4620      	mov	r0, r4
 8006690:	f7fa f9fa 	bl	8000a88 <__aeabi_d2uiz>
 8006694:	2801      	cmp	r0, #1
 8006696:	bf38      	it	cc
 8006698:	2001      	movcc	r0, #1
 800669a:	f7f9 fea3 	bl	80003e4 <__aeabi_ui2d>
 800669e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a0:	4604      	mov	r4, r0
 80066a2:	460d      	mov	r5, r1
 80066a4:	b9d3      	cbnz	r3, 80066dc <_strtod_l+0xb84>
 80066a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066aa:	9012      	str	r0, [sp, #72]	; 0x48
 80066ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80066ae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80066b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066b4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80066b8:	1a9f      	subs	r7, r3, r2
 80066ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066be:	f000 ff5b 	bl	8007578 <__ulp>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4630      	mov	r0, r6
 80066c8:	4639      	mov	r1, r7
 80066ca:	f7f9 ff05 	bl	80004d8 <__aeabi_dmul>
 80066ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066d2:	f7f9 fd4b 	bl	800016c <__adddf3>
 80066d6:	4680      	mov	r8, r0
 80066d8:	4689      	mov	r9, r1
 80066da:	e77e      	b.n	80065da <_strtod_l+0xa82>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80066e4:	e7e3      	b.n	80066ae <_strtod_l+0xb56>
 80066e6:	a30e      	add	r3, pc, #56	; (adr r3, 8006720 <_strtod_l+0xbc8>)
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f7fa f966 	bl	80009bc <__aeabi_dcmplt>
 80066f0:	e7a1      	b.n	8006636 <_strtod_l+0xade>
 80066f2:	2300      	movs	r3, #0
 80066f4:	930a      	str	r3, [sp, #40]	; 0x28
 80066f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	f7ff ba71 	b.w	8005be2 <_strtod_l+0x8a>
 8006700:	2a65      	cmp	r2, #101	; 0x65
 8006702:	f43f ab63 	beq.w	8005dcc <_strtod_l+0x274>
 8006706:	2a45      	cmp	r2, #69	; 0x45
 8006708:	f43f ab60 	beq.w	8005dcc <_strtod_l+0x274>
 800670c:	2301      	movs	r3, #1
 800670e:	f7ff bb95 	b.w	8005e3c <_strtod_l+0x2e4>
 8006712:	bf00      	nop
 8006714:	f3af 8000 	nop.w
 8006718:	ffc00000 	.word	0xffc00000
 800671c:	41dfffff 	.word	0x41dfffff
 8006720:	94a03595 	.word	0x94a03595
 8006724:	3fcfffff 	.word	0x3fcfffff

08006728 <strtod>:
 8006728:	460a      	mov	r2, r1
 800672a:	4601      	mov	r1, r0
 800672c:	4802      	ldr	r0, [pc, #8]	; (8006738 <strtod+0x10>)
 800672e:	4b03      	ldr	r3, [pc, #12]	; (800673c <strtod+0x14>)
 8006730:	6800      	ldr	r0, [r0, #0]
 8006732:	f7ff ba11 	b.w	8005b58 <_strtod_l>
 8006736:	bf00      	nop
 8006738:	20000020 	.word	0x20000020
 800673c:	20000088 	.word	0x20000088

08006740 <_write_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4604      	mov	r4, r0
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	2200      	movs	r2, #0
 800674a:	4d05      	ldr	r5, [pc, #20]	; (8006760 <_write_r+0x20>)
 800674c:	602a      	str	r2, [r5, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	f7fb f9bc 	bl	8001acc <_write>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_write_r+0x1e>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_write_r+0x1e>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	200013c0 	.word	0x200013c0

08006764 <_close_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	2300      	movs	r3, #0
 8006768:	4d05      	ldr	r5, [pc, #20]	; (8006780 <_close_r+0x1c>)
 800676a:	4604      	mov	r4, r0
 800676c:	4608      	mov	r0, r1
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	f7fb f9c8 	bl	8001b04 <_close>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_close_r+0x1a>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_close_r+0x1a>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	200013c0 	.word	0x200013c0

08006784 <rshift>:
 8006784:	6903      	ldr	r3, [r0, #16]
 8006786:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800678a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800678e:	f100 0414 	add.w	r4, r0, #20
 8006792:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006796:	dd46      	ble.n	8006826 <rshift+0xa2>
 8006798:	f011 011f 	ands.w	r1, r1, #31
 800679c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80067a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80067a4:	d10c      	bne.n	80067c0 <rshift+0x3c>
 80067a6:	4629      	mov	r1, r5
 80067a8:	f100 0710 	add.w	r7, r0, #16
 80067ac:	42b1      	cmp	r1, r6
 80067ae:	d335      	bcc.n	800681c <rshift+0x98>
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	1eea      	subs	r2, r5, #3
 80067b6:	4296      	cmp	r6, r2
 80067b8:	bf38      	it	cc
 80067ba:	2300      	movcc	r3, #0
 80067bc:	4423      	add	r3, r4
 80067be:	e015      	b.n	80067ec <rshift+0x68>
 80067c0:	46a1      	mov	r9, r4
 80067c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80067c6:	f1c1 0820 	rsb	r8, r1, #32
 80067ca:	40cf      	lsrs	r7, r1
 80067cc:	f105 0e04 	add.w	lr, r5, #4
 80067d0:	4576      	cmp	r6, lr
 80067d2:	46f4      	mov	ip, lr
 80067d4:	d816      	bhi.n	8006804 <rshift+0x80>
 80067d6:	1a9a      	subs	r2, r3, r2
 80067d8:	0092      	lsls	r2, r2, #2
 80067da:	3a04      	subs	r2, #4
 80067dc:	3501      	adds	r5, #1
 80067de:	42ae      	cmp	r6, r5
 80067e0:	bf38      	it	cc
 80067e2:	2200      	movcc	r2, #0
 80067e4:	18a3      	adds	r3, r4, r2
 80067e6:	50a7      	str	r7, [r4, r2]
 80067e8:	b107      	cbz	r7, 80067ec <rshift+0x68>
 80067ea:	3304      	adds	r3, #4
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	eba3 0204 	sub.w	r2, r3, r4
 80067f2:	bf08      	it	eq
 80067f4:	2300      	moveq	r3, #0
 80067f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80067fa:	6102      	str	r2, [r0, #16]
 80067fc:	bf08      	it	eq
 80067fe:	6143      	streq	r3, [r0, #20]
 8006800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006804:	f8dc c000 	ldr.w	ip, [ip]
 8006808:	fa0c fc08 	lsl.w	ip, ip, r8
 800680c:	ea4c 0707 	orr.w	r7, ip, r7
 8006810:	f849 7b04 	str.w	r7, [r9], #4
 8006814:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006818:	40cf      	lsrs	r7, r1
 800681a:	e7d9      	b.n	80067d0 <rshift+0x4c>
 800681c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006820:	f847 cf04 	str.w	ip, [r7, #4]!
 8006824:	e7c2      	b.n	80067ac <rshift+0x28>
 8006826:	4623      	mov	r3, r4
 8006828:	e7e0      	b.n	80067ec <rshift+0x68>

0800682a <__hexdig_fun>:
 800682a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800682e:	2b09      	cmp	r3, #9
 8006830:	d802      	bhi.n	8006838 <__hexdig_fun+0xe>
 8006832:	3820      	subs	r0, #32
 8006834:	b2c0      	uxtb	r0, r0
 8006836:	4770      	bx	lr
 8006838:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800683c:	2b05      	cmp	r3, #5
 800683e:	d801      	bhi.n	8006844 <__hexdig_fun+0x1a>
 8006840:	3847      	subs	r0, #71	; 0x47
 8006842:	e7f7      	b.n	8006834 <__hexdig_fun+0xa>
 8006844:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006848:	2b05      	cmp	r3, #5
 800684a:	d801      	bhi.n	8006850 <__hexdig_fun+0x26>
 800684c:	3827      	subs	r0, #39	; 0x27
 800684e:	e7f1      	b.n	8006834 <__hexdig_fun+0xa>
 8006850:	2000      	movs	r0, #0
 8006852:	4770      	bx	lr

08006854 <__gethex>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	b08b      	sub	sp, #44	; 0x2c
 800685a:	9305      	str	r3, [sp, #20]
 800685c:	4bb2      	ldr	r3, [pc, #712]	; (8006b28 <__gethex+0x2d4>)
 800685e:	9002      	str	r0, [sp, #8]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	468b      	mov	fp, r1
 8006864:	4618      	mov	r0, r3
 8006866:	4690      	mov	r8, r2
 8006868:	9303      	str	r3, [sp, #12]
 800686a:	f7f9 fc71 	bl	8000150 <strlen>
 800686e:	4682      	mov	sl, r0
 8006870:	9b03      	ldr	r3, [sp, #12]
 8006872:	f8db 2000 	ldr.w	r2, [fp]
 8006876:	4403      	add	r3, r0
 8006878:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800687c:	9306      	str	r3, [sp, #24]
 800687e:	1c93      	adds	r3, r2, #2
 8006880:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006884:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006888:	32fe      	adds	r2, #254	; 0xfe
 800688a:	18d1      	adds	r1, r2, r3
 800688c:	461f      	mov	r7, r3
 800688e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006892:	9101      	str	r1, [sp, #4]
 8006894:	2830      	cmp	r0, #48	; 0x30
 8006896:	d0f8      	beq.n	800688a <__gethex+0x36>
 8006898:	f7ff ffc7 	bl	800682a <__hexdig_fun>
 800689c:	4604      	mov	r4, r0
 800689e:	2800      	cmp	r0, #0
 80068a0:	d13a      	bne.n	8006918 <__gethex+0xc4>
 80068a2:	4652      	mov	r2, sl
 80068a4:	4638      	mov	r0, r7
 80068a6:	9903      	ldr	r1, [sp, #12]
 80068a8:	f001 fece 	bl	8008648 <strncmp>
 80068ac:	4605      	mov	r5, r0
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d166      	bne.n	8006980 <__gethex+0x12c>
 80068b2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80068b6:	eb07 060a 	add.w	r6, r7, sl
 80068ba:	f7ff ffb6 	bl	800682a <__hexdig_fun>
 80068be:	2800      	cmp	r0, #0
 80068c0:	d060      	beq.n	8006984 <__gethex+0x130>
 80068c2:	4633      	mov	r3, r6
 80068c4:	7818      	ldrb	r0, [r3, #0]
 80068c6:	461f      	mov	r7, r3
 80068c8:	2830      	cmp	r0, #48	; 0x30
 80068ca:	f103 0301 	add.w	r3, r3, #1
 80068ce:	d0f9      	beq.n	80068c4 <__gethex+0x70>
 80068d0:	f7ff ffab 	bl	800682a <__hexdig_fun>
 80068d4:	2301      	movs	r3, #1
 80068d6:	fab0 f480 	clz	r4, r0
 80068da:	4635      	mov	r5, r6
 80068dc:	0964      	lsrs	r4, r4, #5
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	463a      	mov	r2, r7
 80068e2:	4616      	mov	r6, r2
 80068e4:	7830      	ldrb	r0, [r6, #0]
 80068e6:	3201      	adds	r2, #1
 80068e8:	f7ff ff9f 	bl	800682a <__hexdig_fun>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d1f8      	bne.n	80068e2 <__gethex+0x8e>
 80068f0:	4652      	mov	r2, sl
 80068f2:	4630      	mov	r0, r6
 80068f4:	9903      	ldr	r1, [sp, #12]
 80068f6:	f001 fea7 	bl	8008648 <strncmp>
 80068fa:	b980      	cbnz	r0, 800691e <__gethex+0xca>
 80068fc:	b94d      	cbnz	r5, 8006912 <__gethex+0xbe>
 80068fe:	eb06 050a 	add.w	r5, r6, sl
 8006902:	462a      	mov	r2, r5
 8006904:	4616      	mov	r6, r2
 8006906:	7830      	ldrb	r0, [r6, #0]
 8006908:	3201      	adds	r2, #1
 800690a:	f7ff ff8e 	bl	800682a <__hexdig_fun>
 800690e:	2800      	cmp	r0, #0
 8006910:	d1f8      	bne.n	8006904 <__gethex+0xb0>
 8006912:	1bad      	subs	r5, r5, r6
 8006914:	00ad      	lsls	r5, r5, #2
 8006916:	e004      	b.n	8006922 <__gethex+0xce>
 8006918:	2400      	movs	r4, #0
 800691a:	4625      	mov	r5, r4
 800691c:	e7e0      	b.n	80068e0 <__gethex+0x8c>
 800691e:	2d00      	cmp	r5, #0
 8006920:	d1f7      	bne.n	8006912 <__gethex+0xbe>
 8006922:	7833      	ldrb	r3, [r6, #0]
 8006924:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006928:	2b50      	cmp	r3, #80	; 0x50
 800692a:	d139      	bne.n	80069a0 <__gethex+0x14c>
 800692c:	7873      	ldrb	r3, [r6, #1]
 800692e:	2b2b      	cmp	r3, #43	; 0x2b
 8006930:	d02a      	beq.n	8006988 <__gethex+0x134>
 8006932:	2b2d      	cmp	r3, #45	; 0x2d
 8006934:	d02c      	beq.n	8006990 <__gethex+0x13c>
 8006936:	f04f 0900 	mov.w	r9, #0
 800693a:	1c71      	adds	r1, r6, #1
 800693c:	7808      	ldrb	r0, [r1, #0]
 800693e:	f7ff ff74 	bl	800682a <__hexdig_fun>
 8006942:	1e43      	subs	r3, r0, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b18      	cmp	r3, #24
 8006948:	d82a      	bhi.n	80069a0 <__gethex+0x14c>
 800694a:	f1a0 0210 	sub.w	r2, r0, #16
 800694e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006952:	f7ff ff6a 	bl	800682a <__hexdig_fun>
 8006956:	1e43      	subs	r3, r0, #1
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b18      	cmp	r3, #24
 800695c:	d91b      	bls.n	8006996 <__gethex+0x142>
 800695e:	f1b9 0f00 	cmp.w	r9, #0
 8006962:	d000      	beq.n	8006966 <__gethex+0x112>
 8006964:	4252      	negs	r2, r2
 8006966:	4415      	add	r5, r2
 8006968:	f8cb 1000 	str.w	r1, [fp]
 800696c:	b1d4      	cbz	r4, 80069a4 <__gethex+0x150>
 800696e:	9b01      	ldr	r3, [sp, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	bf14      	ite	ne
 8006974:	2700      	movne	r7, #0
 8006976:	2706      	moveq	r7, #6
 8006978:	4638      	mov	r0, r7
 800697a:	b00b      	add	sp, #44	; 0x2c
 800697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006980:	463e      	mov	r6, r7
 8006982:	4625      	mov	r5, r4
 8006984:	2401      	movs	r4, #1
 8006986:	e7cc      	b.n	8006922 <__gethex+0xce>
 8006988:	f04f 0900 	mov.w	r9, #0
 800698c:	1cb1      	adds	r1, r6, #2
 800698e:	e7d5      	b.n	800693c <__gethex+0xe8>
 8006990:	f04f 0901 	mov.w	r9, #1
 8006994:	e7fa      	b.n	800698c <__gethex+0x138>
 8006996:	230a      	movs	r3, #10
 8006998:	fb03 0202 	mla	r2, r3, r2, r0
 800699c:	3a10      	subs	r2, #16
 800699e:	e7d6      	b.n	800694e <__gethex+0xfa>
 80069a0:	4631      	mov	r1, r6
 80069a2:	e7e1      	b.n	8006968 <__gethex+0x114>
 80069a4:	4621      	mov	r1, r4
 80069a6:	1bf3      	subs	r3, r6, r7
 80069a8:	3b01      	subs	r3, #1
 80069aa:	2b07      	cmp	r3, #7
 80069ac:	dc0a      	bgt.n	80069c4 <__gethex+0x170>
 80069ae:	9802      	ldr	r0, [sp, #8]
 80069b0:	f000 fa72 	bl	8006e98 <_Balloc>
 80069b4:	4604      	mov	r4, r0
 80069b6:	b940      	cbnz	r0, 80069ca <__gethex+0x176>
 80069b8:	4602      	mov	r2, r0
 80069ba:	21de      	movs	r1, #222	; 0xde
 80069bc:	4b5b      	ldr	r3, [pc, #364]	; (8006b2c <__gethex+0x2d8>)
 80069be:	485c      	ldr	r0, [pc, #368]	; (8006b30 <__gethex+0x2dc>)
 80069c0:	f001 ff8e 	bl	80088e0 <__assert_func>
 80069c4:	3101      	adds	r1, #1
 80069c6:	105b      	asrs	r3, r3, #1
 80069c8:	e7ef      	b.n	80069aa <__gethex+0x156>
 80069ca:	f04f 0b00 	mov.w	fp, #0
 80069ce:	f100 0914 	add.w	r9, r0, #20
 80069d2:	f1ca 0301 	rsb	r3, sl, #1
 80069d6:	f8cd 9010 	str.w	r9, [sp, #16]
 80069da:	f8cd b004 	str.w	fp, [sp, #4]
 80069de:	9308      	str	r3, [sp, #32]
 80069e0:	42b7      	cmp	r7, r6
 80069e2:	d33f      	bcc.n	8006a64 <__gethex+0x210>
 80069e4:	9f04      	ldr	r7, [sp, #16]
 80069e6:	9b01      	ldr	r3, [sp, #4]
 80069e8:	f847 3b04 	str.w	r3, [r7], #4
 80069ec:	eba7 0709 	sub.w	r7, r7, r9
 80069f0:	10bf      	asrs	r7, r7, #2
 80069f2:	6127      	str	r7, [r4, #16]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fb41 	bl	800707c <__hi0bits>
 80069fa:	017f      	lsls	r7, r7, #5
 80069fc:	f8d8 6000 	ldr.w	r6, [r8]
 8006a00:	1a3f      	subs	r7, r7, r0
 8006a02:	42b7      	cmp	r7, r6
 8006a04:	dd62      	ble.n	8006acc <__gethex+0x278>
 8006a06:	1bbf      	subs	r7, r7, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 fedb 	bl	80077c6 <__any_on>
 8006a10:	4682      	mov	sl, r0
 8006a12:	b1a8      	cbz	r0, 8006a40 <__gethex+0x1ec>
 8006a14:	f04f 0a01 	mov.w	sl, #1
 8006a18:	1e7b      	subs	r3, r7, #1
 8006a1a:	1159      	asrs	r1, r3, #5
 8006a1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006a20:	f003 021f 	and.w	r2, r3, #31
 8006a24:	fa0a f202 	lsl.w	r2, sl, r2
 8006a28:	420a      	tst	r2, r1
 8006a2a:	d009      	beq.n	8006a40 <__gethex+0x1ec>
 8006a2c:	4553      	cmp	r3, sl
 8006a2e:	dd05      	ble.n	8006a3c <__gethex+0x1e8>
 8006a30:	4620      	mov	r0, r4
 8006a32:	1eb9      	subs	r1, r7, #2
 8006a34:	f000 fec7 	bl	80077c6 <__any_on>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d144      	bne.n	8006ac6 <__gethex+0x272>
 8006a3c:	f04f 0a02 	mov.w	sl, #2
 8006a40:	4639      	mov	r1, r7
 8006a42:	4620      	mov	r0, r4
 8006a44:	f7ff fe9e 	bl	8006784 <rshift>
 8006a48:	443d      	add	r5, r7
 8006a4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a4e:	42ab      	cmp	r3, r5
 8006a50:	da4a      	bge.n	8006ae8 <__gethex+0x294>
 8006a52:	4621      	mov	r1, r4
 8006a54:	9802      	ldr	r0, [sp, #8]
 8006a56:	f000 fa5f 	bl	8006f18 <_Bfree>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a5e:	27a3      	movs	r7, #163	; 0xa3
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e789      	b.n	8006978 <__gethex+0x124>
 8006a64:	1e73      	subs	r3, r6, #1
 8006a66:	9a06      	ldr	r2, [sp, #24]
 8006a68:	9307      	str	r3, [sp, #28]
 8006a6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d019      	beq.n	8006aa6 <__gethex+0x252>
 8006a72:	f1bb 0f20 	cmp.w	fp, #32
 8006a76:	d107      	bne.n	8006a88 <__gethex+0x234>
 8006a78:	9b04      	ldr	r3, [sp, #16]
 8006a7a:	9a01      	ldr	r2, [sp, #4]
 8006a7c:	f843 2b04 	str.w	r2, [r3], #4
 8006a80:	9304      	str	r3, [sp, #16]
 8006a82:	2300      	movs	r3, #0
 8006a84:	469b      	mov	fp, r3
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006a8c:	f7ff fecd 	bl	800682a <__hexdig_fun>
 8006a90:	9b01      	ldr	r3, [sp, #4]
 8006a92:	f000 000f 	and.w	r0, r0, #15
 8006a96:	fa00 f00b 	lsl.w	r0, r0, fp
 8006a9a:	4303      	orrs	r3, r0
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	f10b 0b04 	add.w	fp, fp, #4
 8006aa2:	9b07      	ldr	r3, [sp, #28]
 8006aa4:	e00d      	b.n	8006ac2 <__gethex+0x26e>
 8006aa6:	9a08      	ldr	r2, [sp, #32]
 8006aa8:	1e73      	subs	r3, r6, #1
 8006aaa:	4413      	add	r3, r2
 8006aac:	42bb      	cmp	r3, r7
 8006aae:	d3e0      	bcc.n	8006a72 <__gethex+0x21e>
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	4652      	mov	r2, sl
 8006ab4:	9903      	ldr	r1, [sp, #12]
 8006ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab8:	f001 fdc6 	bl	8008648 <strncmp>
 8006abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d1d7      	bne.n	8006a72 <__gethex+0x21e>
 8006ac2:	461e      	mov	r6, r3
 8006ac4:	e78c      	b.n	80069e0 <__gethex+0x18c>
 8006ac6:	f04f 0a03 	mov.w	sl, #3
 8006aca:	e7b9      	b.n	8006a40 <__gethex+0x1ec>
 8006acc:	da09      	bge.n	8006ae2 <__gethex+0x28e>
 8006ace:	1bf7      	subs	r7, r6, r7
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	463a      	mov	r2, r7
 8006ad4:	9802      	ldr	r0, [sp, #8]
 8006ad6:	f000 fc37 	bl	8007348 <__lshift>
 8006ada:	4604      	mov	r4, r0
 8006adc:	1bed      	subs	r5, r5, r7
 8006ade:	f100 0914 	add.w	r9, r0, #20
 8006ae2:	f04f 0a00 	mov.w	sl, #0
 8006ae6:	e7b0      	b.n	8006a4a <__gethex+0x1f6>
 8006ae8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006aec:	42a8      	cmp	r0, r5
 8006aee:	dd72      	ble.n	8006bd6 <__gethex+0x382>
 8006af0:	1b45      	subs	r5, r0, r5
 8006af2:	42ae      	cmp	r6, r5
 8006af4:	dc35      	bgt.n	8006b62 <__gethex+0x30e>
 8006af6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d029      	beq.n	8006b52 <__gethex+0x2fe>
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d02b      	beq.n	8006b5a <__gethex+0x306>
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d11c      	bne.n	8006b40 <__gethex+0x2ec>
 8006b06:	42ae      	cmp	r6, r5
 8006b08:	d11a      	bne.n	8006b40 <__gethex+0x2ec>
 8006b0a:	2e01      	cmp	r6, #1
 8006b0c:	d112      	bne.n	8006b34 <__gethex+0x2e0>
 8006b0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006b12:	9a05      	ldr	r2, [sp, #20]
 8006b14:	2762      	movs	r7, #98	; 0x62
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	2301      	movs	r3, #1
 8006b1a:	6123      	str	r3, [r4, #16]
 8006b1c:	f8c9 3000 	str.w	r3, [r9]
 8006b20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b22:	601c      	str	r4, [r3, #0]
 8006b24:	e728      	b.n	8006978 <__gethex+0x124>
 8006b26:	bf00      	nop
 8006b28:	0800a418 	.word	0x0800a418
 8006b2c:	0800a3a0 	.word	0x0800a3a0
 8006b30:	0800a3b1 	.word	0x0800a3b1
 8006b34:	4620      	mov	r0, r4
 8006b36:	1e71      	subs	r1, r6, #1
 8006b38:	f000 fe45 	bl	80077c6 <__any_on>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d1e6      	bne.n	8006b0e <__gethex+0x2ba>
 8006b40:	4621      	mov	r1, r4
 8006b42:	9802      	ldr	r0, [sp, #8]
 8006b44:	f000 f9e8 	bl	8006f18 <_Bfree>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b4c:	2750      	movs	r7, #80	; 0x50
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	e712      	b.n	8006978 <__gethex+0x124>
 8006b52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1f3      	bne.n	8006b40 <__gethex+0x2ec>
 8006b58:	e7d9      	b.n	8006b0e <__gethex+0x2ba>
 8006b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1d6      	bne.n	8006b0e <__gethex+0x2ba>
 8006b60:	e7ee      	b.n	8006b40 <__gethex+0x2ec>
 8006b62:	1e6f      	subs	r7, r5, #1
 8006b64:	f1ba 0f00 	cmp.w	sl, #0
 8006b68:	d132      	bne.n	8006bd0 <__gethex+0x37c>
 8006b6a:	b127      	cbz	r7, 8006b76 <__gethex+0x322>
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fe29 	bl	80077c6 <__any_on>
 8006b74:	4682      	mov	sl, r0
 8006b76:	2101      	movs	r1, #1
 8006b78:	117b      	asrs	r3, r7, #5
 8006b7a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006b7e:	f007 071f 	and.w	r7, r7, #31
 8006b82:	fa01 f707 	lsl.w	r7, r1, r7
 8006b86:	421f      	tst	r7, r3
 8006b88:	f04f 0702 	mov.w	r7, #2
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4620      	mov	r0, r4
 8006b90:	bf18      	it	ne
 8006b92:	f04a 0a02 	orrne.w	sl, sl, #2
 8006b96:	1b76      	subs	r6, r6, r5
 8006b98:	f7ff fdf4 	bl	8006784 <rshift>
 8006b9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ba0:	f1ba 0f00 	cmp.w	sl, #0
 8006ba4:	d048      	beq.n	8006c38 <__gethex+0x3e4>
 8006ba6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d015      	beq.n	8006bda <__gethex+0x386>
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d017      	beq.n	8006be2 <__gethex+0x38e>
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d109      	bne.n	8006bca <__gethex+0x376>
 8006bb6:	f01a 0f02 	tst.w	sl, #2
 8006bba:	d006      	beq.n	8006bca <__gethex+0x376>
 8006bbc:	f8d9 0000 	ldr.w	r0, [r9]
 8006bc0:	ea4a 0a00 	orr.w	sl, sl, r0
 8006bc4:	f01a 0f01 	tst.w	sl, #1
 8006bc8:	d10e      	bne.n	8006be8 <__gethex+0x394>
 8006bca:	f047 0710 	orr.w	r7, r7, #16
 8006bce:	e033      	b.n	8006c38 <__gethex+0x3e4>
 8006bd0:	f04f 0a01 	mov.w	sl, #1
 8006bd4:	e7cf      	b.n	8006b76 <__gethex+0x322>
 8006bd6:	2701      	movs	r7, #1
 8006bd8:	e7e2      	b.n	8006ba0 <__gethex+0x34c>
 8006bda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bdc:	f1c3 0301 	rsb	r3, r3, #1
 8006be0:	9315      	str	r3, [sp, #84]	; 0x54
 8006be2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0f0      	beq.n	8006bca <__gethex+0x376>
 8006be8:	f04f 0c00 	mov.w	ip, #0
 8006bec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006bf0:	f104 0314 	add.w	r3, r4, #20
 8006bf4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006bf8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c02:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006c06:	d01c      	beq.n	8006c42 <__gethex+0x3ee>
 8006c08:	3201      	adds	r2, #1
 8006c0a:	6002      	str	r2, [r0, #0]
 8006c0c:	2f02      	cmp	r7, #2
 8006c0e:	f104 0314 	add.w	r3, r4, #20
 8006c12:	d13d      	bne.n	8006c90 <__gethex+0x43c>
 8006c14:	f8d8 2000 	ldr.w	r2, [r8]
 8006c18:	3a01      	subs	r2, #1
 8006c1a:	42b2      	cmp	r2, r6
 8006c1c:	d10a      	bne.n	8006c34 <__gethex+0x3e0>
 8006c1e:	2201      	movs	r2, #1
 8006c20:	1171      	asrs	r1, r6, #5
 8006c22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c26:	f006 061f 	and.w	r6, r6, #31
 8006c2a:	fa02 f606 	lsl.w	r6, r2, r6
 8006c2e:	421e      	tst	r6, r3
 8006c30:	bf18      	it	ne
 8006c32:	4617      	movne	r7, r2
 8006c34:	f047 0720 	orr.w	r7, r7, #32
 8006c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c3a:	601c      	str	r4, [r3, #0]
 8006c3c:	9b05      	ldr	r3, [sp, #20]
 8006c3e:	601d      	str	r5, [r3, #0]
 8006c40:	e69a      	b.n	8006978 <__gethex+0x124>
 8006c42:	4299      	cmp	r1, r3
 8006c44:	f843 cc04 	str.w	ip, [r3, #-4]
 8006c48:	d8d8      	bhi.n	8006bfc <__gethex+0x3a8>
 8006c4a:	68a3      	ldr	r3, [r4, #8]
 8006c4c:	459b      	cmp	fp, r3
 8006c4e:	db17      	blt.n	8006c80 <__gethex+0x42c>
 8006c50:	6861      	ldr	r1, [r4, #4]
 8006c52:	9802      	ldr	r0, [sp, #8]
 8006c54:	3101      	adds	r1, #1
 8006c56:	f000 f91f 	bl	8006e98 <_Balloc>
 8006c5a:	4681      	mov	r9, r0
 8006c5c:	b918      	cbnz	r0, 8006c66 <__gethex+0x412>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	2184      	movs	r1, #132	; 0x84
 8006c62:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <__gethex+0x474>)
 8006c64:	e6ab      	b.n	80069be <__gethex+0x16a>
 8006c66:	6922      	ldr	r2, [r4, #16]
 8006c68:	f104 010c 	add.w	r1, r4, #12
 8006c6c:	3202      	adds	r2, #2
 8006c6e:	0092      	lsls	r2, r2, #2
 8006c70:	300c      	adds	r0, #12
 8006c72:	f7fe fe93 	bl	800599c <memcpy>
 8006c76:	4621      	mov	r1, r4
 8006c78:	9802      	ldr	r0, [sp, #8]
 8006c7a:	f000 f94d 	bl	8006f18 <_Bfree>
 8006c7e:	464c      	mov	r4, r9
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	6122      	str	r2, [r4, #16]
 8006c86:	2201      	movs	r2, #1
 8006c88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c8c:	615a      	str	r2, [r3, #20]
 8006c8e:	e7bd      	b.n	8006c0c <__gethex+0x3b8>
 8006c90:	6922      	ldr	r2, [r4, #16]
 8006c92:	455a      	cmp	r2, fp
 8006c94:	dd0b      	ble.n	8006cae <__gethex+0x45a>
 8006c96:	2101      	movs	r1, #1
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7ff fd73 	bl	8006784 <rshift>
 8006c9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ca2:	3501      	adds	r5, #1
 8006ca4:	42ab      	cmp	r3, r5
 8006ca6:	f6ff aed4 	blt.w	8006a52 <__gethex+0x1fe>
 8006caa:	2701      	movs	r7, #1
 8006cac:	e7c2      	b.n	8006c34 <__gethex+0x3e0>
 8006cae:	f016 061f 	ands.w	r6, r6, #31
 8006cb2:	d0fa      	beq.n	8006caa <__gethex+0x456>
 8006cb4:	4453      	add	r3, sl
 8006cb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006cba:	f000 f9df 	bl	800707c <__hi0bits>
 8006cbe:	f1c6 0620 	rsb	r6, r6, #32
 8006cc2:	42b0      	cmp	r0, r6
 8006cc4:	dbe7      	blt.n	8006c96 <__gethex+0x442>
 8006cc6:	e7f0      	b.n	8006caa <__gethex+0x456>
 8006cc8:	0800a3a0 	.word	0x0800a3a0

08006ccc <L_shift>:
 8006ccc:	f1c2 0208 	rsb	r2, r2, #8
 8006cd0:	0092      	lsls	r2, r2, #2
 8006cd2:	b570      	push	{r4, r5, r6, lr}
 8006cd4:	f1c2 0620 	rsb	r6, r2, #32
 8006cd8:	6843      	ldr	r3, [r0, #4]
 8006cda:	6804      	ldr	r4, [r0, #0]
 8006cdc:	fa03 f506 	lsl.w	r5, r3, r6
 8006ce0:	432c      	orrs	r4, r5
 8006ce2:	40d3      	lsrs	r3, r2
 8006ce4:	6004      	str	r4, [r0, #0]
 8006ce6:	f840 3f04 	str.w	r3, [r0, #4]!
 8006cea:	4288      	cmp	r0, r1
 8006cec:	d3f4      	bcc.n	8006cd8 <L_shift+0xc>
 8006cee:	bd70      	pop	{r4, r5, r6, pc}

08006cf0 <__match>:
 8006cf0:	b530      	push	{r4, r5, lr}
 8006cf2:	6803      	ldr	r3, [r0, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cfa:	b914      	cbnz	r4, 8006d02 <__match+0x12>
 8006cfc:	6003      	str	r3, [r0, #0]
 8006cfe:	2001      	movs	r0, #1
 8006d00:	bd30      	pop	{r4, r5, pc}
 8006d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006d0a:	2d19      	cmp	r5, #25
 8006d0c:	bf98      	it	ls
 8006d0e:	3220      	addls	r2, #32
 8006d10:	42a2      	cmp	r2, r4
 8006d12:	d0f0      	beq.n	8006cf6 <__match+0x6>
 8006d14:	2000      	movs	r0, #0
 8006d16:	e7f3      	b.n	8006d00 <__match+0x10>

08006d18 <__hexnan>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	2500      	movs	r5, #0
 8006d1e:	680b      	ldr	r3, [r1, #0]
 8006d20:	4682      	mov	sl, r0
 8006d22:	115e      	asrs	r6, r3, #5
 8006d24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006d28:	f013 031f 	ands.w	r3, r3, #31
 8006d2c:	bf18      	it	ne
 8006d2e:	3604      	addne	r6, #4
 8006d30:	1f37      	subs	r7, r6, #4
 8006d32:	46b9      	mov	r9, r7
 8006d34:	463c      	mov	r4, r7
 8006d36:	46ab      	mov	fp, r5
 8006d38:	b087      	sub	sp, #28
 8006d3a:	4690      	mov	r8, r2
 8006d3c:	6802      	ldr	r2, [r0, #0]
 8006d3e:	9301      	str	r3, [sp, #4]
 8006d40:	f846 5c04 	str.w	r5, [r6, #-4]
 8006d44:	9502      	str	r5, [sp, #8]
 8006d46:	7851      	ldrb	r1, [r2, #1]
 8006d48:	1c53      	adds	r3, r2, #1
 8006d4a:	9303      	str	r3, [sp, #12]
 8006d4c:	b341      	cbz	r1, 8006da0 <__hexnan+0x88>
 8006d4e:	4608      	mov	r0, r1
 8006d50:	9205      	str	r2, [sp, #20]
 8006d52:	9104      	str	r1, [sp, #16]
 8006d54:	f7ff fd69 	bl	800682a <__hexdig_fun>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d14f      	bne.n	8006dfc <__hexnan+0xe4>
 8006d5c:	9904      	ldr	r1, [sp, #16]
 8006d5e:	9a05      	ldr	r2, [sp, #20]
 8006d60:	2920      	cmp	r1, #32
 8006d62:	d818      	bhi.n	8006d96 <__hexnan+0x7e>
 8006d64:	9b02      	ldr	r3, [sp, #8]
 8006d66:	459b      	cmp	fp, r3
 8006d68:	dd13      	ble.n	8006d92 <__hexnan+0x7a>
 8006d6a:	454c      	cmp	r4, r9
 8006d6c:	d206      	bcs.n	8006d7c <__hexnan+0x64>
 8006d6e:	2d07      	cmp	r5, #7
 8006d70:	dc04      	bgt.n	8006d7c <__hexnan+0x64>
 8006d72:	462a      	mov	r2, r5
 8006d74:	4649      	mov	r1, r9
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7ff ffa8 	bl	8006ccc <L_shift>
 8006d7c:	4544      	cmp	r4, r8
 8006d7e:	d950      	bls.n	8006e22 <__hexnan+0x10a>
 8006d80:	2300      	movs	r3, #0
 8006d82:	f1a4 0904 	sub.w	r9, r4, #4
 8006d86:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d8a:	461d      	mov	r5, r3
 8006d8c:	464c      	mov	r4, r9
 8006d8e:	f8cd b008 	str.w	fp, [sp, #8]
 8006d92:	9a03      	ldr	r2, [sp, #12]
 8006d94:	e7d7      	b.n	8006d46 <__hexnan+0x2e>
 8006d96:	2929      	cmp	r1, #41	; 0x29
 8006d98:	d156      	bne.n	8006e48 <__hexnan+0x130>
 8006d9a:	3202      	adds	r2, #2
 8006d9c:	f8ca 2000 	str.w	r2, [sl]
 8006da0:	f1bb 0f00 	cmp.w	fp, #0
 8006da4:	d050      	beq.n	8006e48 <__hexnan+0x130>
 8006da6:	454c      	cmp	r4, r9
 8006da8:	d206      	bcs.n	8006db8 <__hexnan+0xa0>
 8006daa:	2d07      	cmp	r5, #7
 8006dac:	dc04      	bgt.n	8006db8 <__hexnan+0xa0>
 8006dae:	462a      	mov	r2, r5
 8006db0:	4649      	mov	r1, r9
 8006db2:	4620      	mov	r0, r4
 8006db4:	f7ff ff8a 	bl	8006ccc <L_shift>
 8006db8:	4544      	cmp	r4, r8
 8006dba:	d934      	bls.n	8006e26 <__hexnan+0x10e>
 8006dbc:	4623      	mov	r3, r4
 8006dbe:	f1a8 0204 	sub.w	r2, r8, #4
 8006dc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8006dc6:	429f      	cmp	r7, r3
 8006dc8:	f842 1f04 	str.w	r1, [r2, #4]!
 8006dcc:	d2f9      	bcs.n	8006dc2 <__hexnan+0xaa>
 8006dce:	1b3b      	subs	r3, r7, r4
 8006dd0:	f023 0303 	bic.w	r3, r3, #3
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	3401      	adds	r4, #1
 8006dd8:	3e03      	subs	r6, #3
 8006dda:	42b4      	cmp	r4, r6
 8006ddc:	bf88      	it	hi
 8006dde:	2304      	movhi	r3, #4
 8006de0:	2200      	movs	r2, #0
 8006de2:	4443      	add	r3, r8
 8006de4:	f843 2b04 	str.w	r2, [r3], #4
 8006de8:	429f      	cmp	r7, r3
 8006dea:	d2fb      	bcs.n	8006de4 <__hexnan+0xcc>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	b91b      	cbnz	r3, 8006df8 <__hexnan+0xe0>
 8006df0:	4547      	cmp	r7, r8
 8006df2:	d127      	bne.n	8006e44 <__hexnan+0x12c>
 8006df4:	2301      	movs	r3, #1
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	2005      	movs	r0, #5
 8006dfa:	e026      	b.n	8006e4a <__hexnan+0x132>
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	2d08      	cmp	r5, #8
 8006e00:	f10b 0b01 	add.w	fp, fp, #1
 8006e04:	dd06      	ble.n	8006e14 <__hexnan+0xfc>
 8006e06:	4544      	cmp	r4, r8
 8006e08:	d9c3      	bls.n	8006d92 <__hexnan+0x7a>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2501      	movs	r5, #1
 8006e0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e12:	3c04      	subs	r4, #4
 8006e14:	6822      	ldr	r2, [r4, #0]
 8006e16:	f000 000f 	and.w	r0, r0, #15
 8006e1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006e1e:	6022      	str	r2, [r4, #0]
 8006e20:	e7b7      	b.n	8006d92 <__hexnan+0x7a>
 8006e22:	2508      	movs	r5, #8
 8006e24:	e7b5      	b.n	8006d92 <__hexnan+0x7a>
 8006e26:	9b01      	ldr	r3, [sp, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0df      	beq.n	8006dec <__hexnan+0xd4>
 8006e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e30:	f1c3 0320 	rsb	r3, r3, #32
 8006e34:	fa22 f303 	lsr.w	r3, r2, r3
 8006e38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006e3c:	401a      	ands	r2, r3
 8006e3e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006e42:	e7d3      	b.n	8006dec <__hexnan+0xd4>
 8006e44:	3f04      	subs	r7, #4
 8006e46:	e7d1      	b.n	8006dec <__hexnan+0xd4>
 8006e48:	2004      	movs	r0, #4
 8006e4a:	b007      	add	sp, #28
 8006e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e50 <_lseek_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4604      	mov	r4, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	4611      	mov	r1, r2
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4d05      	ldr	r5, [pc, #20]	; (8006e70 <_lseek_r+0x20>)
 8006e5c:	602a      	str	r2, [r5, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f7fa fe74 	bl	8001b4c <_lseek>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_lseek_r+0x1e>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_lseek_r+0x1e>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	200013c0 	.word	0x200013c0

08006e74 <__ascii_mbtowc>:
 8006e74:	b082      	sub	sp, #8
 8006e76:	b901      	cbnz	r1, 8006e7a <__ascii_mbtowc+0x6>
 8006e78:	a901      	add	r1, sp, #4
 8006e7a:	b142      	cbz	r2, 8006e8e <__ascii_mbtowc+0x1a>
 8006e7c:	b14b      	cbz	r3, 8006e92 <__ascii_mbtowc+0x1e>
 8006e7e:	7813      	ldrb	r3, [r2, #0]
 8006e80:	600b      	str	r3, [r1, #0]
 8006e82:	7812      	ldrb	r2, [r2, #0]
 8006e84:	1e10      	subs	r0, r2, #0
 8006e86:	bf18      	it	ne
 8006e88:	2001      	movne	r0, #1
 8006e8a:	b002      	add	sp, #8
 8006e8c:	4770      	bx	lr
 8006e8e:	4610      	mov	r0, r2
 8006e90:	e7fb      	b.n	8006e8a <__ascii_mbtowc+0x16>
 8006e92:	f06f 0001 	mvn.w	r0, #1
 8006e96:	e7f8      	b.n	8006e8a <__ascii_mbtowc+0x16>

08006e98 <_Balloc>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	460d      	mov	r5, r1
 8006ea0:	b976      	cbnz	r6, 8006ec0 <_Balloc+0x28>
 8006ea2:	2010      	movs	r0, #16
 8006ea4:	f001 ff02 	bl	8008cac <malloc>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	6260      	str	r0, [r4, #36]	; 0x24
 8006eac:	b920      	cbnz	r0, 8006eb8 <_Balloc+0x20>
 8006eae:	2166      	movs	r1, #102	; 0x66
 8006eb0:	4b17      	ldr	r3, [pc, #92]	; (8006f10 <_Balloc+0x78>)
 8006eb2:	4818      	ldr	r0, [pc, #96]	; (8006f14 <_Balloc+0x7c>)
 8006eb4:	f001 fd14 	bl	80088e0 <__assert_func>
 8006eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ebc:	6006      	str	r6, [r0, #0]
 8006ebe:	60c6      	str	r6, [r0, #12]
 8006ec0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ec2:	68f3      	ldr	r3, [r6, #12]
 8006ec4:	b183      	cbz	r3, 8006ee8 <_Balloc+0x50>
 8006ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ece:	b9b8      	cbnz	r0, 8006f00 <_Balloc+0x68>
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	fa01 f605 	lsl.w	r6, r1, r5
 8006ed6:	1d72      	adds	r2, r6, #5
 8006ed8:	4620      	mov	r0, r4
 8006eda:	0092      	lsls	r2, r2, #2
 8006edc:	f000 fc94 	bl	8007808 <_calloc_r>
 8006ee0:	b160      	cbz	r0, 8006efc <_Balloc+0x64>
 8006ee2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ee6:	e00e      	b.n	8006f06 <_Balloc+0x6e>
 8006ee8:	2221      	movs	r2, #33	; 0x21
 8006eea:	2104      	movs	r1, #4
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 fc8b 	bl	8007808 <_calloc_r>
 8006ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ef4:	60f0      	str	r0, [r6, #12]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e4      	bne.n	8006ec6 <_Balloc+0x2e>
 8006efc:	2000      	movs	r0, #0
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	6802      	ldr	r2, [r0, #0]
 8006f02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f06:	2300      	movs	r3, #0
 8006f08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f0c:	e7f7      	b.n	8006efe <_Balloc+0x66>
 8006f0e:	bf00      	nop
 8006f10:	0800a42c 	.word	0x0800a42c
 8006f14:	0800a443 	.word	0x0800a443

08006f18 <_Bfree>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	b976      	cbnz	r6, 8006f40 <_Bfree+0x28>
 8006f22:	2010      	movs	r0, #16
 8006f24:	f001 fec2 	bl	8008cac <malloc>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6268      	str	r0, [r5, #36]	; 0x24
 8006f2c:	b920      	cbnz	r0, 8006f38 <_Bfree+0x20>
 8006f2e:	218a      	movs	r1, #138	; 0x8a
 8006f30:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <_Bfree+0x3c>)
 8006f32:	4809      	ldr	r0, [pc, #36]	; (8006f58 <_Bfree+0x40>)
 8006f34:	f001 fcd4 	bl	80088e0 <__assert_func>
 8006f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f3c:	6006      	str	r6, [r0, #0]
 8006f3e:	60c6      	str	r6, [r0, #12]
 8006f40:	b13c      	cbz	r4, 8006f52 <_Bfree+0x3a>
 8006f42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f44:	6862      	ldr	r2, [r4, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f4c:	6021      	str	r1, [r4, #0]
 8006f4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
 8006f54:	0800a42c 	.word	0x0800a42c
 8006f58:	0800a443 	.word	0x0800a443

08006f5c <__multadd>:
 8006f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f60:	4607      	mov	r7, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	461e      	mov	r6, r3
 8006f66:	2000      	movs	r0, #0
 8006f68:	690d      	ldr	r5, [r1, #16]
 8006f6a:	f101 0c14 	add.w	ip, r1, #20
 8006f6e:	f8dc 3000 	ldr.w	r3, [ip]
 8006f72:	3001      	adds	r0, #1
 8006f74:	b299      	uxth	r1, r3
 8006f76:	fb02 6101 	mla	r1, r2, r1, r6
 8006f7a:	0c1e      	lsrs	r6, r3, #16
 8006f7c:	0c0b      	lsrs	r3, r1, #16
 8006f7e:	fb02 3306 	mla	r3, r2, r6, r3
 8006f82:	b289      	uxth	r1, r1
 8006f84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f88:	4285      	cmp	r5, r0
 8006f8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f8e:	f84c 1b04 	str.w	r1, [ip], #4
 8006f92:	dcec      	bgt.n	8006f6e <__multadd+0x12>
 8006f94:	b30e      	cbz	r6, 8006fda <__multadd+0x7e>
 8006f96:	68a3      	ldr	r3, [r4, #8]
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	dc19      	bgt.n	8006fd0 <__multadd+0x74>
 8006f9c:	6861      	ldr	r1, [r4, #4]
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	3101      	adds	r1, #1
 8006fa2:	f7ff ff79 	bl	8006e98 <_Balloc>
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	b928      	cbnz	r0, 8006fb6 <__multadd+0x5a>
 8006faa:	4602      	mov	r2, r0
 8006fac:	21b5      	movs	r1, #181	; 0xb5
 8006fae:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <__multadd+0x84>)
 8006fb0:	480c      	ldr	r0, [pc, #48]	; (8006fe4 <__multadd+0x88>)
 8006fb2:	f001 fc95 	bl	80088e0 <__assert_func>
 8006fb6:	6922      	ldr	r2, [r4, #16]
 8006fb8:	f104 010c 	add.w	r1, r4, #12
 8006fbc:	3202      	adds	r2, #2
 8006fbe:	0092      	lsls	r2, r2, #2
 8006fc0:	300c      	adds	r0, #12
 8006fc2:	f7fe fceb 	bl	800599c <memcpy>
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f7ff ffa5 	bl	8006f18 <_Bfree>
 8006fce:	4644      	mov	r4, r8
 8006fd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fd4:	3501      	adds	r5, #1
 8006fd6:	615e      	str	r6, [r3, #20]
 8006fd8:	6125      	str	r5, [r4, #16]
 8006fda:	4620      	mov	r0, r4
 8006fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe0:	0800a3a0 	.word	0x0800a3a0
 8006fe4:	0800a443 	.word	0x0800a443

08006fe8 <__s2b>:
 8006fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fec:	4615      	mov	r5, r2
 8006fee:	2209      	movs	r2, #9
 8006ff0:	461f      	mov	r7, r3
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	2100      	movs	r1, #0
 8007000:	429a      	cmp	r2, r3
 8007002:	db09      	blt.n	8007018 <__s2b+0x30>
 8007004:	4630      	mov	r0, r6
 8007006:	f7ff ff47 	bl	8006e98 <_Balloc>
 800700a:	b940      	cbnz	r0, 800701e <__s2b+0x36>
 800700c:	4602      	mov	r2, r0
 800700e:	21ce      	movs	r1, #206	; 0xce
 8007010:	4b18      	ldr	r3, [pc, #96]	; (8007074 <__s2b+0x8c>)
 8007012:	4819      	ldr	r0, [pc, #100]	; (8007078 <__s2b+0x90>)
 8007014:	f001 fc64 	bl	80088e0 <__assert_func>
 8007018:	0052      	lsls	r2, r2, #1
 800701a:	3101      	adds	r1, #1
 800701c:	e7f0      	b.n	8007000 <__s2b+0x18>
 800701e:	9b08      	ldr	r3, [sp, #32]
 8007020:	2d09      	cmp	r5, #9
 8007022:	6143      	str	r3, [r0, #20]
 8007024:	f04f 0301 	mov.w	r3, #1
 8007028:	6103      	str	r3, [r0, #16]
 800702a:	dd16      	ble.n	800705a <__s2b+0x72>
 800702c:	f104 0909 	add.w	r9, r4, #9
 8007030:	46c8      	mov	r8, r9
 8007032:	442c      	add	r4, r5
 8007034:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007038:	4601      	mov	r1, r0
 800703a:	220a      	movs	r2, #10
 800703c:	4630      	mov	r0, r6
 800703e:	3b30      	subs	r3, #48	; 0x30
 8007040:	f7ff ff8c 	bl	8006f5c <__multadd>
 8007044:	45a0      	cmp	r8, r4
 8007046:	d1f5      	bne.n	8007034 <__s2b+0x4c>
 8007048:	f1a5 0408 	sub.w	r4, r5, #8
 800704c:	444c      	add	r4, r9
 800704e:	1b2d      	subs	r5, r5, r4
 8007050:	1963      	adds	r3, r4, r5
 8007052:	42bb      	cmp	r3, r7
 8007054:	db04      	blt.n	8007060 <__s2b+0x78>
 8007056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705a:	2509      	movs	r5, #9
 800705c:	340a      	adds	r4, #10
 800705e:	e7f6      	b.n	800704e <__s2b+0x66>
 8007060:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007064:	4601      	mov	r1, r0
 8007066:	220a      	movs	r2, #10
 8007068:	4630      	mov	r0, r6
 800706a:	3b30      	subs	r3, #48	; 0x30
 800706c:	f7ff ff76 	bl	8006f5c <__multadd>
 8007070:	e7ee      	b.n	8007050 <__s2b+0x68>
 8007072:	bf00      	nop
 8007074:	0800a3a0 	.word	0x0800a3a0
 8007078:	0800a443 	.word	0x0800a443

0800707c <__hi0bits>:
 800707c:	0c02      	lsrs	r2, r0, #16
 800707e:	0412      	lsls	r2, r2, #16
 8007080:	4603      	mov	r3, r0
 8007082:	b9ca      	cbnz	r2, 80070b8 <__hi0bits+0x3c>
 8007084:	0403      	lsls	r3, r0, #16
 8007086:	2010      	movs	r0, #16
 8007088:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800708c:	bf04      	itt	eq
 800708e:	021b      	lsleq	r3, r3, #8
 8007090:	3008      	addeq	r0, #8
 8007092:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007096:	bf04      	itt	eq
 8007098:	011b      	lsleq	r3, r3, #4
 800709a:	3004      	addeq	r0, #4
 800709c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070a0:	bf04      	itt	eq
 80070a2:	009b      	lsleq	r3, r3, #2
 80070a4:	3002      	addeq	r0, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	db05      	blt.n	80070b6 <__hi0bits+0x3a>
 80070aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80070ae:	f100 0001 	add.w	r0, r0, #1
 80070b2:	bf08      	it	eq
 80070b4:	2020      	moveq	r0, #32
 80070b6:	4770      	bx	lr
 80070b8:	2000      	movs	r0, #0
 80070ba:	e7e5      	b.n	8007088 <__hi0bits+0xc>

080070bc <__lo0bits>:
 80070bc:	6803      	ldr	r3, [r0, #0]
 80070be:	4602      	mov	r2, r0
 80070c0:	f013 0007 	ands.w	r0, r3, #7
 80070c4:	d00b      	beq.n	80070de <__lo0bits+0x22>
 80070c6:	07d9      	lsls	r1, r3, #31
 80070c8:	d421      	bmi.n	800710e <__lo0bits+0x52>
 80070ca:	0798      	lsls	r0, r3, #30
 80070cc:	bf49      	itett	mi
 80070ce:	085b      	lsrmi	r3, r3, #1
 80070d0:	089b      	lsrpl	r3, r3, #2
 80070d2:	2001      	movmi	r0, #1
 80070d4:	6013      	strmi	r3, [r2, #0]
 80070d6:	bf5c      	itt	pl
 80070d8:	2002      	movpl	r0, #2
 80070da:	6013      	strpl	r3, [r2, #0]
 80070dc:	4770      	bx	lr
 80070de:	b299      	uxth	r1, r3
 80070e0:	b909      	cbnz	r1, 80070e6 <__lo0bits+0x2a>
 80070e2:	2010      	movs	r0, #16
 80070e4:	0c1b      	lsrs	r3, r3, #16
 80070e6:	b2d9      	uxtb	r1, r3
 80070e8:	b909      	cbnz	r1, 80070ee <__lo0bits+0x32>
 80070ea:	3008      	adds	r0, #8
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	0719      	lsls	r1, r3, #28
 80070f0:	bf04      	itt	eq
 80070f2:	091b      	lsreq	r3, r3, #4
 80070f4:	3004      	addeq	r0, #4
 80070f6:	0799      	lsls	r1, r3, #30
 80070f8:	bf04      	itt	eq
 80070fa:	089b      	lsreq	r3, r3, #2
 80070fc:	3002      	addeq	r0, #2
 80070fe:	07d9      	lsls	r1, r3, #31
 8007100:	d403      	bmi.n	800710a <__lo0bits+0x4e>
 8007102:	085b      	lsrs	r3, r3, #1
 8007104:	f100 0001 	add.w	r0, r0, #1
 8007108:	d003      	beq.n	8007112 <__lo0bits+0x56>
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	4770      	bx	lr
 800710e:	2000      	movs	r0, #0
 8007110:	4770      	bx	lr
 8007112:	2020      	movs	r0, #32
 8007114:	4770      	bx	lr
	...

08007118 <__i2b>:
 8007118:	b510      	push	{r4, lr}
 800711a:	460c      	mov	r4, r1
 800711c:	2101      	movs	r1, #1
 800711e:	f7ff febb 	bl	8006e98 <_Balloc>
 8007122:	4602      	mov	r2, r0
 8007124:	b928      	cbnz	r0, 8007132 <__i2b+0x1a>
 8007126:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800712a:	4b04      	ldr	r3, [pc, #16]	; (800713c <__i2b+0x24>)
 800712c:	4804      	ldr	r0, [pc, #16]	; (8007140 <__i2b+0x28>)
 800712e:	f001 fbd7 	bl	80088e0 <__assert_func>
 8007132:	2301      	movs	r3, #1
 8007134:	6144      	str	r4, [r0, #20]
 8007136:	6103      	str	r3, [r0, #16]
 8007138:	bd10      	pop	{r4, pc}
 800713a:	bf00      	nop
 800713c:	0800a3a0 	.word	0x0800a3a0
 8007140:	0800a443 	.word	0x0800a443

08007144 <__multiply>:
 8007144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	4691      	mov	r9, r2
 800714a:	690a      	ldr	r2, [r1, #16]
 800714c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007150:	460c      	mov	r4, r1
 8007152:	429a      	cmp	r2, r3
 8007154:	bfbe      	ittt	lt
 8007156:	460b      	movlt	r3, r1
 8007158:	464c      	movlt	r4, r9
 800715a:	4699      	movlt	r9, r3
 800715c:	6927      	ldr	r7, [r4, #16]
 800715e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007162:	68a3      	ldr	r3, [r4, #8]
 8007164:	6861      	ldr	r1, [r4, #4]
 8007166:	eb07 060a 	add.w	r6, r7, sl
 800716a:	42b3      	cmp	r3, r6
 800716c:	b085      	sub	sp, #20
 800716e:	bfb8      	it	lt
 8007170:	3101      	addlt	r1, #1
 8007172:	f7ff fe91 	bl	8006e98 <_Balloc>
 8007176:	b930      	cbnz	r0, 8007186 <__multiply+0x42>
 8007178:	4602      	mov	r2, r0
 800717a:	f240 115d 	movw	r1, #349	; 0x15d
 800717e:	4b43      	ldr	r3, [pc, #268]	; (800728c <__multiply+0x148>)
 8007180:	4843      	ldr	r0, [pc, #268]	; (8007290 <__multiply+0x14c>)
 8007182:	f001 fbad 	bl	80088e0 <__assert_func>
 8007186:	f100 0514 	add.w	r5, r0, #20
 800718a:	462b      	mov	r3, r5
 800718c:	2200      	movs	r2, #0
 800718e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007192:	4543      	cmp	r3, r8
 8007194:	d321      	bcc.n	80071da <__multiply+0x96>
 8007196:	f104 0314 	add.w	r3, r4, #20
 800719a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800719e:	f109 0314 	add.w	r3, r9, #20
 80071a2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071a6:	9202      	str	r2, [sp, #8]
 80071a8:	1b3a      	subs	r2, r7, r4
 80071aa:	3a15      	subs	r2, #21
 80071ac:	f022 0203 	bic.w	r2, r2, #3
 80071b0:	3204      	adds	r2, #4
 80071b2:	f104 0115 	add.w	r1, r4, #21
 80071b6:	428f      	cmp	r7, r1
 80071b8:	bf38      	it	cc
 80071ba:	2204      	movcc	r2, #4
 80071bc:	9201      	str	r2, [sp, #4]
 80071be:	9a02      	ldr	r2, [sp, #8]
 80071c0:	9303      	str	r3, [sp, #12]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d80c      	bhi.n	80071e0 <__multiply+0x9c>
 80071c6:	2e00      	cmp	r6, #0
 80071c8:	dd03      	ble.n	80071d2 <__multiply+0x8e>
 80071ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d059      	beq.n	8007286 <__multiply+0x142>
 80071d2:	6106      	str	r6, [r0, #16]
 80071d4:	b005      	add	sp, #20
 80071d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071da:	f843 2b04 	str.w	r2, [r3], #4
 80071de:	e7d8      	b.n	8007192 <__multiply+0x4e>
 80071e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80071e4:	f1ba 0f00 	cmp.w	sl, #0
 80071e8:	d023      	beq.n	8007232 <__multiply+0xee>
 80071ea:	46a9      	mov	r9, r5
 80071ec:	f04f 0c00 	mov.w	ip, #0
 80071f0:	f104 0e14 	add.w	lr, r4, #20
 80071f4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071f8:	f8d9 1000 	ldr.w	r1, [r9]
 80071fc:	fa1f fb82 	uxth.w	fp, r2
 8007200:	b289      	uxth	r1, r1
 8007202:	fb0a 110b 	mla	r1, sl, fp, r1
 8007206:	4461      	add	r1, ip
 8007208:	f8d9 c000 	ldr.w	ip, [r9]
 800720c:	0c12      	lsrs	r2, r2, #16
 800720e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007212:	fb0a c202 	mla	r2, sl, r2, ip
 8007216:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800721a:	b289      	uxth	r1, r1
 800721c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007220:	4577      	cmp	r7, lr
 8007222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007226:	f849 1b04 	str.w	r1, [r9], #4
 800722a:	d8e3      	bhi.n	80071f4 <__multiply+0xb0>
 800722c:	9a01      	ldr	r2, [sp, #4]
 800722e:	f845 c002 	str.w	ip, [r5, r2]
 8007232:	9a03      	ldr	r2, [sp, #12]
 8007234:	3304      	adds	r3, #4
 8007236:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800723a:	f1b9 0f00 	cmp.w	r9, #0
 800723e:	d020      	beq.n	8007282 <__multiply+0x13e>
 8007240:	46ae      	mov	lr, r5
 8007242:	f04f 0a00 	mov.w	sl, #0
 8007246:	6829      	ldr	r1, [r5, #0]
 8007248:	f104 0c14 	add.w	ip, r4, #20
 800724c:	f8bc b000 	ldrh.w	fp, [ip]
 8007250:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007254:	b289      	uxth	r1, r1
 8007256:	fb09 220b 	mla	r2, r9, fp, r2
 800725a:	4492      	add	sl, r2
 800725c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007260:	f84e 1b04 	str.w	r1, [lr], #4
 8007264:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007268:	f8be 1000 	ldrh.w	r1, [lr]
 800726c:	0c12      	lsrs	r2, r2, #16
 800726e:	fb09 1102 	mla	r1, r9, r2, r1
 8007272:	4567      	cmp	r7, ip
 8007274:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007278:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800727c:	d8e6      	bhi.n	800724c <__multiply+0x108>
 800727e:	9a01      	ldr	r2, [sp, #4]
 8007280:	50a9      	str	r1, [r5, r2]
 8007282:	3504      	adds	r5, #4
 8007284:	e79b      	b.n	80071be <__multiply+0x7a>
 8007286:	3e01      	subs	r6, #1
 8007288:	e79d      	b.n	80071c6 <__multiply+0x82>
 800728a:	bf00      	nop
 800728c:	0800a3a0 	.word	0x0800a3a0
 8007290:	0800a443 	.word	0x0800a443

08007294 <__pow5mult>:
 8007294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007298:	4615      	mov	r5, r2
 800729a:	f012 0203 	ands.w	r2, r2, #3
 800729e:	4606      	mov	r6, r0
 80072a0:	460f      	mov	r7, r1
 80072a2:	d007      	beq.n	80072b4 <__pow5mult+0x20>
 80072a4:	4c25      	ldr	r4, [pc, #148]	; (800733c <__pow5mult+0xa8>)
 80072a6:	3a01      	subs	r2, #1
 80072a8:	2300      	movs	r3, #0
 80072aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072ae:	f7ff fe55 	bl	8006f5c <__multadd>
 80072b2:	4607      	mov	r7, r0
 80072b4:	10ad      	asrs	r5, r5, #2
 80072b6:	d03d      	beq.n	8007334 <__pow5mult+0xa0>
 80072b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072ba:	b97c      	cbnz	r4, 80072dc <__pow5mult+0x48>
 80072bc:	2010      	movs	r0, #16
 80072be:	f001 fcf5 	bl	8008cac <malloc>
 80072c2:	4602      	mov	r2, r0
 80072c4:	6270      	str	r0, [r6, #36]	; 0x24
 80072c6:	b928      	cbnz	r0, 80072d4 <__pow5mult+0x40>
 80072c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80072cc:	4b1c      	ldr	r3, [pc, #112]	; (8007340 <__pow5mult+0xac>)
 80072ce:	481d      	ldr	r0, [pc, #116]	; (8007344 <__pow5mult+0xb0>)
 80072d0:	f001 fb06 	bl	80088e0 <__assert_func>
 80072d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072d8:	6004      	str	r4, [r0, #0]
 80072da:	60c4      	str	r4, [r0, #12]
 80072dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072e4:	b94c      	cbnz	r4, 80072fa <__pow5mult+0x66>
 80072e6:	f240 2171 	movw	r1, #625	; 0x271
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7ff ff14 	bl	8007118 <__i2b>
 80072f0:	2300      	movs	r3, #0
 80072f2:	4604      	mov	r4, r0
 80072f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80072f8:	6003      	str	r3, [r0, #0]
 80072fa:	f04f 0900 	mov.w	r9, #0
 80072fe:	07eb      	lsls	r3, r5, #31
 8007300:	d50a      	bpl.n	8007318 <__pow5mult+0x84>
 8007302:	4639      	mov	r1, r7
 8007304:	4622      	mov	r2, r4
 8007306:	4630      	mov	r0, r6
 8007308:	f7ff ff1c 	bl	8007144 <__multiply>
 800730c:	4680      	mov	r8, r0
 800730e:	4639      	mov	r1, r7
 8007310:	4630      	mov	r0, r6
 8007312:	f7ff fe01 	bl	8006f18 <_Bfree>
 8007316:	4647      	mov	r7, r8
 8007318:	106d      	asrs	r5, r5, #1
 800731a:	d00b      	beq.n	8007334 <__pow5mult+0xa0>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	b938      	cbnz	r0, 8007330 <__pow5mult+0x9c>
 8007320:	4622      	mov	r2, r4
 8007322:	4621      	mov	r1, r4
 8007324:	4630      	mov	r0, r6
 8007326:	f7ff ff0d 	bl	8007144 <__multiply>
 800732a:	6020      	str	r0, [r4, #0]
 800732c:	f8c0 9000 	str.w	r9, [r0]
 8007330:	4604      	mov	r4, r0
 8007332:	e7e4      	b.n	80072fe <__pow5mult+0x6a>
 8007334:	4638      	mov	r0, r7
 8007336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800733a:	bf00      	nop
 800733c:	0800a590 	.word	0x0800a590
 8007340:	0800a42c 	.word	0x0800a42c
 8007344:	0800a443 	.word	0x0800a443

08007348 <__lshift>:
 8007348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	460c      	mov	r4, r1
 800734e:	4607      	mov	r7, r0
 8007350:	4691      	mov	r9, r2
 8007352:	6923      	ldr	r3, [r4, #16]
 8007354:	6849      	ldr	r1, [r1, #4]
 8007356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800735a:	68a3      	ldr	r3, [r4, #8]
 800735c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007360:	f108 0601 	add.w	r6, r8, #1
 8007364:	42b3      	cmp	r3, r6
 8007366:	db0b      	blt.n	8007380 <__lshift+0x38>
 8007368:	4638      	mov	r0, r7
 800736a:	f7ff fd95 	bl	8006e98 <_Balloc>
 800736e:	4605      	mov	r5, r0
 8007370:	b948      	cbnz	r0, 8007386 <__lshift+0x3e>
 8007372:	4602      	mov	r2, r0
 8007374:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007378:	4b29      	ldr	r3, [pc, #164]	; (8007420 <__lshift+0xd8>)
 800737a:	482a      	ldr	r0, [pc, #168]	; (8007424 <__lshift+0xdc>)
 800737c:	f001 fab0 	bl	80088e0 <__assert_func>
 8007380:	3101      	adds	r1, #1
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	e7ee      	b.n	8007364 <__lshift+0x1c>
 8007386:	2300      	movs	r3, #0
 8007388:	f100 0114 	add.w	r1, r0, #20
 800738c:	f100 0210 	add.w	r2, r0, #16
 8007390:	4618      	mov	r0, r3
 8007392:	4553      	cmp	r3, sl
 8007394:	db37      	blt.n	8007406 <__lshift+0xbe>
 8007396:	6920      	ldr	r0, [r4, #16]
 8007398:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800739c:	f104 0314 	add.w	r3, r4, #20
 80073a0:	f019 091f 	ands.w	r9, r9, #31
 80073a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073ac:	d02f      	beq.n	800740e <__lshift+0xc6>
 80073ae:	468a      	mov	sl, r1
 80073b0:	f04f 0c00 	mov.w	ip, #0
 80073b4:	f1c9 0e20 	rsb	lr, r9, #32
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	fa02 f209 	lsl.w	r2, r2, r9
 80073be:	ea42 020c 	orr.w	r2, r2, ip
 80073c2:	f84a 2b04 	str.w	r2, [sl], #4
 80073c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ca:	4298      	cmp	r0, r3
 80073cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80073d0:	d8f2      	bhi.n	80073b8 <__lshift+0x70>
 80073d2:	1b03      	subs	r3, r0, r4
 80073d4:	3b15      	subs	r3, #21
 80073d6:	f023 0303 	bic.w	r3, r3, #3
 80073da:	3304      	adds	r3, #4
 80073dc:	f104 0215 	add.w	r2, r4, #21
 80073e0:	4290      	cmp	r0, r2
 80073e2:	bf38      	it	cc
 80073e4:	2304      	movcc	r3, #4
 80073e6:	f841 c003 	str.w	ip, [r1, r3]
 80073ea:	f1bc 0f00 	cmp.w	ip, #0
 80073ee:	d001      	beq.n	80073f4 <__lshift+0xac>
 80073f0:	f108 0602 	add.w	r6, r8, #2
 80073f4:	3e01      	subs	r6, #1
 80073f6:	4638      	mov	r0, r7
 80073f8:	4621      	mov	r1, r4
 80073fa:	612e      	str	r6, [r5, #16]
 80073fc:	f7ff fd8c 	bl	8006f18 <_Bfree>
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007406:	f842 0f04 	str.w	r0, [r2, #4]!
 800740a:	3301      	adds	r3, #1
 800740c:	e7c1      	b.n	8007392 <__lshift+0x4a>
 800740e:	3904      	subs	r1, #4
 8007410:	f853 2b04 	ldr.w	r2, [r3], #4
 8007414:	4298      	cmp	r0, r3
 8007416:	f841 2f04 	str.w	r2, [r1, #4]!
 800741a:	d8f9      	bhi.n	8007410 <__lshift+0xc8>
 800741c:	e7ea      	b.n	80073f4 <__lshift+0xac>
 800741e:	bf00      	nop
 8007420:	0800a3a0 	.word	0x0800a3a0
 8007424:	0800a443 	.word	0x0800a443

08007428 <__mcmp>:
 8007428:	4603      	mov	r3, r0
 800742a:	690a      	ldr	r2, [r1, #16]
 800742c:	6900      	ldr	r0, [r0, #16]
 800742e:	b530      	push	{r4, r5, lr}
 8007430:	1a80      	subs	r0, r0, r2
 8007432:	d10d      	bne.n	8007450 <__mcmp+0x28>
 8007434:	3314      	adds	r3, #20
 8007436:	3114      	adds	r1, #20
 8007438:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800743c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007440:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007448:	4295      	cmp	r5, r2
 800744a:	d002      	beq.n	8007452 <__mcmp+0x2a>
 800744c:	d304      	bcc.n	8007458 <__mcmp+0x30>
 800744e:	2001      	movs	r0, #1
 8007450:	bd30      	pop	{r4, r5, pc}
 8007452:	42a3      	cmp	r3, r4
 8007454:	d3f4      	bcc.n	8007440 <__mcmp+0x18>
 8007456:	e7fb      	b.n	8007450 <__mcmp+0x28>
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	e7f8      	b.n	8007450 <__mcmp+0x28>
	...

08007460 <__mdiff>:
 8007460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	460d      	mov	r5, r1
 8007466:	4607      	mov	r7, r0
 8007468:	4611      	mov	r1, r2
 800746a:	4628      	mov	r0, r5
 800746c:	4614      	mov	r4, r2
 800746e:	f7ff ffdb 	bl	8007428 <__mcmp>
 8007472:	1e06      	subs	r6, r0, #0
 8007474:	d111      	bne.n	800749a <__mdiff+0x3a>
 8007476:	4631      	mov	r1, r6
 8007478:	4638      	mov	r0, r7
 800747a:	f7ff fd0d 	bl	8006e98 <_Balloc>
 800747e:	4602      	mov	r2, r0
 8007480:	b928      	cbnz	r0, 800748e <__mdiff+0x2e>
 8007482:	f240 2132 	movw	r1, #562	; 0x232
 8007486:	4b3a      	ldr	r3, [pc, #232]	; (8007570 <__mdiff+0x110>)
 8007488:	483a      	ldr	r0, [pc, #232]	; (8007574 <__mdiff+0x114>)
 800748a:	f001 fa29 	bl	80088e0 <__assert_func>
 800748e:	2301      	movs	r3, #1
 8007490:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007494:	4610      	mov	r0, r2
 8007496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749a:	bfa4      	itt	ge
 800749c:	4623      	movge	r3, r4
 800749e:	462c      	movge	r4, r5
 80074a0:	4638      	mov	r0, r7
 80074a2:	6861      	ldr	r1, [r4, #4]
 80074a4:	bfa6      	itte	ge
 80074a6:	461d      	movge	r5, r3
 80074a8:	2600      	movge	r6, #0
 80074aa:	2601      	movlt	r6, #1
 80074ac:	f7ff fcf4 	bl	8006e98 <_Balloc>
 80074b0:	4602      	mov	r2, r0
 80074b2:	b918      	cbnz	r0, 80074bc <__mdiff+0x5c>
 80074b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80074b8:	4b2d      	ldr	r3, [pc, #180]	; (8007570 <__mdiff+0x110>)
 80074ba:	e7e5      	b.n	8007488 <__mdiff+0x28>
 80074bc:	f102 0814 	add.w	r8, r2, #20
 80074c0:	46c2      	mov	sl, r8
 80074c2:	f04f 0c00 	mov.w	ip, #0
 80074c6:	6927      	ldr	r7, [r4, #16]
 80074c8:	60c6      	str	r6, [r0, #12]
 80074ca:	692e      	ldr	r6, [r5, #16]
 80074cc:	f104 0014 	add.w	r0, r4, #20
 80074d0:	f105 0914 	add.w	r9, r5, #20
 80074d4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80074d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074dc:	3410      	adds	r4, #16
 80074de:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80074e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80074e6:	fa1f f18b 	uxth.w	r1, fp
 80074ea:	448c      	add	ip, r1
 80074ec:	b299      	uxth	r1, r3
 80074ee:	0c1b      	lsrs	r3, r3, #16
 80074f0:	ebac 0101 	sub.w	r1, ip, r1
 80074f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80074fc:	b289      	uxth	r1, r1
 80074fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007502:	454e      	cmp	r6, r9
 8007504:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007508:	f84a 3b04 	str.w	r3, [sl], #4
 800750c:	d8e7      	bhi.n	80074de <__mdiff+0x7e>
 800750e:	1b73      	subs	r3, r6, r5
 8007510:	3b15      	subs	r3, #21
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	3515      	adds	r5, #21
 8007518:	3304      	adds	r3, #4
 800751a:	42ae      	cmp	r6, r5
 800751c:	bf38      	it	cc
 800751e:	2304      	movcc	r3, #4
 8007520:	4418      	add	r0, r3
 8007522:	4443      	add	r3, r8
 8007524:	461e      	mov	r6, r3
 8007526:	4605      	mov	r5, r0
 8007528:	4575      	cmp	r5, lr
 800752a:	d30e      	bcc.n	800754a <__mdiff+0xea>
 800752c:	f10e 0103 	add.w	r1, lr, #3
 8007530:	1a09      	subs	r1, r1, r0
 8007532:	f021 0103 	bic.w	r1, r1, #3
 8007536:	3803      	subs	r0, #3
 8007538:	4586      	cmp	lr, r0
 800753a:	bf38      	it	cc
 800753c:	2100      	movcc	r1, #0
 800753e:	4419      	add	r1, r3
 8007540:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007544:	b18b      	cbz	r3, 800756a <__mdiff+0x10a>
 8007546:	6117      	str	r7, [r2, #16]
 8007548:	e7a4      	b.n	8007494 <__mdiff+0x34>
 800754a:	f855 8b04 	ldr.w	r8, [r5], #4
 800754e:	fa1f f188 	uxth.w	r1, r8
 8007552:	4461      	add	r1, ip
 8007554:	140c      	asrs	r4, r1, #16
 8007556:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800755a:	b289      	uxth	r1, r1
 800755c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007560:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007564:	f846 1b04 	str.w	r1, [r6], #4
 8007568:	e7de      	b.n	8007528 <__mdiff+0xc8>
 800756a:	3f01      	subs	r7, #1
 800756c:	e7e8      	b.n	8007540 <__mdiff+0xe0>
 800756e:	bf00      	nop
 8007570:	0800a3a0 	.word	0x0800a3a0
 8007574:	0800a443 	.word	0x0800a443

08007578 <__ulp>:
 8007578:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <__ulp+0x48>)
 800757a:	400b      	ands	r3, r1
 800757c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007580:	2b00      	cmp	r3, #0
 8007582:	dd02      	ble.n	800758a <__ulp+0x12>
 8007584:	2000      	movs	r0, #0
 8007586:	4619      	mov	r1, r3
 8007588:	4770      	bx	lr
 800758a:	425b      	negs	r3, r3
 800758c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007590:	f04f 0000 	mov.w	r0, #0
 8007594:	f04f 0100 	mov.w	r1, #0
 8007598:	ea4f 5223 	mov.w	r2, r3, asr #20
 800759c:	da04      	bge.n	80075a8 <__ulp+0x30>
 800759e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80075a2:	fa43 f102 	asr.w	r1, r3, r2
 80075a6:	4770      	bx	lr
 80075a8:	f1a2 0314 	sub.w	r3, r2, #20
 80075ac:	2b1e      	cmp	r3, #30
 80075ae:	bfd6      	itet	le
 80075b0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80075b4:	2301      	movgt	r3, #1
 80075b6:	fa22 f303 	lsrle.w	r3, r2, r3
 80075ba:	4618      	mov	r0, r3
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	7ff00000 	.word	0x7ff00000

080075c4 <__b2d>:
 80075c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c8:	6907      	ldr	r7, [r0, #16]
 80075ca:	f100 0914 	add.w	r9, r0, #20
 80075ce:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80075d2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80075d6:	f1a7 0804 	sub.w	r8, r7, #4
 80075da:	4630      	mov	r0, r6
 80075dc:	f7ff fd4e 	bl	800707c <__hi0bits>
 80075e0:	f1c0 0320 	rsb	r3, r0, #32
 80075e4:	280a      	cmp	r0, #10
 80075e6:	600b      	str	r3, [r1, #0]
 80075e8:	491f      	ldr	r1, [pc, #124]	; (8007668 <__b2d+0xa4>)
 80075ea:	dc17      	bgt.n	800761c <__b2d+0x58>
 80075ec:	45c1      	cmp	r9, r8
 80075ee:	bf28      	it	cs
 80075f0:	2200      	movcs	r2, #0
 80075f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80075f6:	fa26 f30c 	lsr.w	r3, r6, ip
 80075fa:	bf38      	it	cc
 80075fc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007600:	ea43 0501 	orr.w	r5, r3, r1
 8007604:	f100 0315 	add.w	r3, r0, #21
 8007608:	fa06 f303 	lsl.w	r3, r6, r3
 800760c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007610:	ea43 0402 	orr.w	r4, r3, r2
 8007614:	4620      	mov	r0, r4
 8007616:	4629      	mov	r1, r5
 8007618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761c:	45c1      	cmp	r9, r8
 800761e:	bf2e      	itee	cs
 8007620:	2200      	movcs	r2, #0
 8007622:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007626:	f1a7 0808 	subcc.w	r8, r7, #8
 800762a:	f1b0 030b 	subs.w	r3, r0, #11
 800762e:	d016      	beq.n	800765e <__b2d+0x9a>
 8007630:	f1c3 0720 	rsb	r7, r3, #32
 8007634:	fa22 f107 	lsr.w	r1, r2, r7
 8007638:	45c8      	cmp	r8, r9
 800763a:	fa06 f603 	lsl.w	r6, r6, r3
 800763e:	ea46 0601 	orr.w	r6, r6, r1
 8007642:	bf94      	ite	ls
 8007644:	2100      	movls	r1, #0
 8007646:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800764a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800764e:	fa02 f003 	lsl.w	r0, r2, r3
 8007652:	40f9      	lsrs	r1, r7
 8007654:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007658:	ea40 0401 	orr.w	r4, r0, r1
 800765c:	e7da      	b.n	8007614 <__b2d+0x50>
 800765e:	4614      	mov	r4, r2
 8007660:	ea46 0501 	orr.w	r5, r6, r1
 8007664:	e7d6      	b.n	8007614 <__b2d+0x50>
 8007666:	bf00      	nop
 8007668:	3ff00000 	.word	0x3ff00000

0800766c <__d2b>:
 800766c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007670:	2101      	movs	r1, #1
 8007672:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007676:	4690      	mov	r8, r2
 8007678:	461d      	mov	r5, r3
 800767a:	f7ff fc0d 	bl	8006e98 <_Balloc>
 800767e:	4604      	mov	r4, r0
 8007680:	b930      	cbnz	r0, 8007690 <__d2b+0x24>
 8007682:	4602      	mov	r2, r0
 8007684:	f240 310a 	movw	r1, #778	; 0x30a
 8007688:	4b24      	ldr	r3, [pc, #144]	; (800771c <__d2b+0xb0>)
 800768a:	4825      	ldr	r0, [pc, #148]	; (8007720 <__d2b+0xb4>)
 800768c:	f001 f928 	bl	80088e0 <__assert_func>
 8007690:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007694:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007698:	bb2d      	cbnz	r5, 80076e6 <__d2b+0x7a>
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	f1b8 0300 	subs.w	r3, r8, #0
 80076a0:	d026      	beq.n	80076f0 <__d2b+0x84>
 80076a2:	4668      	mov	r0, sp
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	f7ff fd09 	bl	80070bc <__lo0bits>
 80076aa:	9900      	ldr	r1, [sp, #0]
 80076ac:	b1f0      	cbz	r0, 80076ec <__d2b+0x80>
 80076ae:	9a01      	ldr	r2, [sp, #4]
 80076b0:	f1c0 0320 	rsb	r3, r0, #32
 80076b4:	fa02 f303 	lsl.w	r3, r2, r3
 80076b8:	430b      	orrs	r3, r1
 80076ba:	40c2      	lsrs	r2, r0
 80076bc:	6163      	str	r3, [r4, #20]
 80076be:	9201      	str	r2, [sp, #4]
 80076c0:	9b01      	ldr	r3, [sp, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bf14      	ite	ne
 80076c6:	2102      	movne	r1, #2
 80076c8:	2101      	moveq	r1, #1
 80076ca:	61a3      	str	r3, [r4, #24]
 80076cc:	6121      	str	r1, [r4, #16]
 80076ce:	b1c5      	cbz	r5, 8007702 <__d2b+0x96>
 80076d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076d4:	4405      	add	r5, r0
 80076d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076da:	603d      	str	r5, [r7, #0]
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	4620      	mov	r0, r4
 80076e0:	b002      	add	sp, #8
 80076e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ea:	e7d6      	b.n	800769a <__d2b+0x2e>
 80076ec:	6161      	str	r1, [r4, #20]
 80076ee:	e7e7      	b.n	80076c0 <__d2b+0x54>
 80076f0:	a801      	add	r0, sp, #4
 80076f2:	f7ff fce3 	bl	80070bc <__lo0bits>
 80076f6:	2101      	movs	r1, #1
 80076f8:	9b01      	ldr	r3, [sp, #4]
 80076fa:	6121      	str	r1, [r4, #16]
 80076fc:	6163      	str	r3, [r4, #20]
 80076fe:	3020      	adds	r0, #32
 8007700:	e7e5      	b.n	80076ce <__d2b+0x62>
 8007702:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007706:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800770a:	6038      	str	r0, [r7, #0]
 800770c:	6918      	ldr	r0, [r3, #16]
 800770e:	f7ff fcb5 	bl	800707c <__hi0bits>
 8007712:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007716:	6031      	str	r1, [r6, #0]
 8007718:	e7e1      	b.n	80076de <__d2b+0x72>
 800771a:	bf00      	nop
 800771c:	0800a3a0 	.word	0x0800a3a0
 8007720:	0800a443 	.word	0x0800a443

08007724 <__ratio>:
 8007724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007728:	4688      	mov	r8, r1
 800772a:	4669      	mov	r1, sp
 800772c:	4681      	mov	r9, r0
 800772e:	f7ff ff49 	bl	80075c4 <__b2d>
 8007732:	460f      	mov	r7, r1
 8007734:	4604      	mov	r4, r0
 8007736:	460d      	mov	r5, r1
 8007738:	4640      	mov	r0, r8
 800773a:	a901      	add	r1, sp, #4
 800773c:	f7ff ff42 	bl	80075c4 <__b2d>
 8007740:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007744:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007748:	468b      	mov	fp, r1
 800774a:	eba3 0c02 	sub.w	ip, r3, r2
 800774e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007752:	1a9b      	subs	r3, r3, r2
 8007754:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007758:	2b00      	cmp	r3, #0
 800775a:	bfd5      	itete	le
 800775c:	460a      	movle	r2, r1
 800775e:	462a      	movgt	r2, r5
 8007760:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007764:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007768:	bfd8      	it	le
 800776a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800776e:	465b      	mov	r3, fp
 8007770:	4602      	mov	r2, r0
 8007772:	4639      	mov	r1, r7
 8007774:	4620      	mov	r0, r4
 8007776:	f7f8 ffd9 	bl	800072c <__aeabi_ddiv>
 800777a:	b003      	add	sp, #12
 800777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007780 <__copybits>:
 8007780:	3901      	subs	r1, #1
 8007782:	b570      	push	{r4, r5, r6, lr}
 8007784:	1149      	asrs	r1, r1, #5
 8007786:	6914      	ldr	r4, [r2, #16]
 8007788:	3101      	adds	r1, #1
 800778a:	f102 0314 	add.w	r3, r2, #20
 800778e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007792:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007796:	1f05      	subs	r5, r0, #4
 8007798:	42a3      	cmp	r3, r4
 800779a:	d30c      	bcc.n	80077b6 <__copybits+0x36>
 800779c:	1aa3      	subs	r3, r4, r2
 800779e:	3b11      	subs	r3, #17
 80077a0:	f023 0303 	bic.w	r3, r3, #3
 80077a4:	3211      	adds	r2, #17
 80077a6:	42a2      	cmp	r2, r4
 80077a8:	bf88      	it	hi
 80077aa:	2300      	movhi	r3, #0
 80077ac:	4418      	add	r0, r3
 80077ae:	2300      	movs	r3, #0
 80077b0:	4288      	cmp	r0, r1
 80077b2:	d305      	bcc.n	80077c0 <__copybits+0x40>
 80077b4:	bd70      	pop	{r4, r5, r6, pc}
 80077b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80077ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80077be:	e7eb      	b.n	8007798 <__copybits+0x18>
 80077c0:	f840 3b04 	str.w	r3, [r0], #4
 80077c4:	e7f4      	b.n	80077b0 <__copybits+0x30>

080077c6 <__any_on>:
 80077c6:	f100 0214 	add.w	r2, r0, #20
 80077ca:	6900      	ldr	r0, [r0, #16]
 80077cc:	114b      	asrs	r3, r1, #5
 80077ce:	4298      	cmp	r0, r3
 80077d0:	b510      	push	{r4, lr}
 80077d2:	db11      	blt.n	80077f8 <__any_on+0x32>
 80077d4:	dd0a      	ble.n	80077ec <__any_on+0x26>
 80077d6:	f011 011f 	ands.w	r1, r1, #31
 80077da:	d007      	beq.n	80077ec <__any_on+0x26>
 80077dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80077e0:	fa24 f001 	lsr.w	r0, r4, r1
 80077e4:	fa00 f101 	lsl.w	r1, r0, r1
 80077e8:	428c      	cmp	r4, r1
 80077ea:	d10b      	bne.n	8007804 <__any_on+0x3e>
 80077ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d803      	bhi.n	80077fc <__any_on+0x36>
 80077f4:	2000      	movs	r0, #0
 80077f6:	bd10      	pop	{r4, pc}
 80077f8:	4603      	mov	r3, r0
 80077fa:	e7f7      	b.n	80077ec <__any_on+0x26>
 80077fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007800:	2900      	cmp	r1, #0
 8007802:	d0f5      	beq.n	80077f0 <__any_on+0x2a>
 8007804:	2001      	movs	r0, #1
 8007806:	e7f6      	b.n	80077f6 <__any_on+0x30>

08007808 <_calloc_r>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	fba1 5402 	umull	r5, r4, r1, r2
 800780e:	b934      	cbnz	r4, 800781e <_calloc_r+0x16>
 8007810:	4629      	mov	r1, r5
 8007812:	f000 f82d 	bl	8007870 <_malloc_r>
 8007816:	4606      	mov	r6, r0
 8007818:	b928      	cbnz	r0, 8007826 <_calloc_r+0x1e>
 800781a:	4630      	mov	r0, r6
 800781c:	bd70      	pop	{r4, r5, r6, pc}
 800781e:	220c      	movs	r2, #12
 8007820:	2600      	movs	r6, #0
 8007822:	6002      	str	r2, [r0, #0]
 8007824:	e7f9      	b.n	800781a <_calloc_r+0x12>
 8007826:	462a      	mov	r2, r5
 8007828:	4621      	mov	r1, r4
 800782a:	f7fe f8c5 	bl	80059b8 <memset>
 800782e:	e7f4      	b.n	800781a <_calloc_r+0x12>

08007830 <sbrk_aligned>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4e0e      	ldr	r6, [pc, #56]	; (800786c <sbrk_aligned+0x3c>)
 8007834:	460c      	mov	r4, r1
 8007836:	6831      	ldr	r1, [r6, #0]
 8007838:	4605      	mov	r5, r0
 800783a:	b911      	cbnz	r1, 8007842 <sbrk_aligned+0x12>
 800783c:	f000 febc 	bl	80085b8 <_sbrk_r>
 8007840:	6030      	str	r0, [r6, #0]
 8007842:	4621      	mov	r1, r4
 8007844:	4628      	mov	r0, r5
 8007846:	f000 feb7 	bl	80085b8 <_sbrk_r>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	d00a      	beq.n	8007864 <sbrk_aligned+0x34>
 800784e:	1cc4      	adds	r4, r0, #3
 8007850:	f024 0403 	bic.w	r4, r4, #3
 8007854:	42a0      	cmp	r0, r4
 8007856:	d007      	beq.n	8007868 <sbrk_aligned+0x38>
 8007858:	1a21      	subs	r1, r4, r0
 800785a:	4628      	mov	r0, r5
 800785c:	f000 feac 	bl	80085b8 <_sbrk_r>
 8007860:	3001      	adds	r0, #1
 8007862:	d101      	bne.n	8007868 <sbrk_aligned+0x38>
 8007864:	f04f 34ff 	mov.w	r4, #4294967295
 8007868:	4620      	mov	r0, r4
 800786a:	bd70      	pop	{r4, r5, r6, pc}
 800786c:	200013bc 	.word	0x200013bc

08007870 <_malloc_r>:
 8007870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007874:	1ccd      	adds	r5, r1, #3
 8007876:	f025 0503 	bic.w	r5, r5, #3
 800787a:	3508      	adds	r5, #8
 800787c:	2d0c      	cmp	r5, #12
 800787e:	bf38      	it	cc
 8007880:	250c      	movcc	r5, #12
 8007882:	2d00      	cmp	r5, #0
 8007884:	4607      	mov	r7, r0
 8007886:	db01      	blt.n	800788c <_malloc_r+0x1c>
 8007888:	42a9      	cmp	r1, r5
 800788a:	d905      	bls.n	8007898 <_malloc_r+0x28>
 800788c:	230c      	movs	r3, #12
 800788e:	2600      	movs	r6, #0
 8007890:	603b      	str	r3, [r7, #0]
 8007892:	4630      	mov	r0, r6
 8007894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007898:	4e2e      	ldr	r6, [pc, #184]	; (8007954 <_malloc_r+0xe4>)
 800789a:	f001 fa37 	bl	8008d0c <__malloc_lock>
 800789e:	6833      	ldr	r3, [r6, #0]
 80078a0:	461c      	mov	r4, r3
 80078a2:	bb34      	cbnz	r4, 80078f2 <_malloc_r+0x82>
 80078a4:	4629      	mov	r1, r5
 80078a6:	4638      	mov	r0, r7
 80078a8:	f7ff ffc2 	bl	8007830 <sbrk_aligned>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	4604      	mov	r4, r0
 80078b0:	d14d      	bne.n	800794e <_malloc_r+0xde>
 80078b2:	6834      	ldr	r4, [r6, #0]
 80078b4:	4626      	mov	r6, r4
 80078b6:	2e00      	cmp	r6, #0
 80078b8:	d140      	bne.n	800793c <_malloc_r+0xcc>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	4631      	mov	r1, r6
 80078be:	4638      	mov	r0, r7
 80078c0:	eb04 0803 	add.w	r8, r4, r3
 80078c4:	f000 fe78 	bl	80085b8 <_sbrk_r>
 80078c8:	4580      	cmp	r8, r0
 80078ca:	d13a      	bne.n	8007942 <_malloc_r+0xd2>
 80078cc:	6821      	ldr	r1, [r4, #0]
 80078ce:	3503      	adds	r5, #3
 80078d0:	1a6d      	subs	r5, r5, r1
 80078d2:	f025 0503 	bic.w	r5, r5, #3
 80078d6:	3508      	adds	r5, #8
 80078d8:	2d0c      	cmp	r5, #12
 80078da:	bf38      	it	cc
 80078dc:	250c      	movcc	r5, #12
 80078de:	4638      	mov	r0, r7
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7ff ffa5 	bl	8007830 <sbrk_aligned>
 80078e6:	3001      	adds	r0, #1
 80078e8:	d02b      	beq.n	8007942 <_malloc_r+0xd2>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	442b      	add	r3, r5
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	e00e      	b.n	8007910 <_malloc_r+0xa0>
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	1b52      	subs	r2, r2, r5
 80078f6:	d41e      	bmi.n	8007936 <_malloc_r+0xc6>
 80078f8:	2a0b      	cmp	r2, #11
 80078fa:	d916      	bls.n	800792a <_malloc_r+0xba>
 80078fc:	1961      	adds	r1, r4, r5
 80078fe:	42a3      	cmp	r3, r4
 8007900:	6025      	str	r5, [r4, #0]
 8007902:	bf18      	it	ne
 8007904:	6059      	strne	r1, [r3, #4]
 8007906:	6863      	ldr	r3, [r4, #4]
 8007908:	bf08      	it	eq
 800790a:	6031      	streq	r1, [r6, #0]
 800790c:	5162      	str	r2, [r4, r5]
 800790e:	604b      	str	r3, [r1, #4]
 8007910:	4638      	mov	r0, r7
 8007912:	f104 060b 	add.w	r6, r4, #11
 8007916:	f001 f9ff 	bl	8008d18 <__malloc_unlock>
 800791a:	f026 0607 	bic.w	r6, r6, #7
 800791e:	1d23      	adds	r3, r4, #4
 8007920:	1af2      	subs	r2, r6, r3
 8007922:	d0b6      	beq.n	8007892 <_malloc_r+0x22>
 8007924:	1b9b      	subs	r3, r3, r6
 8007926:	50a3      	str	r3, [r4, r2]
 8007928:	e7b3      	b.n	8007892 <_malloc_r+0x22>
 800792a:	6862      	ldr	r2, [r4, #4]
 800792c:	42a3      	cmp	r3, r4
 800792e:	bf0c      	ite	eq
 8007930:	6032      	streq	r2, [r6, #0]
 8007932:	605a      	strne	r2, [r3, #4]
 8007934:	e7ec      	b.n	8007910 <_malloc_r+0xa0>
 8007936:	4623      	mov	r3, r4
 8007938:	6864      	ldr	r4, [r4, #4]
 800793a:	e7b2      	b.n	80078a2 <_malloc_r+0x32>
 800793c:	4634      	mov	r4, r6
 800793e:	6876      	ldr	r6, [r6, #4]
 8007940:	e7b9      	b.n	80078b6 <_malloc_r+0x46>
 8007942:	230c      	movs	r3, #12
 8007944:	4638      	mov	r0, r7
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	f001 f9e6 	bl	8008d18 <__malloc_unlock>
 800794c:	e7a1      	b.n	8007892 <_malloc_r+0x22>
 800794e:	6025      	str	r5, [r4, #0]
 8007950:	e7de      	b.n	8007910 <_malloc_r+0xa0>
 8007952:	bf00      	nop
 8007954:	200013b8 	.word	0x200013b8

08007958 <__ssputs_r>:
 8007958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800795c:	688e      	ldr	r6, [r1, #8]
 800795e:	4682      	mov	sl, r0
 8007960:	429e      	cmp	r6, r3
 8007962:	460c      	mov	r4, r1
 8007964:	4690      	mov	r8, r2
 8007966:	461f      	mov	r7, r3
 8007968:	d838      	bhi.n	80079dc <__ssputs_r+0x84>
 800796a:	898a      	ldrh	r2, [r1, #12]
 800796c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007970:	d032      	beq.n	80079d8 <__ssputs_r+0x80>
 8007972:	6825      	ldr	r5, [r4, #0]
 8007974:	6909      	ldr	r1, [r1, #16]
 8007976:	3301      	adds	r3, #1
 8007978:	eba5 0901 	sub.w	r9, r5, r1
 800797c:	6965      	ldr	r5, [r4, #20]
 800797e:	444b      	add	r3, r9
 8007980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007988:	106d      	asrs	r5, r5, #1
 800798a:	429d      	cmp	r5, r3
 800798c:	bf38      	it	cc
 800798e:	461d      	movcc	r5, r3
 8007990:	0553      	lsls	r3, r2, #21
 8007992:	d531      	bpl.n	80079f8 <__ssputs_r+0xa0>
 8007994:	4629      	mov	r1, r5
 8007996:	f7ff ff6b 	bl	8007870 <_malloc_r>
 800799a:	4606      	mov	r6, r0
 800799c:	b950      	cbnz	r0, 80079b4 <__ssputs_r+0x5c>
 800799e:	230c      	movs	r3, #12
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	f8ca 3000 	str.w	r3, [sl]
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b4:	464a      	mov	r2, r9
 80079b6:	6921      	ldr	r1, [r4, #16]
 80079b8:	f7fd fff0 	bl	800599c <memcpy>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	6126      	str	r6, [r4, #16]
 80079ca:	444e      	add	r6, r9
 80079cc:	6026      	str	r6, [r4, #0]
 80079ce:	463e      	mov	r6, r7
 80079d0:	6165      	str	r5, [r4, #20]
 80079d2:	eba5 0509 	sub.w	r5, r5, r9
 80079d6:	60a5      	str	r5, [r4, #8]
 80079d8:	42be      	cmp	r6, r7
 80079da:	d900      	bls.n	80079de <__ssputs_r+0x86>
 80079dc:	463e      	mov	r6, r7
 80079de:	4632      	mov	r2, r6
 80079e0:	4641      	mov	r1, r8
 80079e2:	6820      	ldr	r0, [r4, #0]
 80079e4:	f001 f978 	bl	8008cd8 <memmove>
 80079e8:	68a3      	ldr	r3, [r4, #8]
 80079ea:	2000      	movs	r0, #0
 80079ec:	1b9b      	subs	r3, r3, r6
 80079ee:	60a3      	str	r3, [r4, #8]
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	4433      	add	r3, r6
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	e7db      	b.n	80079b0 <__ssputs_r+0x58>
 80079f8:	462a      	mov	r2, r5
 80079fa:	f001 f9db 	bl	8008db4 <_realloc_r>
 80079fe:	4606      	mov	r6, r0
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d1e1      	bne.n	80079c8 <__ssputs_r+0x70>
 8007a04:	4650      	mov	r0, sl
 8007a06:	6921      	ldr	r1, [r4, #16]
 8007a08:	f001 f98c 	bl	8008d24 <_free_r>
 8007a0c:	e7c7      	b.n	800799e <__ssputs_r+0x46>
	...

08007a10 <_svfiprintf_r>:
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	4698      	mov	r8, r3
 8007a16:	898b      	ldrh	r3, [r1, #12]
 8007a18:	4607      	mov	r7, r0
 8007a1a:	061b      	lsls	r3, r3, #24
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	4614      	mov	r4, r2
 8007a20:	b09d      	sub	sp, #116	; 0x74
 8007a22:	d50e      	bpl.n	8007a42 <_svfiprintf_r+0x32>
 8007a24:	690b      	ldr	r3, [r1, #16]
 8007a26:	b963      	cbnz	r3, 8007a42 <_svfiprintf_r+0x32>
 8007a28:	2140      	movs	r1, #64	; 0x40
 8007a2a:	f7ff ff21 	bl	8007870 <_malloc_r>
 8007a2e:	6028      	str	r0, [r5, #0]
 8007a30:	6128      	str	r0, [r5, #16]
 8007a32:	b920      	cbnz	r0, 8007a3e <_svfiprintf_r+0x2e>
 8007a34:	230c      	movs	r3, #12
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	e0d1      	b.n	8007be2 <_svfiprintf_r+0x1d2>
 8007a3e:	2340      	movs	r3, #64	; 0x40
 8007a40:	616b      	str	r3, [r5, #20]
 8007a42:	2300      	movs	r3, #0
 8007a44:	9309      	str	r3, [sp, #36]	; 0x24
 8007a46:	2320      	movs	r3, #32
 8007a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a4c:	2330      	movs	r3, #48	; 0x30
 8007a4e:	f04f 0901 	mov.w	r9, #1
 8007a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007bfc <_svfiprintf_r+0x1ec>
 8007a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a5e:	4623      	mov	r3, r4
 8007a60:	469a      	mov	sl, r3
 8007a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a66:	b10a      	cbz	r2, 8007a6c <_svfiprintf_r+0x5c>
 8007a68:	2a25      	cmp	r2, #37	; 0x25
 8007a6a:	d1f9      	bne.n	8007a60 <_svfiprintf_r+0x50>
 8007a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a70:	d00b      	beq.n	8007a8a <_svfiprintf_r+0x7a>
 8007a72:	465b      	mov	r3, fp
 8007a74:	4622      	mov	r2, r4
 8007a76:	4629      	mov	r1, r5
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f7ff ff6d 	bl	8007958 <__ssputs_r>
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f000 80aa 	beq.w	8007bd8 <_svfiprintf_r+0x1c8>
 8007a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a86:	445a      	add	r2, fp
 8007a88:	9209      	str	r2, [sp, #36]	; 0x24
 8007a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 80a2 	beq.w	8007bd8 <_svfiprintf_r+0x1c8>
 8007a94:	2300      	movs	r3, #0
 8007a96:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a9e:	f10a 0a01 	add.w	sl, sl, #1
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	9307      	str	r3, [sp, #28]
 8007aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8007aac:	4654      	mov	r4, sl
 8007aae:	2205      	movs	r2, #5
 8007ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab4:	4851      	ldr	r0, [pc, #324]	; (8007bfc <_svfiprintf_r+0x1ec>)
 8007ab6:	f001 f901 	bl	8008cbc <memchr>
 8007aba:	9a04      	ldr	r2, [sp, #16]
 8007abc:	b9d8      	cbnz	r0, 8007af6 <_svfiprintf_r+0xe6>
 8007abe:	06d0      	lsls	r0, r2, #27
 8007ac0:	bf44      	itt	mi
 8007ac2:	2320      	movmi	r3, #32
 8007ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac8:	0711      	lsls	r1, r2, #28
 8007aca:	bf44      	itt	mi
 8007acc:	232b      	movmi	r3, #43	; 0x2b
 8007ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad8:	d015      	beq.n	8007b06 <_svfiprintf_r+0xf6>
 8007ada:	4654      	mov	r4, sl
 8007adc:	2000      	movs	r0, #0
 8007ade:	f04f 0c0a 	mov.w	ip, #10
 8007ae2:	9a07      	ldr	r2, [sp, #28]
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aea:	3b30      	subs	r3, #48	; 0x30
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	d94e      	bls.n	8007b8e <_svfiprintf_r+0x17e>
 8007af0:	b1b0      	cbz	r0, 8007b20 <_svfiprintf_r+0x110>
 8007af2:	9207      	str	r2, [sp, #28]
 8007af4:	e014      	b.n	8007b20 <_svfiprintf_r+0x110>
 8007af6:	eba0 0308 	sub.w	r3, r0, r8
 8007afa:	fa09 f303 	lsl.w	r3, r9, r3
 8007afe:	4313      	orrs	r3, r2
 8007b00:	46a2      	mov	sl, r4
 8007b02:	9304      	str	r3, [sp, #16]
 8007b04:	e7d2      	b.n	8007aac <_svfiprintf_r+0x9c>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	1d19      	adds	r1, r3, #4
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	9103      	str	r1, [sp, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bfbb      	ittet	lt
 8007b12:	425b      	neglt	r3, r3
 8007b14:	f042 0202 	orrlt.w	r2, r2, #2
 8007b18:	9307      	strge	r3, [sp, #28]
 8007b1a:	9307      	strlt	r3, [sp, #28]
 8007b1c:	bfb8      	it	lt
 8007b1e:	9204      	strlt	r2, [sp, #16]
 8007b20:	7823      	ldrb	r3, [r4, #0]
 8007b22:	2b2e      	cmp	r3, #46	; 0x2e
 8007b24:	d10c      	bne.n	8007b40 <_svfiprintf_r+0x130>
 8007b26:	7863      	ldrb	r3, [r4, #1]
 8007b28:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2a:	d135      	bne.n	8007b98 <_svfiprintf_r+0x188>
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	3402      	adds	r4, #2
 8007b30:	1d1a      	adds	r2, r3, #4
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	9203      	str	r2, [sp, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bfb8      	it	lt
 8007b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b3e:	9305      	str	r3, [sp, #20]
 8007b40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007c00 <_svfiprintf_r+0x1f0>
 8007b44:	2203      	movs	r2, #3
 8007b46:	4650      	mov	r0, sl
 8007b48:	7821      	ldrb	r1, [r4, #0]
 8007b4a:	f001 f8b7 	bl	8008cbc <memchr>
 8007b4e:	b140      	cbz	r0, 8007b62 <_svfiprintf_r+0x152>
 8007b50:	2340      	movs	r3, #64	; 0x40
 8007b52:	eba0 000a 	sub.w	r0, r0, sl
 8007b56:	fa03 f000 	lsl.w	r0, r3, r0
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	3401      	adds	r4, #1
 8007b5e:	4303      	orrs	r3, r0
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b66:	2206      	movs	r2, #6
 8007b68:	4826      	ldr	r0, [pc, #152]	; (8007c04 <_svfiprintf_r+0x1f4>)
 8007b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b6e:	f001 f8a5 	bl	8008cbc <memchr>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d038      	beq.n	8007be8 <_svfiprintf_r+0x1d8>
 8007b76:	4b24      	ldr	r3, [pc, #144]	; (8007c08 <_svfiprintf_r+0x1f8>)
 8007b78:	bb1b      	cbnz	r3, 8007bc2 <_svfiprintf_r+0x1b2>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	f023 0307 	bic.w	r3, r3, #7
 8007b82:	3308      	adds	r3, #8
 8007b84:	9303      	str	r3, [sp, #12]
 8007b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b88:	4433      	add	r3, r6
 8007b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8c:	e767      	b.n	8007a5e <_svfiprintf_r+0x4e>
 8007b8e:	460c      	mov	r4, r1
 8007b90:	2001      	movs	r0, #1
 8007b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b96:	e7a5      	b.n	8007ae4 <_svfiprintf_r+0xd4>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f04f 0c0a 	mov.w	ip, #10
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	3401      	adds	r4, #1
 8007ba2:	9305      	str	r3, [sp, #20]
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007baa:	3a30      	subs	r2, #48	; 0x30
 8007bac:	2a09      	cmp	r2, #9
 8007bae:	d903      	bls.n	8007bb8 <_svfiprintf_r+0x1a8>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0c5      	beq.n	8007b40 <_svfiprintf_r+0x130>
 8007bb4:	9105      	str	r1, [sp, #20]
 8007bb6:	e7c3      	b.n	8007b40 <_svfiprintf_r+0x130>
 8007bb8:	4604      	mov	r4, r0
 8007bba:	2301      	movs	r3, #1
 8007bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bc0:	e7f0      	b.n	8007ba4 <_svfiprintf_r+0x194>
 8007bc2:	ab03      	add	r3, sp, #12
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	462a      	mov	r2, r5
 8007bc8:	4638      	mov	r0, r7
 8007bca:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <_svfiprintf_r+0x1fc>)
 8007bcc:	a904      	add	r1, sp, #16
 8007bce:	f3af 8000 	nop.w
 8007bd2:	1c42      	adds	r2, r0, #1
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	d1d6      	bne.n	8007b86 <_svfiprintf_r+0x176>
 8007bd8:	89ab      	ldrh	r3, [r5, #12]
 8007bda:	065b      	lsls	r3, r3, #25
 8007bdc:	f53f af2c 	bmi.w	8007a38 <_svfiprintf_r+0x28>
 8007be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007be2:	b01d      	add	sp, #116	; 0x74
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	ab03      	add	r3, sp, #12
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	462a      	mov	r2, r5
 8007bee:	4638      	mov	r0, r7
 8007bf0:	4b06      	ldr	r3, [pc, #24]	; (8007c0c <_svfiprintf_r+0x1fc>)
 8007bf2:	a904      	add	r1, sp, #16
 8007bf4:	f000 fa50 	bl	8008098 <_printf_i>
 8007bf8:	e7eb      	b.n	8007bd2 <_svfiprintf_r+0x1c2>
 8007bfa:	bf00      	nop
 8007bfc:	0800a59c 	.word	0x0800a59c
 8007c00:	0800a5a2 	.word	0x0800a5a2
 8007c04:	0800a5a6 	.word	0x0800a5a6
 8007c08:	00000000 	.word	0x00000000
 8007c0c:	08007959 	.word	0x08007959

08007c10 <_sungetc_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	1c4b      	adds	r3, r1, #1
 8007c14:	4614      	mov	r4, r2
 8007c16:	d103      	bne.n	8007c20 <_sungetc_r+0x10>
 8007c18:	f04f 35ff 	mov.w	r5, #4294967295
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	bd38      	pop	{r3, r4, r5, pc}
 8007c20:	8993      	ldrh	r3, [r2, #12]
 8007c22:	b2cd      	uxtb	r5, r1
 8007c24:	f023 0320 	bic.w	r3, r3, #32
 8007c28:	8193      	strh	r3, [r2, #12]
 8007c2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c2c:	6852      	ldr	r2, [r2, #4]
 8007c2e:	b18b      	cbz	r3, 8007c54 <_sungetc_r+0x44>
 8007c30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c32:	4293      	cmp	r3, r2
 8007c34:	dd08      	ble.n	8007c48 <_sungetc_r+0x38>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	1e5a      	subs	r2, r3, #1
 8007c3a:	6022      	str	r2, [r4, #0]
 8007c3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007c40:	6863      	ldr	r3, [r4, #4]
 8007c42:	3301      	adds	r3, #1
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	e7e9      	b.n	8007c1c <_sungetc_r+0xc>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	f000 fe03 	bl	8008854 <__submore>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d0f1      	beq.n	8007c36 <_sungetc_r+0x26>
 8007c52:	e7e1      	b.n	8007c18 <_sungetc_r+0x8>
 8007c54:	6921      	ldr	r1, [r4, #16]
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	b151      	cbz	r1, 8007c70 <_sungetc_r+0x60>
 8007c5a:	4299      	cmp	r1, r3
 8007c5c:	d208      	bcs.n	8007c70 <_sungetc_r+0x60>
 8007c5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007c62:	42a9      	cmp	r1, r5
 8007c64:	d104      	bne.n	8007c70 <_sungetc_r+0x60>
 8007c66:	3b01      	subs	r3, #1
 8007c68:	3201      	adds	r2, #1
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	6062      	str	r2, [r4, #4]
 8007c6e:	e7d5      	b.n	8007c1c <_sungetc_r+0xc>
 8007c70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c78:	6363      	str	r3, [r4, #52]	; 0x34
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c7e:	4623      	mov	r3, r4
 8007c80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	2301      	movs	r3, #1
 8007c88:	e7dc      	b.n	8007c44 <_sungetc_r+0x34>

08007c8a <__ssrefill_r>:
 8007c8a:	b510      	push	{r4, lr}
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007c90:	b169      	cbz	r1, 8007cae <__ssrefill_r+0x24>
 8007c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c96:	4299      	cmp	r1, r3
 8007c98:	d001      	beq.n	8007c9e <__ssrefill_r+0x14>
 8007c9a:	f001 f843 	bl	8008d24 <_free_r>
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ca2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ca4:	6063      	str	r3, [r4, #4]
 8007ca6:	b113      	cbz	r3, 8007cae <__ssrefill_r+0x24>
 8007ca8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007caa:	6023      	str	r3, [r4, #0]
 8007cac:	bd10      	pop	{r4, pc}
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	6063      	str	r3, [r4, #4]
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f043 0320 	orr.w	r3, r3, #32
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	e7f3      	b.n	8007cac <__ssrefill_r+0x22>

08007cc4 <__ssvfiscanf_r>:
 8007cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc8:	460c      	mov	r4, r1
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4606      	mov	r6, r0
 8007cce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007cd2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007cd6:	49a7      	ldr	r1, [pc, #668]	; (8007f74 <__ssvfiscanf_r+0x2b0>)
 8007cd8:	f10d 0804 	add.w	r8, sp, #4
 8007cdc:	91a0      	str	r1, [sp, #640]	; 0x280
 8007cde:	49a6      	ldr	r1, [pc, #664]	; (8007f78 <__ssvfiscanf_r+0x2b4>)
 8007ce0:	4fa6      	ldr	r7, [pc, #664]	; (8007f7c <__ssvfiscanf_r+0x2b8>)
 8007ce2:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8007f80 <__ssvfiscanf_r+0x2bc>
 8007ce6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007cea:	91a1      	str	r1, [sp, #644]	; 0x284
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	7813      	ldrb	r3, [r2, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 815c 	beq.w	8007fae <__ssvfiscanf_r+0x2ea>
 8007cf6:	5dd9      	ldrb	r1, [r3, r7]
 8007cf8:	1c55      	adds	r5, r2, #1
 8007cfa:	f011 0108 	ands.w	r1, r1, #8
 8007cfe:	d019      	beq.n	8007d34 <__ssvfiscanf_r+0x70>
 8007d00:	6863      	ldr	r3, [r4, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	dd0f      	ble.n	8007d26 <__ssvfiscanf_r+0x62>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	781a      	ldrb	r2, [r3, #0]
 8007d0a:	5cba      	ldrb	r2, [r7, r2]
 8007d0c:	0712      	lsls	r2, r2, #28
 8007d0e:	d401      	bmi.n	8007d14 <__ssvfiscanf_r+0x50>
 8007d10:	462a      	mov	r2, r5
 8007d12:	e7ec      	b.n	8007cee <__ssvfiscanf_r+0x2a>
 8007d14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007d16:	3301      	adds	r3, #1
 8007d18:	3201      	adds	r2, #1
 8007d1a:	9245      	str	r2, [sp, #276]	; 0x114
 8007d1c:	6862      	ldr	r2, [r4, #4]
 8007d1e:	6023      	str	r3, [r4, #0]
 8007d20:	3a01      	subs	r2, #1
 8007d22:	6062      	str	r2, [r4, #4]
 8007d24:	e7ec      	b.n	8007d00 <__ssvfiscanf_r+0x3c>
 8007d26:	4621      	mov	r1, r4
 8007d28:	4630      	mov	r0, r6
 8007d2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007d2c:	4798      	blx	r3
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d0e9      	beq.n	8007d06 <__ssvfiscanf_r+0x42>
 8007d32:	e7ed      	b.n	8007d10 <__ssvfiscanf_r+0x4c>
 8007d34:	2b25      	cmp	r3, #37	; 0x25
 8007d36:	d012      	beq.n	8007d5e <__ssvfiscanf_r+0x9a>
 8007d38:	469a      	mov	sl, r3
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f340 8094 	ble.w	8007e6a <__ssvfiscanf_r+0x1a6>
 8007d42:	6822      	ldr	r2, [r4, #0]
 8007d44:	7813      	ldrb	r3, [r2, #0]
 8007d46:	4553      	cmp	r3, sl
 8007d48:	f040 8131 	bne.w	8007fae <__ssvfiscanf_r+0x2ea>
 8007d4c:	6863      	ldr	r3, [r4, #4]
 8007d4e:	3201      	adds	r2, #1
 8007d50:	3b01      	subs	r3, #1
 8007d52:	6063      	str	r3, [r4, #4]
 8007d54:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007d56:	6022      	str	r2, [r4, #0]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	9345      	str	r3, [sp, #276]	; 0x114
 8007d5c:	e7d8      	b.n	8007d10 <__ssvfiscanf_r+0x4c>
 8007d5e:	9141      	str	r1, [sp, #260]	; 0x104
 8007d60:	9143      	str	r1, [sp, #268]	; 0x10c
 8007d62:	7853      	ldrb	r3, [r2, #1]
 8007d64:	2b2a      	cmp	r3, #42	; 0x2a
 8007d66:	bf04      	itt	eq
 8007d68:	2310      	moveq	r3, #16
 8007d6a:	1c95      	addeq	r5, r2, #2
 8007d6c:	f04f 020a 	mov.w	r2, #10
 8007d70:	bf08      	it	eq
 8007d72:	9341      	streq	r3, [sp, #260]	; 0x104
 8007d74:	46aa      	mov	sl, r5
 8007d76:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007d7a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007d7e:	2b09      	cmp	r3, #9
 8007d80:	d91d      	bls.n	8007dbe <__ssvfiscanf_r+0xfa>
 8007d82:	2203      	movs	r2, #3
 8007d84:	487e      	ldr	r0, [pc, #504]	; (8007f80 <__ssvfiscanf_r+0x2bc>)
 8007d86:	f000 ff99 	bl	8008cbc <memchr>
 8007d8a:	b140      	cbz	r0, 8007d9e <__ssvfiscanf_r+0xda>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	4655      	mov	r5, sl
 8007d90:	eba0 0009 	sub.w	r0, r0, r9
 8007d94:	fa03 f000 	lsl.w	r0, r3, r0
 8007d98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d9a:	4318      	orrs	r0, r3
 8007d9c:	9041      	str	r0, [sp, #260]	; 0x104
 8007d9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007da2:	2b78      	cmp	r3, #120	; 0x78
 8007da4:	d806      	bhi.n	8007db4 <__ssvfiscanf_r+0xf0>
 8007da6:	2b57      	cmp	r3, #87	; 0x57
 8007da8:	d810      	bhi.n	8007dcc <__ssvfiscanf_r+0x108>
 8007daa:	2b25      	cmp	r3, #37	; 0x25
 8007dac:	d0c4      	beq.n	8007d38 <__ssvfiscanf_r+0x74>
 8007dae:	d857      	bhi.n	8007e60 <__ssvfiscanf_r+0x19c>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d065      	beq.n	8007e80 <__ssvfiscanf_r+0x1bc>
 8007db4:	2303      	movs	r3, #3
 8007db6:	9347      	str	r3, [sp, #284]	; 0x11c
 8007db8:	230a      	movs	r3, #10
 8007dba:	9342      	str	r3, [sp, #264]	; 0x108
 8007dbc:	e072      	b.n	8007ea4 <__ssvfiscanf_r+0x1e0>
 8007dbe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007dc0:	4655      	mov	r5, sl
 8007dc2:	fb02 1103 	mla	r1, r2, r3, r1
 8007dc6:	3930      	subs	r1, #48	; 0x30
 8007dc8:	9143      	str	r1, [sp, #268]	; 0x10c
 8007dca:	e7d3      	b.n	8007d74 <__ssvfiscanf_r+0xb0>
 8007dcc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007dd0:	2a20      	cmp	r2, #32
 8007dd2:	d8ef      	bhi.n	8007db4 <__ssvfiscanf_r+0xf0>
 8007dd4:	a101      	add	r1, pc, #4	; (adr r1, 8007ddc <__ssvfiscanf_r+0x118>)
 8007dd6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007dda:	bf00      	nop
 8007ddc:	08007e8f 	.word	0x08007e8f
 8007de0:	08007db5 	.word	0x08007db5
 8007de4:	08007db5 	.word	0x08007db5
 8007de8:	08007eed 	.word	0x08007eed
 8007dec:	08007db5 	.word	0x08007db5
 8007df0:	08007db5 	.word	0x08007db5
 8007df4:	08007db5 	.word	0x08007db5
 8007df8:	08007db5 	.word	0x08007db5
 8007dfc:	08007db5 	.word	0x08007db5
 8007e00:	08007db5 	.word	0x08007db5
 8007e04:	08007db5 	.word	0x08007db5
 8007e08:	08007f03 	.word	0x08007f03
 8007e0c:	08007ed9 	.word	0x08007ed9
 8007e10:	08007e67 	.word	0x08007e67
 8007e14:	08007e67 	.word	0x08007e67
 8007e18:	08007e67 	.word	0x08007e67
 8007e1c:	08007db5 	.word	0x08007db5
 8007e20:	08007edd 	.word	0x08007edd
 8007e24:	08007db5 	.word	0x08007db5
 8007e28:	08007db5 	.word	0x08007db5
 8007e2c:	08007db5 	.word	0x08007db5
 8007e30:	08007db5 	.word	0x08007db5
 8007e34:	08007f13 	.word	0x08007f13
 8007e38:	08007ee5 	.word	0x08007ee5
 8007e3c:	08007e87 	.word	0x08007e87
 8007e40:	08007db5 	.word	0x08007db5
 8007e44:	08007db5 	.word	0x08007db5
 8007e48:	08007f0f 	.word	0x08007f0f
 8007e4c:	08007db5 	.word	0x08007db5
 8007e50:	08007ed9 	.word	0x08007ed9
 8007e54:	08007db5 	.word	0x08007db5
 8007e58:	08007db5 	.word	0x08007db5
 8007e5c:	08007e8f 	.word	0x08007e8f
 8007e60:	3b45      	subs	r3, #69	; 0x45
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d8a6      	bhi.n	8007db4 <__ssvfiscanf_r+0xf0>
 8007e66:	2305      	movs	r3, #5
 8007e68:	e01b      	b.n	8007ea2 <__ssvfiscanf_r+0x1de>
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007e70:	4798      	blx	r3
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f43f af65 	beq.w	8007d42 <__ssvfiscanf_r+0x7e>
 8007e78:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	f040 808d 	bne.w	8007f9a <__ssvfiscanf_r+0x2d6>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	e08f      	b.n	8007fa6 <__ssvfiscanf_r+0x2e2>
 8007e86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007e88:	f042 0220 	orr.w	r2, r2, #32
 8007e8c:	9241      	str	r2, [sp, #260]	; 0x104
 8007e8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e94:	9241      	str	r2, [sp, #260]	; 0x104
 8007e96:	2210      	movs	r2, #16
 8007e98:	2b6f      	cmp	r3, #111	; 0x6f
 8007e9a:	bf34      	ite	cc
 8007e9c:	2303      	movcc	r3, #3
 8007e9e:	2304      	movcs	r3, #4
 8007ea0:	9242      	str	r2, [sp, #264]	; 0x108
 8007ea2:	9347      	str	r3, [sp, #284]	; 0x11c
 8007ea4:	6863      	ldr	r3, [r4, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dd42      	ble.n	8007f30 <__ssvfiscanf_r+0x26c>
 8007eaa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007eac:	0659      	lsls	r1, r3, #25
 8007eae:	d404      	bmi.n	8007eba <__ssvfiscanf_r+0x1f6>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	781a      	ldrb	r2, [r3, #0]
 8007eb4:	5cba      	ldrb	r2, [r7, r2]
 8007eb6:	0712      	lsls	r2, r2, #28
 8007eb8:	d441      	bmi.n	8007f3e <__ssvfiscanf_r+0x27a>
 8007eba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	dc50      	bgt.n	8007f62 <__ssvfiscanf_r+0x29e>
 8007ec0:	466b      	mov	r3, sp
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	a941      	add	r1, sp, #260	; 0x104
 8007ec8:	f000 fa0c 	bl	80082e4 <_scanf_chars>
 8007ecc:	2801      	cmp	r0, #1
 8007ece:	d06e      	beq.n	8007fae <__ssvfiscanf_r+0x2ea>
 8007ed0:	2802      	cmp	r0, #2
 8007ed2:	f47f af1d 	bne.w	8007d10 <__ssvfiscanf_r+0x4c>
 8007ed6:	e7cf      	b.n	8007e78 <__ssvfiscanf_r+0x1b4>
 8007ed8:	220a      	movs	r2, #10
 8007eda:	e7dd      	b.n	8007e98 <__ssvfiscanf_r+0x1d4>
 8007edc:	2300      	movs	r3, #0
 8007ede:	9342      	str	r3, [sp, #264]	; 0x108
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e7de      	b.n	8007ea2 <__ssvfiscanf_r+0x1de>
 8007ee4:	2308      	movs	r3, #8
 8007ee6:	9342      	str	r3, [sp, #264]	; 0x108
 8007ee8:	2304      	movs	r3, #4
 8007eea:	e7da      	b.n	8007ea2 <__ssvfiscanf_r+0x1de>
 8007eec:	4629      	mov	r1, r5
 8007eee:	4640      	mov	r0, r8
 8007ef0:	f000 fb72 	bl	80085d8 <__sccl>
 8007ef4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007efc:	9341      	str	r3, [sp, #260]	; 0x104
 8007efe:	2301      	movs	r3, #1
 8007f00:	e7cf      	b.n	8007ea2 <__ssvfiscanf_r+0x1de>
 8007f02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f08:	9341      	str	r3, [sp, #260]	; 0x104
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e7c9      	b.n	8007ea2 <__ssvfiscanf_r+0x1de>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e7c7      	b.n	8007ea2 <__ssvfiscanf_r+0x1de>
 8007f12:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007f14:	06c3      	lsls	r3, r0, #27
 8007f16:	f53f aefb 	bmi.w	8007d10 <__ssvfiscanf_r+0x4c>
 8007f1a:	9b00      	ldr	r3, [sp, #0]
 8007f1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f1e:	1d19      	adds	r1, r3, #4
 8007f20:	9100      	str	r1, [sp, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f010 0f01 	tst.w	r0, #1
 8007f28:	bf14      	ite	ne
 8007f2a:	801a      	strhne	r2, [r3, #0]
 8007f2c:	601a      	streq	r2, [r3, #0]
 8007f2e:	e6ef      	b.n	8007d10 <__ssvfiscanf_r+0x4c>
 8007f30:	4621      	mov	r1, r4
 8007f32:	4630      	mov	r0, r6
 8007f34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f36:	4798      	blx	r3
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d0b6      	beq.n	8007eaa <__ssvfiscanf_r+0x1e6>
 8007f3c:	e79c      	b.n	8007e78 <__ssvfiscanf_r+0x1b4>
 8007f3e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f40:	3201      	adds	r2, #1
 8007f42:	9245      	str	r2, [sp, #276]	; 0x114
 8007f44:	6862      	ldr	r2, [r4, #4]
 8007f46:	3a01      	subs	r2, #1
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	6062      	str	r2, [r4, #4]
 8007f4c:	dd02      	ble.n	8007f54 <__ssvfiscanf_r+0x290>
 8007f4e:	3301      	adds	r3, #1
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	e7ad      	b.n	8007eb0 <__ssvfiscanf_r+0x1ec>
 8007f54:	4621      	mov	r1, r4
 8007f56:	4630      	mov	r0, r6
 8007f58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f5a:	4798      	blx	r3
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d0a7      	beq.n	8007eb0 <__ssvfiscanf_r+0x1ec>
 8007f60:	e78a      	b.n	8007e78 <__ssvfiscanf_r+0x1b4>
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	dc0e      	bgt.n	8007f84 <__ssvfiscanf_r+0x2c0>
 8007f66:	466b      	mov	r3, sp
 8007f68:	4622      	mov	r2, r4
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	a941      	add	r1, sp, #260	; 0x104
 8007f6e:	f000 fa13 	bl	8008398 <_scanf_i>
 8007f72:	e7ab      	b.n	8007ecc <__ssvfiscanf_r+0x208>
 8007f74:	08007c11 	.word	0x08007c11
 8007f78:	08007c8b 	.word	0x08007c8b
 8007f7c:	0800a627 	.word	0x0800a627
 8007f80:	0800a5a2 	.word	0x0800a5a2
 8007f84:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <__ssvfiscanf_r+0x2f0>)
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f43f aec2 	beq.w	8007d10 <__ssvfiscanf_r+0x4c>
 8007f8c:	466b      	mov	r3, sp
 8007f8e:	4622      	mov	r2, r4
 8007f90:	4630      	mov	r0, r6
 8007f92:	a941      	add	r1, sp, #260	; 0x104
 8007f94:	f3af 8000 	nop.w
 8007f98:	e798      	b.n	8007ecc <__ssvfiscanf_r+0x208>
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007fa0:	bf18      	it	ne
 8007fa2:	f04f 30ff 	movne.w	r0, #4294967295
 8007fa6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fae:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007fb0:	e7f9      	b.n	8007fa6 <__ssvfiscanf_r+0x2e2>
 8007fb2:	bf00      	nop
 8007fb4:	00000000 	.word	0x00000000

08007fb8 <_printf_common>:
 8007fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbc:	4616      	mov	r6, r2
 8007fbe:	4699      	mov	r9, r3
 8007fc0:	688a      	ldr	r2, [r1, #8]
 8007fc2:	690b      	ldr	r3, [r1, #16]
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	bfb8      	it	lt
 8007fca:	4613      	movlt	r3, r2
 8007fcc:	6033      	str	r3, [r6, #0]
 8007fce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fd8:	b10a      	cbz	r2, 8007fde <_printf_common+0x26>
 8007fda:	3301      	adds	r3, #1
 8007fdc:	6033      	str	r3, [r6, #0]
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	0699      	lsls	r1, r3, #26
 8007fe2:	bf42      	ittt	mi
 8007fe4:	6833      	ldrmi	r3, [r6, #0]
 8007fe6:	3302      	addmi	r3, #2
 8007fe8:	6033      	strmi	r3, [r6, #0]
 8007fea:	6825      	ldr	r5, [r4, #0]
 8007fec:	f015 0506 	ands.w	r5, r5, #6
 8007ff0:	d106      	bne.n	8008000 <_printf_common+0x48>
 8007ff2:	f104 0a19 	add.w	sl, r4, #25
 8007ff6:	68e3      	ldr	r3, [r4, #12]
 8007ff8:	6832      	ldr	r2, [r6, #0]
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	42ab      	cmp	r3, r5
 8007ffe:	dc28      	bgt.n	8008052 <_printf_common+0x9a>
 8008000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008004:	1e13      	subs	r3, r2, #0
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	bf18      	it	ne
 800800a:	2301      	movne	r3, #1
 800800c:	0692      	lsls	r2, r2, #26
 800800e:	d42d      	bmi.n	800806c <_printf_common+0xb4>
 8008010:	4649      	mov	r1, r9
 8008012:	4638      	mov	r0, r7
 8008014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008018:	47c0      	blx	r8
 800801a:	3001      	adds	r0, #1
 800801c:	d020      	beq.n	8008060 <_printf_common+0xa8>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	68e5      	ldr	r5, [r4, #12]
 8008022:	f003 0306 	and.w	r3, r3, #6
 8008026:	2b04      	cmp	r3, #4
 8008028:	bf18      	it	ne
 800802a:	2500      	movne	r5, #0
 800802c:	6832      	ldr	r2, [r6, #0]
 800802e:	f04f 0600 	mov.w	r6, #0
 8008032:	68a3      	ldr	r3, [r4, #8]
 8008034:	bf08      	it	eq
 8008036:	1aad      	subeq	r5, r5, r2
 8008038:	6922      	ldr	r2, [r4, #16]
 800803a:	bf08      	it	eq
 800803c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008040:	4293      	cmp	r3, r2
 8008042:	bfc4      	itt	gt
 8008044:	1a9b      	subgt	r3, r3, r2
 8008046:	18ed      	addgt	r5, r5, r3
 8008048:	341a      	adds	r4, #26
 800804a:	42b5      	cmp	r5, r6
 800804c:	d11a      	bne.n	8008084 <_printf_common+0xcc>
 800804e:	2000      	movs	r0, #0
 8008050:	e008      	b.n	8008064 <_printf_common+0xac>
 8008052:	2301      	movs	r3, #1
 8008054:	4652      	mov	r2, sl
 8008056:	4649      	mov	r1, r9
 8008058:	4638      	mov	r0, r7
 800805a:	47c0      	blx	r8
 800805c:	3001      	adds	r0, #1
 800805e:	d103      	bne.n	8008068 <_printf_common+0xb0>
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008068:	3501      	adds	r5, #1
 800806a:	e7c4      	b.n	8007ff6 <_printf_common+0x3e>
 800806c:	2030      	movs	r0, #48	; 0x30
 800806e:	18e1      	adds	r1, r4, r3
 8008070:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800807a:	4422      	add	r2, r4
 800807c:	3302      	adds	r3, #2
 800807e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008082:	e7c5      	b.n	8008010 <_printf_common+0x58>
 8008084:	2301      	movs	r3, #1
 8008086:	4622      	mov	r2, r4
 8008088:	4649      	mov	r1, r9
 800808a:	4638      	mov	r0, r7
 800808c:	47c0      	blx	r8
 800808e:	3001      	adds	r0, #1
 8008090:	d0e6      	beq.n	8008060 <_printf_common+0xa8>
 8008092:	3601      	adds	r6, #1
 8008094:	e7d9      	b.n	800804a <_printf_common+0x92>
	...

08008098 <_printf_i>:
 8008098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	7e0f      	ldrb	r7, [r1, #24]
 800809e:	4691      	mov	r9, r2
 80080a0:	2f78      	cmp	r7, #120	; 0x78
 80080a2:	4680      	mov	r8, r0
 80080a4:	460c      	mov	r4, r1
 80080a6:	469a      	mov	sl, r3
 80080a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080ae:	d807      	bhi.n	80080c0 <_printf_i+0x28>
 80080b0:	2f62      	cmp	r7, #98	; 0x62
 80080b2:	d80a      	bhi.n	80080ca <_printf_i+0x32>
 80080b4:	2f00      	cmp	r7, #0
 80080b6:	f000 80d9 	beq.w	800826c <_printf_i+0x1d4>
 80080ba:	2f58      	cmp	r7, #88	; 0x58
 80080bc:	f000 80a4 	beq.w	8008208 <_printf_i+0x170>
 80080c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080c8:	e03a      	b.n	8008140 <_printf_i+0xa8>
 80080ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080ce:	2b15      	cmp	r3, #21
 80080d0:	d8f6      	bhi.n	80080c0 <_printf_i+0x28>
 80080d2:	a101      	add	r1, pc, #4	; (adr r1, 80080d8 <_printf_i+0x40>)
 80080d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080d8:	08008131 	.word	0x08008131
 80080dc:	08008145 	.word	0x08008145
 80080e0:	080080c1 	.word	0x080080c1
 80080e4:	080080c1 	.word	0x080080c1
 80080e8:	080080c1 	.word	0x080080c1
 80080ec:	080080c1 	.word	0x080080c1
 80080f0:	08008145 	.word	0x08008145
 80080f4:	080080c1 	.word	0x080080c1
 80080f8:	080080c1 	.word	0x080080c1
 80080fc:	080080c1 	.word	0x080080c1
 8008100:	080080c1 	.word	0x080080c1
 8008104:	08008253 	.word	0x08008253
 8008108:	08008175 	.word	0x08008175
 800810c:	08008235 	.word	0x08008235
 8008110:	080080c1 	.word	0x080080c1
 8008114:	080080c1 	.word	0x080080c1
 8008118:	08008275 	.word	0x08008275
 800811c:	080080c1 	.word	0x080080c1
 8008120:	08008175 	.word	0x08008175
 8008124:	080080c1 	.word	0x080080c1
 8008128:	080080c1 	.word	0x080080c1
 800812c:	0800823d 	.word	0x0800823d
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	1d1a      	adds	r2, r3, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	602a      	str	r2, [r5, #0]
 8008138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800813c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008140:	2301      	movs	r3, #1
 8008142:	e0a4      	b.n	800828e <_printf_i+0x1f6>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	6829      	ldr	r1, [r5, #0]
 8008148:	0606      	lsls	r6, r0, #24
 800814a:	f101 0304 	add.w	r3, r1, #4
 800814e:	d50a      	bpl.n	8008166 <_printf_i+0xce>
 8008150:	680e      	ldr	r6, [r1, #0]
 8008152:	602b      	str	r3, [r5, #0]
 8008154:	2e00      	cmp	r6, #0
 8008156:	da03      	bge.n	8008160 <_printf_i+0xc8>
 8008158:	232d      	movs	r3, #45	; 0x2d
 800815a:	4276      	negs	r6, r6
 800815c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008160:	230a      	movs	r3, #10
 8008162:	485e      	ldr	r0, [pc, #376]	; (80082dc <_printf_i+0x244>)
 8008164:	e019      	b.n	800819a <_printf_i+0x102>
 8008166:	680e      	ldr	r6, [r1, #0]
 8008168:	f010 0f40 	tst.w	r0, #64	; 0x40
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	bf18      	it	ne
 8008170:	b236      	sxthne	r6, r6
 8008172:	e7ef      	b.n	8008154 <_printf_i+0xbc>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	6820      	ldr	r0, [r4, #0]
 8008178:	1d19      	adds	r1, r3, #4
 800817a:	6029      	str	r1, [r5, #0]
 800817c:	0601      	lsls	r1, r0, #24
 800817e:	d501      	bpl.n	8008184 <_printf_i+0xec>
 8008180:	681e      	ldr	r6, [r3, #0]
 8008182:	e002      	b.n	800818a <_printf_i+0xf2>
 8008184:	0646      	lsls	r6, r0, #25
 8008186:	d5fb      	bpl.n	8008180 <_printf_i+0xe8>
 8008188:	881e      	ldrh	r6, [r3, #0]
 800818a:	2f6f      	cmp	r7, #111	; 0x6f
 800818c:	bf0c      	ite	eq
 800818e:	2308      	moveq	r3, #8
 8008190:	230a      	movne	r3, #10
 8008192:	4852      	ldr	r0, [pc, #328]	; (80082dc <_printf_i+0x244>)
 8008194:	2100      	movs	r1, #0
 8008196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800819a:	6865      	ldr	r5, [r4, #4]
 800819c:	2d00      	cmp	r5, #0
 800819e:	bfa8      	it	ge
 80081a0:	6821      	ldrge	r1, [r4, #0]
 80081a2:	60a5      	str	r5, [r4, #8]
 80081a4:	bfa4      	itt	ge
 80081a6:	f021 0104 	bicge.w	r1, r1, #4
 80081aa:	6021      	strge	r1, [r4, #0]
 80081ac:	b90e      	cbnz	r6, 80081b2 <_printf_i+0x11a>
 80081ae:	2d00      	cmp	r5, #0
 80081b0:	d04d      	beq.n	800824e <_printf_i+0x1b6>
 80081b2:	4615      	mov	r5, r2
 80081b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80081b8:	fb03 6711 	mls	r7, r3, r1, r6
 80081bc:	5dc7      	ldrb	r7, [r0, r7]
 80081be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081c2:	4637      	mov	r7, r6
 80081c4:	42bb      	cmp	r3, r7
 80081c6:	460e      	mov	r6, r1
 80081c8:	d9f4      	bls.n	80081b4 <_printf_i+0x11c>
 80081ca:	2b08      	cmp	r3, #8
 80081cc:	d10b      	bne.n	80081e6 <_printf_i+0x14e>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	07de      	lsls	r6, r3, #31
 80081d2:	d508      	bpl.n	80081e6 <_printf_i+0x14e>
 80081d4:	6923      	ldr	r3, [r4, #16]
 80081d6:	6861      	ldr	r1, [r4, #4]
 80081d8:	4299      	cmp	r1, r3
 80081da:	bfde      	ittt	le
 80081dc:	2330      	movle	r3, #48	; 0x30
 80081de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081e6:	1b52      	subs	r2, r2, r5
 80081e8:	6122      	str	r2, [r4, #16]
 80081ea:	464b      	mov	r3, r9
 80081ec:	4621      	mov	r1, r4
 80081ee:	4640      	mov	r0, r8
 80081f0:	f8cd a000 	str.w	sl, [sp]
 80081f4:	aa03      	add	r2, sp, #12
 80081f6:	f7ff fedf 	bl	8007fb8 <_printf_common>
 80081fa:	3001      	adds	r0, #1
 80081fc:	d14c      	bne.n	8008298 <_printf_i+0x200>
 80081fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008202:	b004      	add	sp, #16
 8008204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008208:	4834      	ldr	r0, [pc, #208]	; (80082dc <_printf_i+0x244>)
 800820a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800820e:	6829      	ldr	r1, [r5, #0]
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	f851 6b04 	ldr.w	r6, [r1], #4
 8008216:	6029      	str	r1, [r5, #0]
 8008218:	061d      	lsls	r5, r3, #24
 800821a:	d514      	bpl.n	8008246 <_printf_i+0x1ae>
 800821c:	07df      	lsls	r7, r3, #31
 800821e:	bf44      	itt	mi
 8008220:	f043 0320 	orrmi.w	r3, r3, #32
 8008224:	6023      	strmi	r3, [r4, #0]
 8008226:	b91e      	cbnz	r6, 8008230 <_printf_i+0x198>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	f023 0320 	bic.w	r3, r3, #32
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	2310      	movs	r3, #16
 8008232:	e7af      	b.n	8008194 <_printf_i+0xfc>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	f043 0320 	orr.w	r3, r3, #32
 800823a:	6023      	str	r3, [r4, #0]
 800823c:	2378      	movs	r3, #120	; 0x78
 800823e:	4828      	ldr	r0, [pc, #160]	; (80082e0 <_printf_i+0x248>)
 8008240:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008244:	e7e3      	b.n	800820e <_printf_i+0x176>
 8008246:	0659      	lsls	r1, r3, #25
 8008248:	bf48      	it	mi
 800824a:	b2b6      	uxthmi	r6, r6
 800824c:	e7e6      	b.n	800821c <_printf_i+0x184>
 800824e:	4615      	mov	r5, r2
 8008250:	e7bb      	b.n	80081ca <_printf_i+0x132>
 8008252:	682b      	ldr	r3, [r5, #0]
 8008254:	6826      	ldr	r6, [r4, #0]
 8008256:	1d18      	adds	r0, r3, #4
 8008258:	6961      	ldr	r1, [r4, #20]
 800825a:	6028      	str	r0, [r5, #0]
 800825c:	0635      	lsls	r5, r6, #24
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	d501      	bpl.n	8008266 <_printf_i+0x1ce>
 8008262:	6019      	str	r1, [r3, #0]
 8008264:	e002      	b.n	800826c <_printf_i+0x1d4>
 8008266:	0670      	lsls	r0, r6, #25
 8008268:	d5fb      	bpl.n	8008262 <_printf_i+0x1ca>
 800826a:	8019      	strh	r1, [r3, #0]
 800826c:	2300      	movs	r3, #0
 800826e:	4615      	mov	r5, r2
 8008270:	6123      	str	r3, [r4, #16]
 8008272:	e7ba      	b.n	80081ea <_printf_i+0x152>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	2100      	movs	r1, #0
 8008278:	1d1a      	adds	r2, r3, #4
 800827a:	602a      	str	r2, [r5, #0]
 800827c:	681d      	ldr	r5, [r3, #0]
 800827e:	6862      	ldr	r2, [r4, #4]
 8008280:	4628      	mov	r0, r5
 8008282:	f000 fd1b 	bl	8008cbc <memchr>
 8008286:	b108      	cbz	r0, 800828c <_printf_i+0x1f4>
 8008288:	1b40      	subs	r0, r0, r5
 800828a:	6060      	str	r0, [r4, #4]
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	6123      	str	r3, [r4, #16]
 8008290:	2300      	movs	r3, #0
 8008292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008296:	e7a8      	b.n	80081ea <_printf_i+0x152>
 8008298:	462a      	mov	r2, r5
 800829a:	4649      	mov	r1, r9
 800829c:	4640      	mov	r0, r8
 800829e:	6923      	ldr	r3, [r4, #16]
 80082a0:	47d0      	blx	sl
 80082a2:	3001      	adds	r0, #1
 80082a4:	d0ab      	beq.n	80081fe <_printf_i+0x166>
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	079b      	lsls	r3, r3, #30
 80082aa:	d413      	bmi.n	80082d4 <_printf_i+0x23c>
 80082ac:	68e0      	ldr	r0, [r4, #12]
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	4298      	cmp	r0, r3
 80082b2:	bfb8      	it	lt
 80082b4:	4618      	movlt	r0, r3
 80082b6:	e7a4      	b.n	8008202 <_printf_i+0x16a>
 80082b8:	2301      	movs	r3, #1
 80082ba:	4632      	mov	r2, r6
 80082bc:	4649      	mov	r1, r9
 80082be:	4640      	mov	r0, r8
 80082c0:	47d0      	blx	sl
 80082c2:	3001      	adds	r0, #1
 80082c4:	d09b      	beq.n	80081fe <_printf_i+0x166>
 80082c6:	3501      	adds	r5, #1
 80082c8:	68e3      	ldr	r3, [r4, #12]
 80082ca:	9903      	ldr	r1, [sp, #12]
 80082cc:	1a5b      	subs	r3, r3, r1
 80082ce:	42ab      	cmp	r3, r5
 80082d0:	dcf2      	bgt.n	80082b8 <_printf_i+0x220>
 80082d2:	e7eb      	b.n	80082ac <_printf_i+0x214>
 80082d4:	2500      	movs	r5, #0
 80082d6:	f104 0619 	add.w	r6, r4, #25
 80082da:	e7f5      	b.n	80082c8 <_printf_i+0x230>
 80082dc:	0800a5ad 	.word	0x0800a5ad
 80082e0:	0800a5be 	.word	0x0800a5be

080082e4 <_scanf_chars>:
 80082e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e8:	4615      	mov	r5, r2
 80082ea:	688a      	ldr	r2, [r1, #8]
 80082ec:	4680      	mov	r8, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	b932      	cbnz	r2, 8008300 <_scanf_chars+0x1c>
 80082f2:	698a      	ldr	r2, [r1, #24]
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	bf0c      	ite	eq
 80082f8:	2201      	moveq	r2, #1
 80082fa:	f04f 32ff 	movne.w	r2, #4294967295
 80082fe:	608a      	str	r2, [r1, #8]
 8008300:	2700      	movs	r7, #0
 8008302:	6822      	ldr	r2, [r4, #0]
 8008304:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008394 <_scanf_chars+0xb0>
 8008308:	06d1      	lsls	r1, r2, #27
 800830a:	bf5f      	itttt	pl
 800830c:	681a      	ldrpl	r2, [r3, #0]
 800830e:	1d11      	addpl	r1, r2, #4
 8008310:	6019      	strpl	r1, [r3, #0]
 8008312:	6816      	ldrpl	r6, [r2, #0]
 8008314:	69a0      	ldr	r0, [r4, #24]
 8008316:	b188      	cbz	r0, 800833c <_scanf_chars+0x58>
 8008318:	2801      	cmp	r0, #1
 800831a:	d107      	bne.n	800832c <_scanf_chars+0x48>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	781a      	ldrb	r2, [r3, #0]
 8008320:	6963      	ldr	r3, [r4, #20]
 8008322:	5c9b      	ldrb	r3, [r3, r2]
 8008324:	b953      	cbnz	r3, 800833c <_scanf_chars+0x58>
 8008326:	2f00      	cmp	r7, #0
 8008328:	d031      	beq.n	800838e <_scanf_chars+0xaa>
 800832a:	e022      	b.n	8008372 <_scanf_chars+0x8e>
 800832c:	2802      	cmp	r0, #2
 800832e:	d120      	bne.n	8008372 <_scanf_chars+0x8e>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008338:	071b      	lsls	r3, r3, #28
 800833a:	d41a      	bmi.n	8008372 <_scanf_chars+0x8e>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	3701      	adds	r7, #1
 8008340:	06da      	lsls	r2, r3, #27
 8008342:	bf5e      	ittt	pl
 8008344:	682b      	ldrpl	r3, [r5, #0]
 8008346:	781b      	ldrbpl	r3, [r3, #0]
 8008348:	f806 3b01 	strbpl.w	r3, [r6], #1
 800834c:	682a      	ldr	r2, [r5, #0]
 800834e:	686b      	ldr	r3, [r5, #4]
 8008350:	3201      	adds	r2, #1
 8008352:	602a      	str	r2, [r5, #0]
 8008354:	68a2      	ldr	r2, [r4, #8]
 8008356:	3b01      	subs	r3, #1
 8008358:	3a01      	subs	r2, #1
 800835a:	606b      	str	r3, [r5, #4]
 800835c:	60a2      	str	r2, [r4, #8]
 800835e:	b142      	cbz	r2, 8008372 <_scanf_chars+0x8e>
 8008360:	2b00      	cmp	r3, #0
 8008362:	dcd7      	bgt.n	8008314 <_scanf_chars+0x30>
 8008364:	4629      	mov	r1, r5
 8008366:	4640      	mov	r0, r8
 8008368:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800836c:	4798      	blx	r3
 800836e:	2800      	cmp	r0, #0
 8008370:	d0d0      	beq.n	8008314 <_scanf_chars+0x30>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	f013 0310 	ands.w	r3, r3, #16
 8008378:	d105      	bne.n	8008386 <_scanf_chars+0xa2>
 800837a:	68e2      	ldr	r2, [r4, #12]
 800837c:	3201      	adds	r2, #1
 800837e:	60e2      	str	r2, [r4, #12]
 8008380:	69a2      	ldr	r2, [r4, #24]
 8008382:	b102      	cbz	r2, 8008386 <_scanf_chars+0xa2>
 8008384:	7033      	strb	r3, [r6, #0]
 8008386:	2000      	movs	r0, #0
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	443b      	add	r3, r7
 800838c:	6123      	str	r3, [r4, #16]
 800838e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008392:	bf00      	nop
 8008394:	0800a627 	.word	0x0800a627

08008398 <_scanf_i>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	460c      	mov	r4, r1
 800839e:	4698      	mov	r8, r3
 80083a0:	4b75      	ldr	r3, [pc, #468]	; (8008578 <_scanf_i+0x1e0>)
 80083a2:	b087      	sub	sp, #28
 80083a4:	4682      	mov	sl, r0
 80083a6:	4616      	mov	r6, r2
 80083a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083ac:	ab03      	add	r3, sp, #12
 80083ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083b2:	4b72      	ldr	r3, [pc, #456]	; (800857c <_scanf_i+0x1e4>)
 80083b4:	69a1      	ldr	r1, [r4, #24]
 80083b6:	4a72      	ldr	r2, [pc, #456]	; (8008580 <_scanf_i+0x1e8>)
 80083b8:	4627      	mov	r7, r4
 80083ba:	2903      	cmp	r1, #3
 80083bc:	bf18      	it	ne
 80083be:	461a      	movne	r2, r3
 80083c0:	68a3      	ldr	r3, [r4, #8]
 80083c2:	9201      	str	r2, [sp, #4]
 80083c4:	1e5a      	subs	r2, r3, #1
 80083c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80083ca:	bf81      	itttt	hi
 80083cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80083d0:	eb03 0905 	addhi.w	r9, r3, r5
 80083d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80083d8:	60a3      	strhi	r3, [r4, #8]
 80083da:	f857 3b1c 	ldr.w	r3, [r7], #28
 80083de:	bf98      	it	ls
 80083e0:	f04f 0900 	movls.w	r9, #0
 80083e4:	463d      	mov	r5, r7
 80083e6:	f04f 0b00 	mov.w	fp, #0
 80083ea:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80083ee:	6023      	str	r3, [r4, #0]
 80083f0:	6831      	ldr	r1, [r6, #0]
 80083f2:	ab03      	add	r3, sp, #12
 80083f4:	2202      	movs	r2, #2
 80083f6:	7809      	ldrb	r1, [r1, #0]
 80083f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80083fc:	f000 fc5e 	bl	8008cbc <memchr>
 8008400:	b328      	cbz	r0, 800844e <_scanf_i+0xb6>
 8008402:	f1bb 0f01 	cmp.w	fp, #1
 8008406:	d159      	bne.n	80084bc <_scanf_i+0x124>
 8008408:	6862      	ldr	r2, [r4, #4]
 800840a:	b92a      	cbnz	r2, 8008418 <_scanf_i+0x80>
 800840c:	2308      	movs	r3, #8
 800840e:	6822      	ldr	r2, [r4, #0]
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008416:	6022      	str	r2, [r4, #0]
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800841e:	6022      	str	r2, [r4, #0]
 8008420:	68a2      	ldr	r2, [r4, #8]
 8008422:	1e51      	subs	r1, r2, #1
 8008424:	60a1      	str	r1, [r4, #8]
 8008426:	b192      	cbz	r2, 800844e <_scanf_i+0xb6>
 8008428:	6832      	ldr	r2, [r6, #0]
 800842a:	1c51      	adds	r1, r2, #1
 800842c:	6031      	str	r1, [r6, #0]
 800842e:	7812      	ldrb	r2, [r2, #0]
 8008430:	f805 2b01 	strb.w	r2, [r5], #1
 8008434:	6872      	ldr	r2, [r6, #4]
 8008436:	3a01      	subs	r2, #1
 8008438:	2a00      	cmp	r2, #0
 800843a:	6072      	str	r2, [r6, #4]
 800843c:	dc07      	bgt.n	800844e <_scanf_i+0xb6>
 800843e:	4631      	mov	r1, r6
 8008440:	4650      	mov	r0, sl
 8008442:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008446:	4790      	blx	r2
 8008448:	2800      	cmp	r0, #0
 800844a:	f040 8085 	bne.w	8008558 <_scanf_i+0x1c0>
 800844e:	f10b 0b01 	add.w	fp, fp, #1
 8008452:	f1bb 0f03 	cmp.w	fp, #3
 8008456:	d1cb      	bne.n	80083f0 <_scanf_i+0x58>
 8008458:	6863      	ldr	r3, [r4, #4]
 800845a:	b90b      	cbnz	r3, 8008460 <_scanf_i+0xc8>
 800845c:	230a      	movs	r3, #10
 800845e:	6063      	str	r3, [r4, #4]
 8008460:	6863      	ldr	r3, [r4, #4]
 8008462:	4948      	ldr	r1, [pc, #288]	; (8008584 <_scanf_i+0x1ec>)
 8008464:	6960      	ldr	r0, [r4, #20]
 8008466:	1ac9      	subs	r1, r1, r3
 8008468:	f000 f8b6 	bl	80085d8 <__sccl>
 800846c:	f04f 0b00 	mov.w	fp, #0
 8008470:	68a3      	ldr	r3, [r4, #8]
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d03d      	beq.n	80084f4 <_scanf_i+0x15c>
 8008478:	6831      	ldr	r1, [r6, #0]
 800847a:	6960      	ldr	r0, [r4, #20]
 800847c:	f891 c000 	ldrb.w	ip, [r1]
 8008480:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008484:	2800      	cmp	r0, #0
 8008486:	d035      	beq.n	80084f4 <_scanf_i+0x15c>
 8008488:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800848c:	d124      	bne.n	80084d8 <_scanf_i+0x140>
 800848e:	0510      	lsls	r0, r2, #20
 8008490:	d522      	bpl.n	80084d8 <_scanf_i+0x140>
 8008492:	f10b 0b01 	add.w	fp, fp, #1
 8008496:	f1b9 0f00 	cmp.w	r9, #0
 800849a:	d003      	beq.n	80084a4 <_scanf_i+0x10c>
 800849c:	3301      	adds	r3, #1
 800849e:	f109 39ff 	add.w	r9, r9, #4294967295
 80084a2:	60a3      	str	r3, [r4, #8]
 80084a4:	6873      	ldr	r3, [r6, #4]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	6073      	str	r3, [r6, #4]
 80084ac:	dd1b      	ble.n	80084e6 <_scanf_i+0x14e>
 80084ae:	6833      	ldr	r3, [r6, #0]
 80084b0:	3301      	adds	r3, #1
 80084b2:	6033      	str	r3, [r6, #0]
 80084b4:	68a3      	ldr	r3, [r4, #8]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	60a3      	str	r3, [r4, #8]
 80084ba:	e7d9      	b.n	8008470 <_scanf_i+0xd8>
 80084bc:	f1bb 0f02 	cmp.w	fp, #2
 80084c0:	d1ae      	bne.n	8008420 <_scanf_i+0x88>
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80084c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80084cc:	d1bf      	bne.n	800844e <_scanf_i+0xb6>
 80084ce:	2310      	movs	r3, #16
 80084d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084d4:	6063      	str	r3, [r4, #4]
 80084d6:	e7a2      	b.n	800841e <_scanf_i+0x86>
 80084d8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80084dc:	6022      	str	r2, [r4, #0]
 80084de:	780b      	ldrb	r3, [r1, #0]
 80084e0:	f805 3b01 	strb.w	r3, [r5], #1
 80084e4:	e7de      	b.n	80084a4 <_scanf_i+0x10c>
 80084e6:	4631      	mov	r1, r6
 80084e8:	4650      	mov	r0, sl
 80084ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084ee:	4798      	blx	r3
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d0df      	beq.n	80084b4 <_scanf_i+0x11c>
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	05db      	lsls	r3, r3, #23
 80084f8:	d50d      	bpl.n	8008516 <_scanf_i+0x17e>
 80084fa:	42bd      	cmp	r5, r7
 80084fc:	d909      	bls.n	8008512 <_scanf_i+0x17a>
 80084fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008502:	4632      	mov	r2, r6
 8008504:	4650      	mov	r0, sl
 8008506:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800850a:	f105 39ff 	add.w	r9, r5, #4294967295
 800850e:	4798      	blx	r3
 8008510:	464d      	mov	r5, r9
 8008512:	42bd      	cmp	r5, r7
 8008514:	d02d      	beq.n	8008572 <_scanf_i+0x1da>
 8008516:	6822      	ldr	r2, [r4, #0]
 8008518:	f012 0210 	ands.w	r2, r2, #16
 800851c:	d113      	bne.n	8008546 <_scanf_i+0x1ae>
 800851e:	702a      	strb	r2, [r5, #0]
 8008520:	4639      	mov	r1, r7
 8008522:	6863      	ldr	r3, [r4, #4]
 8008524:	4650      	mov	r0, sl
 8008526:	9e01      	ldr	r6, [sp, #4]
 8008528:	47b0      	blx	r6
 800852a:	6821      	ldr	r1, [r4, #0]
 800852c:	f8d8 3000 	ldr.w	r3, [r8]
 8008530:	f011 0f20 	tst.w	r1, #32
 8008534:	d013      	beq.n	800855e <_scanf_i+0x1c6>
 8008536:	1d1a      	adds	r2, r3, #4
 8008538:	f8c8 2000 	str.w	r2, [r8]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6018      	str	r0, [r3, #0]
 8008540:	68e3      	ldr	r3, [r4, #12]
 8008542:	3301      	adds	r3, #1
 8008544:	60e3      	str	r3, [r4, #12]
 8008546:	2000      	movs	r0, #0
 8008548:	1bed      	subs	r5, r5, r7
 800854a:	44ab      	add	fp, r5
 800854c:	6925      	ldr	r5, [r4, #16]
 800854e:	445d      	add	r5, fp
 8008550:	6125      	str	r5, [r4, #16]
 8008552:	b007      	add	sp, #28
 8008554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008558:	f04f 0b00 	mov.w	fp, #0
 800855c:	e7ca      	b.n	80084f4 <_scanf_i+0x15c>
 800855e:	1d1a      	adds	r2, r3, #4
 8008560:	f8c8 2000 	str.w	r2, [r8]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f011 0f01 	tst.w	r1, #1
 800856a:	bf14      	ite	ne
 800856c:	8018      	strhne	r0, [r3, #0]
 800856e:	6018      	streq	r0, [r3, #0]
 8008570:	e7e6      	b.n	8008540 <_scanf_i+0x1a8>
 8008572:	2001      	movs	r0, #1
 8008574:	e7ed      	b.n	8008552 <_scanf_i+0x1ba>
 8008576:	bf00      	nop
 8008578:	0800a31c 	.word	0x0800a31c
 800857c:	08008851 	.word	0x08008851
 8008580:	08008769 	.word	0x08008769
 8008584:	0800a5e8 	.word	0x0800a5e8

08008588 <_read_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	2200      	movs	r2, #0
 8008592:	4d05      	ldr	r5, [pc, #20]	; (80085a8 <_read_r+0x20>)
 8008594:	602a      	str	r2, [r5, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	f7f9 fa7b 	bl	8001a92 <_read>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_read_r+0x1e>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_read_r+0x1e>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	200013c0 	.word	0x200013c0

080085ac <nan>:
 80085ac:	2000      	movs	r0, #0
 80085ae:	4901      	ldr	r1, [pc, #4]	; (80085b4 <nan+0x8>)
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	7ff80000 	.word	0x7ff80000

080085b8 <_sbrk_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	2300      	movs	r3, #0
 80085bc:	4d05      	ldr	r5, [pc, #20]	; (80085d4 <_sbrk_r+0x1c>)
 80085be:	4604      	mov	r4, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	602b      	str	r3, [r5, #0]
 80085c4:	f7f9 face 	bl	8001b64 <_sbrk>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d102      	bne.n	80085d2 <_sbrk_r+0x1a>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	b103      	cbz	r3, 80085d2 <_sbrk_r+0x1a>
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	200013c0 	.word	0x200013c0

080085d8 <__sccl>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	780b      	ldrb	r3, [r1, #0]
 80085dc:	4604      	mov	r4, r0
 80085de:	2b5e      	cmp	r3, #94	; 0x5e
 80085e0:	bf13      	iteet	ne
 80085e2:	2200      	movne	r2, #0
 80085e4:	2201      	moveq	r2, #1
 80085e6:	784b      	ldrbeq	r3, [r1, #1]
 80085e8:	1c48      	addne	r0, r1, #1
 80085ea:	bf08      	it	eq
 80085ec:	1c88      	addeq	r0, r1, #2
 80085ee:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80085f2:	1e61      	subs	r1, r4, #1
 80085f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80085f8:	42a9      	cmp	r1, r5
 80085fa:	d1fb      	bne.n	80085f4 <__sccl+0x1c>
 80085fc:	b90b      	cbnz	r3, 8008602 <__sccl+0x2a>
 80085fe:	3801      	subs	r0, #1
 8008600:	bd70      	pop	{r4, r5, r6, pc}
 8008602:	f082 0201 	eor.w	r2, r2, #1
 8008606:	4605      	mov	r5, r0
 8008608:	54e2      	strb	r2, [r4, r3]
 800860a:	4628      	mov	r0, r5
 800860c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008610:	292d      	cmp	r1, #45	; 0x2d
 8008612:	d006      	beq.n	8008622 <__sccl+0x4a>
 8008614:	295d      	cmp	r1, #93	; 0x5d
 8008616:	d0f3      	beq.n	8008600 <__sccl+0x28>
 8008618:	b909      	cbnz	r1, 800861e <__sccl+0x46>
 800861a:	4628      	mov	r0, r5
 800861c:	e7f0      	b.n	8008600 <__sccl+0x28>
 800861e:	460b      	mov	r3, r1
 8008620:	e7f1      	b.n	8008606 <__sccl+0x2e>
 8008622:	786e      	ldrb	r6, [r5, #1]
 8008624:	2e5d      	cmp	r6, #93	; 0x5d
 8008626:	d0fa      	beq.n	800861e <__sccl+0x46>
 8008628:	42b3      	cmp	r3, r6
 800862a:	dcf8      	bgt.n	800861e <__sccl+0x46>
 800862c:	4619      	mov	r1, r3
 800862e:	3502      	adds	r5, #2
 8008630:	3101      	adds	r1, #1
 8008632:	428e      	cmp	r6, r1
 8008634:	5462      	strb	r2, [r4, r1]
 8008636:	dcfb      	bgt.n	8008630 <__sccl+0x58>
 8008638:	1af1      	subs	r1, r6, r3
 800863a:	3901      	subs	r1, #1
 800863c:	42b3      	cmp	r3, r6
 800863e:	bfa8      	it	ge
 8008640:	2100      	movge	r1, #0
 8008642:	1c58      	adds	r0, r3, #1
 8008644:	1843      	adds	r3, r0, r1
 8008646:	e7e0      	b.n	800860a <__sccl+0x32>

08008648 <strncmp>:
 8008648:	4603      	mov	r3, r0
 800864a:	b510      	push	{r4, lr}
 800864c:	b172      	cbz	r2, 800866c <strncmp+0x24>
 800864e:	3901      	subs	r1, #1
 8008650:	1884      	adds	r4, r0, r2
 8008652:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008656:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800865a:	4290      	cmp	r0, r2
 800865c:	d101      	bne.n	8008662 <strncmp+0x1a>
 800865e:	42a3      	cmp	r3, r4
 8008660:	d101      	bne.n	8008666 <strncmp+0x1e>
 8008662:	1a80      	subs	r0, r0, r2
 8008664:	bd10      	pop	{r4, pc}
 8008666:	2800      	cmp	r0, #0
 8008668:	d1f3      	bne.n	8008652 <strncmp+0xa>
 800866a:	e7fa      	b.n	8008662 <strncmp+0x1a>
 800866c:	4610      	mov	r0, r2
 800866e:	e7f9      	b.n	8008664 <strncmp+0x1c>

08008670 <_strtol_l.constprop.0>:
 8008670:	2b01      	cmp	r3, #1
 8008672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008676:	4680      	mov	r8, r0
 8008678:	d001      	beq.n	800867e <_strtol_l.constprop.0+0xe>
 800867a:	2b24      	cmp	r3, #36	; 0x24
 800867c:	d906      	bls.n	800868c <_strtol_l.constprop.0+0x1c>
 800867e:	f7fd f963 	bl	8005948 <__errno>
 8008682:	2316      	movs	r3, #22
 8008684:	6003      	str	r3, [r0, #0]
 8008686:	2000      	movs	r0, #0
 8008688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868c:	460d      	mov	r5, r1
 800868e:	4f35      	ldr	r7, [pc, #212]	; (8008764 <_strtol_l.constprop.0+0xf4>)
 8008690:	4628      	mov	r0, r5
 8008692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008696:	5de6      	ldrb	r6, [r4, r7]
 8008698:	f016 0608 	ands.w	r6, r6, #8
 800869c:	d1f8      	bne.n	8008690 <_strtol_l.constprop.0+0x20>
 800869e:	2c2d      	cmp	r4, #45	; 0x2d
 80086a0:	d12f      	bne.n	8008702 <_strtol_l.constprop.0+0x92>
 80086a2:	2601      	movs	r6, #1
 80086a4:	782c      	ldrb	r4, [r5, #0]
 80086a6:	1c85      	adds	r5, r0, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d057      	beq.n	800875c <_strtol_l.constprop.0+0xec>
 80086ac:	2b10      	cmp	r3, #16
 80086ae:	d109      	bne.n	80086c4 <_strtol_l.constprop.0+0x54>
 80086b0:	2c30      	cmp	r4, #48	; 0x30
 80086b2:	d107      	bne.n	80086c4 <_strtol_l.constprop.0+0x54>
 80086b4:	7828      	ldrb	r0, [r5, #0]
 80086b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80086ba:	2858      	cmp	r0, #88	; 0x58
 80086bc:	d149      	bne.n	8008752 <_strtol_l.constprop.0+0xe2>
 80086be:	2310      	movs	r3, #16
 80086c0:	786c      	ldrb	r4, [r5, #1]
 80086c2:	3502      	adds	r5, #2
 80086c4:	2700      	movs	r7, #0
 80086c6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80086ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 80086ce:	fbbe f9f3 	udiv	r9, lr, r3
 80086d2:	4638      	mov	r0, r7
 80086d4:	fb03 ea19 	mls	sl, r3, r9, lr
 80086d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80086dc:	f1bc 0f09 	cmp.w	ip, #9
 80086e0:	d814      	bhi.n	800870c <_strtol_l.constprop.0+0x9c>
 80086e2:	4664      	mov	r4, ip
 80086e4:	42a3      	cmp	r3, r4
 80086e6:	dd22      	ble.n	800872e <_strtol_l.constprop.0+0xbe>
 80086e8:	2f00      	cmp	r7, #0
 80086ea:	db1d      	blt.n	8008728 <_strtol_l.constprop.0+0xb8>
 80086ec:	4581      	cmp	r9, r0
 80086ee:	d31b      	bcc.n	8008728 <_strtol_l.constprop.0+0xb8>
 80086f0:	d101      	bne.n	80086f6 <_strtol_l.constprop.0+0x86>
 80086f2:	45a2      	cmp	sl, r4
 80086f4:	db18      	blt.n	8008728 <_strtol_l.constprop.0+0xb8>
 80086f6:	2701      	movs	r7, #1
 80086f8:	fb00 4003 	mla	r0, r0, r3, r4
 80086fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008700:	e7ea      	b.n	80086d8 <_strtol_l.constprop.0+0x68>
 8008702:	2c2b      	cmp	r4, #43	; 0x2b
 8008704:	bf04      	itt	eq
 8008706:	782c      	ldrbeq	r4, [r5, #0]
 8008708:	1c85      	addeq	r5, r0, #2
 800870a:	e7cd      	b.n	80086a8 <_strtol_l.constprop.0+0x38>
 800870c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008710:	f1bc 0f19 	cmp.w	ip, #25
 8008714:	d801      	bhi.n	800871a <_strtol_l.constprop.0+0xaa>
 8008716:	3c37      	subs	r4, #55	; 0x37
 8008718:	e7e4      	b.n	80086e4 <_strtol_l.constprop.0+0x74>
 800871a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800871e:	f1bc 0f19 	cmp.w	ip, #25
 8008722:	d804      	bhi.n	800872e <_strtol_l.constprop.0+0xbe>
 8008724:	3c57      	subs	r4, #87	; 0x57
 8008726:	e7dd      	b.n	80086e4 <_strtol_l.constprop.0+0x74>
 8008728:	f04f 37ff 	mov.w	r7, #4294967295
 800872c:	e7e6      	b.n	80086fc <_strtol_l.constprop.0+0x8c>
 800872e:	2f00      	cmp	r7, #0
 8008730:	da07      	bge.n	8008742 <_strtol_l.constprop.0+0xd2>
 8008732:	2322      	movs	r3, #34	; 0x22
 8008734:	4670      	mov	r0, lr
 8008736:	f8c8 3000 	str.w	r3, [r8]
 800873a:	2a00      	cmp	r2, #0
 800873c:	d0a4      	beq.n	8008688 <_strtol_l.constprop.0+0x18>
 800873e:	1e69      	subs	r1, r5, #1
 8008740:	e005      	b.n	800874e <_strtol_l.constprop.0+0xde>
 8008742:	b106      	cbz	r6, 8008746 <_strtol_l.constprop.0+0xd6>
 8008744:	4240      	negs	r0, r0
 8008746:	2a00      	cmp	r2, #0
 8008748:	d09e      	beq.n	8008688 <_strtol_l.constprop.0+0x18>
 800874a:	2f00      	cmp	r7, #0
 800874c:	d1f7      	bne.n	800873e <_strtol_l.constprop.0+0xce>
 800874e:	6011      	str	r1, [r2, #0]
 8008750:	e79a      	b.n	8008688 <_strtol_l.constprop.0+0x18>
 8008752:	2430      	movs	r4, #48	; 0x30
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1b5      	bne.n	80086c4 <_strtol_l.constprop.0+0x54>
 8008758:	2308      	movs	r3, #8
 800875a:	e7b3      	b.n	80086c4 <_strtol_l.constprop.0+0x54>
 800875c:	2c30      	cmp	r4, #48	; 0x30
 800875e:	d0a9      	beq.n	80086b4 <_strtol_l.constprop.0+0x44>
 8008760:	230a      	movs	r3, #10
 8008762:	e7af      	b.n	80086c4 <_strtol_l.constprop.0+0x54>
 8008764:	0800a627 	.word	0x0800a627

08008768 <_strtol_r>:
 8008768:	f7ff bf82 	b.w	8008670 <_strtol_l.constprop.0>

0800876c <_strtoul_l.constprop.0>:
 800876c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008770:	4686      	mov	lr, r0
 8008772:	460d      	mov	r5, r1
 8008774:	4f35      	ldr	r7, [pc, #212]	; (800884c <_strtoul_l.constprop.0+0xe0>)
 8008776:	4628      	mov	r0, r5
 8008778:	f815 4b01 	ldrb.w	r4, [r5], #1
 800877c:	5de6      	ldrb	r6, [r4, r7]
 800877e:	f016 0608 	ands.w	r6, r6, #8
 8008782:	d1f8      	bne.n	8008776 <_strtoul_l.constprop.0+0xa>
 8008784:	2c2d      	cmp	r4, #45	; 0x2d
 8008786:	d12f      	bne.n	80087e8 <_strtoul_l.constprop.0+0x7c>
 8008788:	2601      	movs	r6, #1
 800878a:	782c      	ldrb	r4, [r5, #0]
 800878c:	1c85      	adds	r5, r0, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d057      	beq.n	8008842 <_strtoul_l.constprop.0+0xd6>
 8008792:	2b10      	cmp	r3, #16
 8008794:	d109      	bne.n	80087aa <_strtoul_l.constprop.0+0x3e>
 8008796:	2c30      	cmp	r4, #48	; 0x30
 8008798:	d107      	bne.n	80087aa <_strtoul_l.constprop.0+0x3e>
 800879a:	7828      	ldrb	r0, [r5, #0]
 800879c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80087a0:	2858      	cmp	r0, #88	; 0x58
 80087a2:	d149      	bne.n	8008838 <_strtoul_l.constprop.0+0xcc>
 80087a4:	2310      	movs	r3, #16
 80087a6:	786c      	ldrb	r4, [r5, #1]
 80087a8:	3502      	adds	r5, #2
 80087aa:	f04f 38ff 	mov.w	r8, #4294967295
 80087ae:	fbb8 f8f3 	udiv	r8, r8, r3
 80087b2:	2700      	movs	r7, #0
 80087b4:	fb03 f908 	mul.w	r9, r3, r8
 80087b8:	4638      	mov	r0, r7
 80087ba:	ea6f 0909 	mvn.w	r9, r9
 80087be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80087c2:	f1bc 0f09 	cmp.w	ip, #9
 80087c6:	d814      	bhi.n	80087f2 <_strtoul_l.constprop.0+0x86>
 80087c8:	4664      	mov	r4, ip
 80087ca:	42a3      	cmp	r3, r4
 80087cc:	dd22      	ble.n	8008814 <_strtoul_l.constprop.0+0xa8>
 80087ce:	2f00      	cmp	r7, #0
 80087d0:	db1d      	blt.n	800880e <_strtoul_l.constprop.0+0xa2>
 80087d2:	4580      	cmp	r8, r0
 80087d4:	d31b      	bcc.n	800880e <_strtoul_l.constprop.0+0xa2>
 80087d6:	d101      	bne.n	80087dc <_strtoul_l.constprop.0+0x70>
 80087d8:	45a1      	cmp	r9, r4
 80087da:	db18      	blt.n	800880e <_strtoul_l.constprop.0+0xa2>
 80087dc:	2701      	movs	r7, #1
 80087de:	fb00 4003 	mla	r0, r0, r3, r4
 80087e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087e6:	e7ea      	b.n	80087be <_strtoul_l.constprop.0+0x52>
 80087e8:	2c2b      	cmp	r4, #43	; 0x2b
 80087ea:	bf04      	itt	eq
 80087ec:	782c      	ldrbeq	r4, [r5, #0]
 80087ee:	1c85      	addeq	r5, r0, #2
 80087f0:	e7cd      	b.n	800878e <_strtoul_l.constprop.0+0x22>
 80087f2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80087f6:	f1bc 0f19 	cmp.w	ip, #25
 80087fa:	d801      	bhi.n	8008800 <_strtoul_l.constprop.0+0x94>
 80087fc:	3c37      	subs	r4, #55	; 0x37
 80087fe:	e7e4      	b.n	80087ca <_strtoul_l.constprop.0+0x5e>
 8008800:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008804:	f1bc 0f19 	cmp.w	ip, #25
 8008808:	d804      	bhi.n	8008814 <_strtoul_l.constprop.0+0xa8>
 800880a:	3c57      	subs	r4, #87	; 0x57
 800880c:	e7dd      	b.n	80087ca <_strtoul_l.constprop.0+0x5e>
 800880e:	f04f 37ff 	mov.w	r7, #4294967295
 8008812:	e7e6      	b.n	80087e2 <_strtoul_l.constprop.0+0x76>
 8008814:	2f00      	cmp	r7, #0
 8008816:	da07      	bge.n	8008828 <_strtoul_l.constprop.0+0xbc>
 8008818:	2322      	movs	r3, #34	; 0x22
 800881a:	f04f 30ff 	mov.w	r0, #4294967295
 800881e:	f8ce 3000 	str.w	r3, [lr]
 8008822:	b932      	cbnz	r2, 8008832 <_strtoul_l.constprop.0+0xc6>
 8008824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008828:	b106      	cbz	r6, 800882c <_strtoul_l.constprop.0+0xc0>
 800882a:	4240      	negs	r0, r0
 800882c:	2a00      	cmp	r2, #0
 800882e:	d0f9      	beq.n	8008824 <_strtoul_l.constprop.0+0xb8>
 8008830:	b107      	cbz	r7, 8008834 <_strtoul_l.constprop.0+0xc8>
 8008832:	1e69      	subs	r1, r5, #1
 8008834:	6011      	str	r1, [r2, #0]
 8008836:	e7f5      	b.n	8008824 <_strtoul_l.constprop.0+0xb8>
 8008838:	2430      	movs	r4, #48	; 0x30
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1b5      	bne.n	80087aa <_strtoul_l.constprop.0+0x3e>
 800883e:	2308      	movs	r3, #8
 8008840:	e7b3      	b.n	80087aa <_strtoul_l.constprop.0+0x3e>
 8008842:	2c30      	cmp	r4, #48	; 0x30
 8008844:	d0a9      	beq.n	800879a <_strtoul_l.constprop.0+0x2e>
 8008846:	230a      	movs	r3, #10
 8008848:	e7af      	b.n	80087aa <_strtoul_l.constprop.0+0x3e>
 800884a:	bf00      	nop
 800884c:	0800a627 	.word	0x0800a627

08008850 <_strtoul_r>:
 8008850:	f7ff bf8c 	b.w	800876c <_strtoul_l.constprop.0>

08008854 <__submore>:
 8008854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008858:	460c      	mov	r4, r1
 800885a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800885c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008860:	4299      	cmp	r1, r3
 8008862:	d11b      	bne.n	800889c <__submore+0x48>
 8008864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008868:	f7ff f802 	bl	8007870 <_malloc_r>
 800886c:	b918      	cbnz	r0, 8008876 <__submore+0x22>
 800886e:	f04f 30ff 	mov.w	r0, #4294967295
 8008872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800887a:	63a3      	str	r3, [r4, #56]	; 0x38
 800887c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008880:	6360      	str	r0, [r4, #52]	; 0x34
 8008882:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008886:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800888a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800888e:	7043      	strb	r3, [r0, #1]
 8008890:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008894:	7003      	strb	r3, [r0, #0]
 8008896:	6020      	str	r0, [r4, #0]
 8008898:	2000      	movs	r0, #0
 800889a:	e7ea      	b.n	8008872 <__submore+0x1e>
 800889c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800889e:	0077      	lsls	r7, r6, #1
 80088a0:	463a      	mov	r2, r7
 80088a2:	f000 fa87 	bl	8008db4 <_realloc_r>
 80088a6:	4605      	mov	r5, r0
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d0e0      	beq.n	800886e <__submore+0x1a>
 80088ac:	eb00 0806 	add.w	r8, r0, r6
 80088b0:	4601      	mov	r1, r0
 80088b2:	4632      	mov	r2, r6
 80088b4:	4640      	mov	r0, r8
 80088b6:	f7fd f871 	bl	800599c <memcpy>
 80088ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80088be:	f8c4 8000 	str.w	r8, [r4]
 80088c2:	e7e9      	b.n	8008898 <__submore+0x44>

080088c4 <__ascii_wctomb>:
 80088c4:	4603      	mov	r3, r0
 80088c6:	4608      	mov	r0, r1
 80088c8:	b141      	cbz	r1, 80088dc <__ascii_wctomb+0x18>
 80088ca:	2aff      	cmp	r2, #255	; 0xff
 80088cc:	d904      	bls.n	80088d8 <__ascii_wctomb+0x14>
 80088ce:	228a      	movs	r2, #138	; 0x8a
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	4770      	bx	lr
 80088d8:	2001      	movs	r0, #1
 80088da:	700a      	strb	r2, [r1, #0]
 80088dc:	4770      	bx	lr
	...

080088e0 <__assert_func>:
 80088e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088e2:	4614      	mov	r4, r2
 80088e4:	461a      	mov	r2, r3
 80088e6:	4b09      	ldr	r3, [pc, #36]	; (800890c <__assert_func+0x2c>)
 80088e8:	4605      	mov	r5, r0
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68d8      	ldr	r0, [r3, #12]
 80088ee:	b14c      	cbz	r4, 8008904 <__assert_func+0x24>
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <__assert_func+0x30>)
 80088f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088f6:	9100      	str	r1, [sp, #0]
 80088f8:	462b      	mov	r3, r5
 80088fa:	4906      	ldr	r1, [pc, #24]	; (8008914 <__assert_func+0x34>)
 80088fc:	f000 f9a2 	bl	8008c44 <fiprintf>
 8008900:	f000 fc9e 	bl	8009240 <abort>
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <__assert_func+0x38>)
 8008906:	461c      	mov	r4, r3
 8008908:	e7f3      	b.n	80088f2 <__assert_func+0x12>
 800890a:	bf00      	nop
 800890c:	20000020 	.word	0x20000020
 8008910:	0800a5ea 	.word	0x0800a5ea
 8008914:	0800a5f7 	.word	0x0800a5f7
 8008918:	0800a625 	.word	0x0800a625

0800891c <__sflush_r>:
 800891c:	898a      	ldrh	r2, [r1, #12]
 800891e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008920:	4605      	mov	r5, r0
 8008922:	0710      	lsls	r0, r2, #28
 8008924:	460c      	mov	r4, r1
 8008926:	d457      	bmi.n	80089d8 <__sflush_r+0xbc>
 8008928:	684b      	ldr	r3, [r1, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	dc04      	bgt.n	8008938 <__sflush_r+0x1c>
 800892e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008930:	2b00      	cmp	r3, #0
 8008932:	dc01      	bgt.n	8008938 <__sflush_r+0x1c>
 8008934:	2000      	movs	r0, #0
 8008936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800893a:	2e00      	cmp	r6, #0
 800893c:	d0fa      	beq.n	8008934 <__sflush_r+0x18>
 800893e:	2300      	movs	r3, #0
 8008940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008944:	682f      	ldr	r7, [r5, #0]
 8008946:	602b      	str	r3, [r5, #0]
 8008948:	d032      	beq.n	80089b0 <__sflush_r+0x94>
 800894a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	075a      	lsls	r2, r3, #29
 8008950:	d505      	bpl.n	800895e <__sflush_r+0x42>
 8008952:	6863      	ldr	r3, [r4, #4]
 8008954:	1ac0      	subs	r0, r0, r3
 8008956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008958:	b10b      	cbz	r3, 800895e <__sflush_r+0x42>
 800895a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800895c:	1ac0      	subs	r0, r0, r3
 800895e:	2300      	movs	r3, #0
 8008960:	4602      	mov	r2, r0
 8008962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008964:	4628      	mov	r0, r5
 8008966:	6a21      	ldr	r1, [r4, #32]
 8008968:	47b0      	blx	r6
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	d106      	bne.n	800897e <__sflush_r+0x62>
 8008970:	6829      	ldr	r1, [r5, #0]
 8008972:	291d      	cmp	r1, #29
 8008974:	d82c      	bhi.n	80089d0 <__sflush_r+0xb4>
 8008976:	4a29      	ldr	r2, [pc, #164]	; (8008a1c <__sflush_r+0x100>)
 8008978:	40ca      	lsrs	r2, r1
 800897a:	07d6      	lsls	r6, r2, #31
 800897c:	d528      	bpl.n	80089d0 <__sflush_r+0xb4>
 800897e:	2200      	movs	r2, #0
 8008980:	6062      	str	r2, [r4, #4]
 8008982:	6922      	ldr	r2, [r4, #16]
 8008984:	04d9      	lsls	r1, r3, #19
 8008986:	6022      	str	r2, [r4, #0]
 8008988:	d504      	bpl.n	8008994 <__sflush_r+0x78>
 800898a:	1c42      	adds	r2, r0, #1
 800898c:	d101      	bne.n	8008992 <__sflush_r+0x76>
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	b903      	cbnz	r3, 8008994 <__sflush_r+0x78>
 8008992:	6560      	str	r0, [r4, #84]	; 0x54
 8008994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008996:	602f      	str	r7, [r5, #0]
 8008998:	2900      	cmp	r1, #0
 800899a:	d0cb      	beq.n	8008934 <__sflush_r+0x18>
 800899c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089a0:	4299      	cmp	r1, r3
 80089a2:	d002      	beq.n	80089aa <__sflush_r+0x8e>
 80089a4:	4628      	mov	r0, r5
 80089a6:	f000 f9bd 	bl	8008d24 <_free_r>
 80089aa:	2000      	movs	r0, #0
 80089ac:	6360      	str	r0, [r4, #52]	; 0x34
 80089ae:	e7c2      	b.n	8008936 <__sflush_r+0x1a>
 80089b0:	6a21      	ldr	r1, [r4, #32]
 80089b2:	2301      	movs	r3, #1
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b0      	blx	r6
 80089b8:	1c41      	adds	r1, r0, #1
 80089ba:	d1c7      	bne.n	800894c <__sflush_r+0x30>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0c4      	beq.n	800894c <__sflush_r+0x30>
 80089c2:	2b1d      	cmp	r3, #29
 80089c4:	d001      	beq.n	80089ca <__sflush_r+0xae>
 80089c6:	2b16      	cmp	r3, #22
 80089c8:	d101      	bne.n	80089ce <__sflush_r+0xb2>
 80089ca:	602f      	str	r7, [r5, #0]
 80089cc:	e7b2      	b.n	8008934 <__sflush_r+0x18>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	e7ae      	b.n	8008936 <__sflush_r+0x1a>
 80089d8:	690f      	ldr	r7, [r1, #16]
 80089da:	2f00      	cmp	r7, #0
 80089dc:	d0aa      	beq.n	8008934 <__sflush_r+0x18>
 80089de:	0793      	lsls	r3, r2, #30
 80089e0:	bf18      	it	ne
 80089e2:	2300      	movne	r3, #0
 80089e4:	680e      	ldr	r6, [r1, #0]
 80089e6:	bf08      	it	eq
 80089e8:	694b      	ldreq	r3, [r1, #20]
 80089ea:	1bf6      	subs	r6, r6, r7
 80089ec:	600f      	str	r7, [r1, #0]
 80089ee:	608b      	str	r3, [r1, #8]
 80089f0:	2e00      	cmp	r6, #0
 80089f2:	dd9f      	ble.n	8008934 <__sflush_r+0x18>
 80089f4:	4633      	mov	r3, r6
 80089f6:	463a      	mov	r2, r7
 80089f8:	4628      	mov	r0, r5
 80089fa:	6a21      	ldr	r1, [r4, #32]
 80089fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008a00:	47e0      	blx	ip
 8008a02:	2800      	cmp	r0, #0
 8008a04:	dc06      	bgt.n	8008a14 <__sflush_r+0xf8>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	e790      	b.n	8008936 <__sflush_r+0x1a>
 8008a14:	4407      	add	r7, r0
 8008a16:	1a36      	subs	r6, r6, r0
 8008a18:	e7ea      	b.n	80089f0 <__sflush_r+0xd4>
 8008a1a:	bf00      	nop
 8008a1c:	20400001 	.word	0x20400001

08008a20 <_fflush_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	690b      	ldr	r3, [r1, #16]
 8008a24:	4605      	mov	r5, r0
 8008a26:	460c      	mov	r4, r1
 8008a28:	b913      	cbnz	r3, 8008a30 <_fflush_r+0x10>
 8008a2a:	2500      	movs	r5, #0
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	b118      	cbz	r0, 8008a3a <_fflush_r+0x1a>
 8008a32:	6983      	ldr	r3, [r0, #24]
 8008a34:	b90b      	cbnz	r3, 8008a3a <_fflush_r+0x1a>
 8008a36:	f000 f887 	bl	8008b48 <__sinit>
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <_fflush_r+0x6c>)
 8008a3c:	429c      	cmp	r4, r3
 8008a3e:	d11b      	bne.n	8008a78 <_fflush_r+0x58>
 8008a40:	686c      	ldr	r4, [r5, #4]
 8008a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0ef      	beq.n	8008a2a <_fflush_r+0xa>
 8008a4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a4c:	07d0      	lsls	r0, r2, #31
 8008a4e:	d404      	bmi.n	8008a5a <_fflush_r+0x3a>
 8008a50:	0599      	lsls	r1, r3, #22
 8008a52:	d402      	bmi.n	8008a5a <_fflush_r+0x3a>
 8008a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a56:	f000 f927 	bl	8008ca8 <__retarget_lock_acquire_recursive>
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	f7ff ff5d 	bl	800891c <__sflush_r>
 8008a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a64:	4605      	mov	r5, r0
 8008a66:	07da      	lsls	r2, r3, #31
 8008a68:	d4e0      	bmi.n	8008a2c <_fflush_r+0xc>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	059b      	lsls	r3, r3, #22
 8008a6e:	d4dd      	bmi.n	8008a2c <_fflush_r+0xc>
 8008a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a72:	f000 f91a 	bl	8008caa <__retarget_lock_release_recursive>
 8008a76:	e7d9      	b.n	8008a2c <_fflush_r+0xc>
 8008a78:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <_fflush_r+0x70>)
 8008a7a:	429c      	cmp	r4, r3
 8008a7c:	d101      	bne.n	8008a82 <_fflush_r+0x62>
 8008a7e:	68ac      	ldr	r4, [r5, #8]
 8008a80:	e7df      	b.n	8008a42 <_fflush_r+0x22>
 8008a82:	4b04      	ldr	r3, [pc, #16]	; (8008a94 <_fflush_r+0x74>)
 8008a84:	429c      	cmp	r4, r3
 8008a86:	bf08      	it	eq
 8008a88:	68ec      	ldreq	r4, [r5, #12]
 8008a8a:	e7da      	b.n	8008a42 <_fflush_r+0x22>
 8008a8c:	0800a748 	.word	0x0800a748
 8008a90:	0800a768 	.word	0x0800a768
 8008a94:	0800a728 	.word	0x0800a728

08008a98 <std>:
 8008a98:	2300      	movs	r3, #0
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aa6:	6083      	str	r3, [r0, #8]
 8008aa8:	8181      	strh	r1, [r0, #12]
 8008aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8008aac:	81c2      	strh	r2, [r0, #14]
 8008aae:	6183      	str	r3, [r0, #24]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	2208      	movs	r2, #8
 8008ab4:	305c      	adds	r0, #92	; 0x5c
 8008ab6:	f7fc ff7f 	bl	80059b8 <memset>
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <std+0x38>)
 8008abc:	6224      	str	r4, [r4, #32]
 8008abe:	6263      	str	r3, [r4, #36]	; 0x24
 8008ac0:	4b04      	ldr	r3, [pc, #16]	; (8008ad4 <std+0x3c>)
 8008ac2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ac4:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <std+0x40>)
 8008ac6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ac8:	4b04      	ldr	r3, [pc, #16]	; (8008adc <std+0x44>)
 8008aca:	6323      	str	r3, [r4, #48]	; 0x30
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	bf00      	nop
 8008ad0:	08005a5d 	.word	0x08005a5d
 8008ad4:	08005a83 	.word	0x08005a83
 8008ad8:	08005abb 	.word	0x08005abb
 8008adc:	08005adf 	.word	0x08005adf

08008ae0 <_cleanup_r>:
 8008ae0:	4901      	ldr	r1, [pc, #4]	; (8008ae8 <_cleanup_r+0x8>)
 8008ae2:	f000 b8c1 	b.w	8008c68 <_fwalk_reent>
 8008ae6:	bf00      	nop
 8008ae8:	08008a21 	.word	0x08008a21

08008aec <__sfmoreglue>:
 8008aec:	2268      	movs	r2, #104	; 0x68
 8008aee:	b570      	push	{r4, r5, r6, lr}
 8008af0:	1e4d      	subs	r5, r1, #1
 8008af2:	4355      	muls	r5, r2
 8008af4:	460e      	mov	r6, r1
 8008af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008afa:	f7fe feb9 	bl	8007870 <_malloc_r>
 8008afe:	4604      	mov	r4, r0
 8008b00:	b140      	cbz	r0, 8008b14 <__sfmoreglue+0x28>
 8008b02:	2100      	movs	r1, #0
 8008b04:	e9c0 1600 	strd	r1, r6, [r0]
 8008b08:	300c      	adds	r0, #12
 8008b0a:	60a0      	str	r0, [r4, #8]
 8008b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b10:	f7fc ff52 	bl	80059b8 <memset>
 8008b14:	4620      	mov	r0, r4
 8008b16:	bd70      	pop	{r4, r5, r6, pc}

08008b18 <__sfp_lock_acquire>:
 8008b18:	4801      	ldr	r0, [pc, #4]	; (8008b20 <__sfp_lock_acquire+0x8>)
 8008b1a:	f000 b8c5 	b.w	8008ca8 <__retarget_lock_acquire_recursive>
 8008b1e:	bf00      	nop
 8008b20:	200013c5 	.word	0x200013c5

08008b24 <__sfp_lock_release>:
 8008b24:	4801      	ldr	r0, [pc, #4]	; (8008b2c <__sfp_lock_release+0x8>)
 8008b26:	f000 b8c0 	b.w	8008caa <__retarget_lock_release_recursive>
 8008b2a:	bf00      	nop
 8008b2c:	200013c5 	.word	0x200013c5

08008b30 <__sinit_lock_acquire>:
 8008b30:	4801      	ldr	r0, [pc, #4]	; (8008b38 <__sinit_lock_acquire+0x8>)
 8008b32:	f000 b8b9 	b.w	8008ca8 <__retarget_lock_acquire_recursive>
 8008b36:	bf00      	nop
 8008b38:	200013c6 	.word	0x200013c6

08008b3c <__sinit_lock_release>:
 8008b3c:	4801      	ldr	r0, [pc, #4]	; (8008b44 <__sinit_lock_release+0x8>)
 8008b3e:	f000 b8b4 	b.w	8008caa <__retarget_lock_release_recursive>
 8008b42:	bf00      	nop
 8008b44:	200013c6 	.word	0x200013c6

08008b48 <__sinit>:
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	f7ff fff0 	bl	8008b30 <__sinit_lock_acquire>
 8008b50:	69a3      	ldr	r3, [r4, #24]
 8008b52:	b11b      	cbz	r3, 8008b5c <__sinit+0x14>
 8008b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b58:	f7ff bff0 	b.w	8008b3c <__sinit_lock_release>
 8008b5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b60:	6523      	str	r3, [r4, #80]	; 0x50
 8008b62:	4b13      	ldr	r3, [pc, #76]	; (8008bb0 <__sinit+0x68>)
 8008b64:	4a13      	ldr	r2, [pc, #76]	; (8008bb4 <__sinit+0x6c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	bf08      	it	eq
 8008b6e:	2301      	moveq	r3, #1
 8008b70:	4620      	mov	r0, r4
 8008b72:	bf08      	it	eq
 8008b74:	61a3      	streq	r3, [r4, #24]
 8008b76:	f000 f81f 	bl	8008bb8 <__sfp>
 8008b7a:	6060      	str	r0, [r4, #4]
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 f81b 	bl	8008bb8 <__sfp>
 8008b82:	60a0      	str	r0, [r4, #8]
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 f817 	bl	8008bb8 <__sfp>
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2104      	movs	r1, #4
 8008b8e:	60e0      	str	r0, [r4, #12]
 8008b90:	6860      	ldr	r0, [r4, #4]
 8008b92:	f7ff ff81 	bl	8008a98 <std>
 8008b96:	2201      	movs	r2, #1
 8008b98:	2109      	movs	r1, #9
 8008b9a:	68a0      	ldr	r0, [r4, #8]
 8008b9c:	f7ff ff7c 	bl	8008a98 <std>
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	2112      	movs	r1, #18
 8008ba4:	68e0      	ldr	r0, [r4, #12]
 8008ba6:	f7ff ff77 	bl	8008a98 <std>
 8008baa:	2301      	movs	r3, #1
 8008bac:	61a3      	str	r3, [r4, #24]
 8008bae:	e7d1      	b.n	8008b54 <__sinit+0xc>
 8008bb0:	0800a340 	.word	0x0800a340
 8008bb4:	08008ae1 	.word	0x08008ae1

08008bb8 <__sfp>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	4607      	mov	r7, r0
 8008bbc:	f7ff ffac 	bl	8008b18 <__sfp_lock_acquire>
 8008bc0:	4b1e      	ldr	r3, [pc, #120]	; (8008c3c <__sfp+0x84>)
 8008bc2:	681e      	ldr	r6, [r3, #0]
 8008bc4:	69b3      	ldr	r3, [r6, #24]
 8008bc6:	b913      	cbnz	r3, 8008bce <__sfp+0x16>
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f7ff ffbd 	bl	8008b48 <__sinit>
 8008bce:	3648      	adds	r6, #72	; 0x48
 8008bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	d503      	bpl.n	8008be0 <__sfp+0x28>
 8008bd8:	6833      	ldr	r3, [r6, #0]
 8008bda:	b30b      	cbz	r3, 8008c20 <__sfp+0x68>
 8008bdc:	6836      	ldr	r6, [r6, #0]
 8008bde:	e7f7      	b.n	8008bd0 <__sfp+0x18>
 8008be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008be4:	b9d5      	cbnz	r5, 8008c1c <__sfp+0x64>
 8008be6:	4b16      	ldr	r3, [pc, #88]	; (8008c40 <__sfp+0x88>)
 8008be8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bec:	60e3      	str	r3, [r4, #12]
 8008bee:	6665      	str	r5, [r4, #100]	; 0x64
 8008bf0:	f000 f859 	bl	8008ca6 <__retarget_lock_init_recursive>
 8008bf4:	f7ff ff96 	bl	8008b24 <__sfp_lock_release>
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c04:	6025      	str	r5, [r4, #0]
 8008c06:	61a5      	str	r5, [r4, #24]
 8008c08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c0c:	f7fc fed4 	bl	80059b8 <memset>
 8008c10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c18:	4620      	mov	r0, r4
 8008c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c1c:	3468      	adds	r4, #104	; 0x68
 8008c1e:	e7d9      	b.n	8008bd4 <__sfp+0x1c>
 8008c20:	2104      	movs	r1, #4
 8008c22:	4638      	mov	r0, r7
 8008c24:	f7ff ff62 	bl	8008aec <__sfmoreglue>
 8008c28:	4604      	mov	r4, r0
 8008c2a:	6030      	str	r0, [r6, #0]
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d1d5      	bne.n	8008bdc <__sfp+0x24>
 8008c30:	f7ff ff78 	bl	8008b24 <__sfp_lock_release>
 8008c34:	230c      	movs	r3, #12
 8008c36:	603b      	str	r3, [r7, #0]
 8008c38:	e7ee      	b.n	8008c18 <__sfp+0x60>
 8008c3a:	bf00      	nop
 8008c3c:	0800a340 	.word	0x0800a340
 8008c40:	ffff0001 	.word	0xffff0001

08008c44 <fiprintf>:
 8008c44:	b40e      	push	{r1, r2, r3}
 8008c46:	b503      	push	{r0, r1, lr}
 8008c48:	4601      	mov	r1, r0
 8008c4a:	ab03      	add	r3, sp, #12
 8008c4c:	4805      	ldr	r0, [pc, #20]	; (8008c64 <fiprintf+0x20>)
 8008c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c52:	6800      	ldr	r0, [r0, #0]
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	f000 f903 	bl	8008e60 <_vfiprintf_r>
 8008c5a:	b002      	add	sp, #8
 8008c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c60:	b003      	add	sp, #12
 8008c62:	4770      	bx	lr
 8008c64:	20000020 	.word	0x20000020

08008c68 <_fwalk_reent>:
 8008c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	4688      	mov	r8, r1
 8008c70:	2700      	movs	r7, #0
 8008c72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c7a:	f1b9 0901 	subs.w	r9, r9, #1
 8008c7e:	d505      	bpl.n	8008c8c <_fwalk_reent+0x24>
 8008c80:	6824      	ldr	r4, [r4, #0]
 8008c82:	2c00      	cmp	r4, #0
 8008c84:	d1f7      	bne.n	8008c76 <_fwalk_reent+0xe>
 8008c86:	4638      	mov	r0, r7
 8008c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c8c:	89ab      	ldrh	r3, [r5, #12]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d907      	bls.n	8008ca2 <_fwalk_reent+0x3a>
 8008c92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c96:	3301      	adds	r3, #1
 8008c98:	d003      	beq.n	8008ca2 <_fwalk_reent+0x3a>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	47c0      	blx	r8
 8008ca0:	4307      	orrs	r7, r0
 8008ca2:	3568      	adds	r5, #104	; 0x68
 8008ca4:	e7e9      	b.n	8008c7a <_fwalk_reent+0x12>

08008ca6 <__retarget_lock_init_recursive>:
 8008ca6:	4770      	bx	lr

08008ca8 <__retarget_lock_acquire_recursive>:
 8008ca8:	4770      	bx	lr

08008caa <__retarget_lock_release_recursive>:
 8008caa:	4770      	bx	lr

08008cac <malloc>:
 8008cac:	4b02      	ldr	r3, [pc, #8]	; (8008cb8 <malloc+0xc>)
 8008cae:	4601      	mov	r1, r0
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	f7fe bddd 	b.w	8007870 <_malloc_r>
 8008cb6:	bf00      	nop
 8008cb8:	20000020 	.word	0x20000020

08008cbc <memchr>:
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	b510      	push	{r4, lr}
 8008cc0:	b2c9      	uxtb	r1, r1
 8008cc2:	4402      	add	r2, r0
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	d101      	bne.n	8008cce <memchr+0x12>
 8008cca:	2000      	movs	r0, #0
 8008ccc:	e003      	b.n	8008cd6 <memchr+0x1a>
 8008cce:	7804      	ldrb	r4, [r0, #0]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	428c      	cmp	r4, r1
 8008cd4:	d1f6      	bne.n	8008cc4 <memchr+0x8>
 8008cd6:	bd10      	pop	{r4, pc}

08008cd8 <memmove>:
 8008cd8:	4288      	cmp	r0, r1
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	eb01 0402 	add.w	r4, r1, r2
 8008ce0:	d902      	bls.n	8008ce8 <memmove+0x10>
 8008ce2:	4284      	cmp	r4, r0
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	d807      	bhi.n	8008cf8 <memmove+0x20>
 8008ce8:	1e43      	subs	r3, r0, #1
 8008cea:	42a1      	cmp	r1, r4
 8008cec:	d008      	beq.n	8008d00 <memmove+0x28>
 8008cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cf6:	e7f8      	b.n	8008cea <memmove+0x12>
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	4402      	add	r2, r0
 8008cfc:	428a      	cmp	r2, r1
 8008cfe:	d100      	bne.n	8008d02 <memmove+0x2a>
 8008d00:	bd10      	pop	{r4, pc}
 8008d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d0a:	e7f7      	b.n	8008cfc <memmove+0x24>

08008d0c <__malloc_lock>:
 8008d0c:	4801      	ldr	r0, [pc, #4]	; (8008d14 <__malloc_lock+0x8>)
 8008d0e:	f7ff bfcb 	b.w	8008ca8 <__retarget_lock_acquire_recursive>
 8008d12:	bf00      	nop
 8008d14:	200013c4 	.word	0x200013c4

08008d18 <__malloc_unlock>:
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__malloc_unlock+0x8>)
 8008d1a:	f7ff bfc6 	b.w	8008caa <__retarget_lock_release_recursive>
 8008d1e:	bf00      	nop
 8008d20:	200013c4 	.word	0x200013c4

08008d24 <_free_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4605      	mov	r5, r0
 8008d28:	2900      	cmp	r1, #0
 8008d2a:	d040      	beq.n	8008dae <_free_r+0x8a>
 8008d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d30:	1f0c      	subs	r4, r1, #4
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	bfb8      	it	lt
 8008d36:	18e4      	addlt	r4, r4, r3
 8008d38:	f7ff ffe8 	bl	8008d0c <__malloc_lock>
 8008d3c:	4a1c      	ldr	r2, [pc, #112]	; (8008db0 <_free_r+0x8c>)
 8008d3e:	6813      	ldr	r3, [r2, #0]
 8008d40:	b933      	cbnz	r3, 8008d50 <_free_r+0x2c>
 8008d42:	6063      	str	r3, [r4, #4]
 8008d44:	6014      	str	r4, [r2, #0]
 8008d46:	4628      	mov	r0, r5
 8008d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d4c:	f7ff bfe4 	b.w	8008d18 <__malloc_unlock>
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d908      	bls.n	8008d66 <_free_r+0x42>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	1821      	adds	r1, r4, r0
 8008d58:	428b      	cmp	r3, r1
 8008d5a:	bf01      	itttt	eq
 8008d5c:	6819      	ldreq	r1, [r3, #0]
 8008d5e:	685b      	ldreq	r3, [r3, #4]
 8008d60:	1809      	addeq	r1, r1, r0
 8008d62:	6021      	streq	r1, [r4, #0]
 8008d64:	e7ed      	b.n	8008d42 <_free_r+0x1e>
 8008d66:	461a      	mov	r2, r3
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	b10b      	cbz	r3, 8008d70 <_free_r+0x4c>
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	d9fa      	bls.n	8008d66 <_free_r+0x42>
 8008d70:	6811      	ldr	r1, [r2, #0]
 8008d72:	1850      	adds	r0, r2, r1
 8008d74:	42a0      	cmp	r0, r4
 8008d76:	d10b      	bne.n	8008d90 <_free_r+0x6c>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	4401      	add	r1, r0
 8008d7c:	1850      	adds	r0, r2, r1
 8008d7e:	4283      	cmp	r3, r0
 8008d80:	6011      	str	r1, [r2, #0]
 8008d82:	d1e0      	bne.n	8008d46 <_free_r+0x22>
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	4401      	add	r1, r0
 8008d8a:	6011      	str	r1, [r2, #0]
 8008d8c:	6053      	str	r3, [r2, #4]
 8008d8e:	e7da      	b.n	8008d46 <_free_r+0x22>
 8008d90:	d902      	bls.n	8008d98 <_free_r+0x74>
 8008d92:	230c      	movs	r3, #12
 8008d94:	602b      	str	r3, [r5, #0]
 8008d96:	e7d6      	b.n	8008d46 <_free_r+0x22>
 8008d98:	6820      	ldr	r0, [r4, #0]
 8008d9a:	1821      	adds	r1, r4, r0
 8008d9c:	428b      	cmp	r3, r1
 8008d9e:	bf01      	itttt	eq
 8008da0:	6819      	ldreq	r1, [r3, #0]
 8008da2:	685b      	ldreq	r3, [r3, #4]
 8008da4:	1809      	addeq	r1, r1, r0
 8008da6:	6021      	streq	r1, [r4, #0]
 8008da8:	6063      	str	r3, [r4, #4]
 8008daa:	6054      	str	r4, [r2, #4]
 8008dac:	e7cb      	b.n	8008d46 <_free_r+0x22>
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	200013b8 	.word	0x200013b8

08008db4 <_realloc_r>:
 8008db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db8:	4680      	mov	r8, r0
 8008dba:	4614      	mov	r4, r2
 8008dbc:	460e      	mov	r6, r1
 8008dbe:	b921      	cbnz	r1, 8008dca <_realloc_r+0x16>
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc6:	f7fe bd53 	b.w	8007870 <_malloc_r>
 8008dca:	b92a      	cbnz	r2, 8008dd8 <_realloc_r+0x24>
 8008dcc:	f7ff ffaa 	bl	8008d24 <_free_r>
 8008dd0:	4625      	mov	r5, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd8:	f000 fa9e 	bl	8009318 <_malloc_usable_size_r>
 8008ddc:	4284      	cmp	r4, r0
 8008dde:	4607      	mov	r7, r0
 8008de0:	d802      	bhi.n	8008de8 <_realloc_r+0x34>
 8008de2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008de6:	d812      	bhi.n	8008e0e <_realloc_r+0x5a>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4640      	mov	r0, r8
 8008dec:	f7fe fd40 	bl	8007870 <_malloc_r>
 8008df0:	4605      	mov	r5, r0
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d0ed      	beq.n	8008dd2 <_realloc_r+0x1e>
 8008df6:	42bc      	cmp	r4, r7
 8008df8:	4622      	mov	r2, r4
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	bf28      	it	cs
 8008dfe:	463a      	movcs	r2, r7
 8008e00:	f7fc fdcc 	bl	800599c <memcpy>
 8008e04:	4631      	mov	r1, r6
 8008e06:	4640      	mov	r0, r8
 8008e08:	f7ff ff8c 	bl	8008d24 <_free_r>
 8008e0c:	e7e1      	b.n	8008dd2 <_realloc_r+0x1e>
 8008e0e:	4635      	mov	r5, r6
 8008e10:	e7df      	b.n	8008dd2 <_realloc_r+0x1e>

08008e12 <__sfputc_r>:
 8008e12:	6893      	ldr	r3, [r2, #8]
 8008e14:	b410      	push	{r4}
 8008e16:	3b01      	subs	r3, #1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	6093      	str	r3, [r2, #8]
 8008e1c:	da07      	bge.n	8008e2e <__sfputc_r+0x1c>
 8008e1e:	6994      	ldr	r4, [r2, #24]
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	db01      	blt.n	8008e28 <__sfputc_r+0x16>
 8008e24:	290a      	cmp	r1, #10
 8008e26:	d102      	bne.n	8008e2e <__sfputc_r+0x1c>
 8008e28:	bc10      	pop	{r4}
 8008e2a:	f000 b949 	b.w	80090c0 <__swbuf_r>
 8008e2e:	6813      	ldr	r3, [r2, #0]
 8008e30:	1c58      	adds	r0, r3, #1
 8008e32:	6010      	str	r0, [r2, #0]
 8008e34:	7019      	strb	r1, [r3, #0]
 8008e36:	4608      	mov	r0, r1
 8008e38:	bc10      	pop	{r4}
 8008e3a:	4770      	bx	lr

08008e3c <__sfputs_r>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460f      	mov	r7, r1
 8008e42:	4614      	mov	r4, r2
 8008e44:	18d5      	adds	r5, r2, r3
 8008e46:	42ac      	cmp	r4, r5
 8008e48:	d101      	bne.n	8008e4e <__sfputs_r+0x12>
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	e007      	b.n	8008e5e <__sfputs_r+0x22>
 8008e4e:	463a      	mov	r2, r7
 8008e50:	4630      	mov	r0, r6
 8008e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e56:	f7ff ffdc 	bl	8008e12 <__sfputc_r>
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	d1f3      	bne.n	8008e46 <__sfputs_r+0xa>
 8008e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e60 <_vfiprintf_r>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	460d      	mov	r5, r1
 8008e66:	4614      	mov	r4, r2
 8008e68:	4698      	mov	r8, r3
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	b09d      	sub	sp, #116	; 0x74
 8008e6e:	b118      	cbz	r0, 8008e78 <_vfiprintf_r+0x18>
 8008e70:	6983      	ldr	r3, [r0, #24]
 8008e72:	b90b      	cbnz	r3, 8008e78 <_vfiprintf_r+0x18>
 8008e74:	f7ff fe68 	bl	8008b48 <__sinit>
 8008e78:	4b89      	ldr	r3, [pc, #548]	; (80090a0 <_vfiprintf_r+0x240>)
 8008e7a:	429d      	cmp	r5, r3
 8008e7c:	d11b      	bne.n	8008eb6 <_vfiprintf_r+0x56>
 8008e7e:	6875      	ldr	r5, [r6, #4]
 8008e80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e82:	07d9      	lsls	r1, r3, #31
 8008e84:	d405      	bmi.n	8008e92 <_vfiprintf_r+0x32>
 8008e86:	89ab      	ldrh	r3, [r5, #12]
 8008e88:	059a      	lsls	r2, r3, #22
 8008e8a:	d402      	bmi.n	8008e92 <_vfiprintf_r+0x32>
 8008e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e8e:	f7ff ff0b 	bl	8008ca8 <__retarget_lock_acquire_recursive>
 8008e92:	89ab      	ldrh	r3, [r5, #12]
 8008e94:	071b      	lsls	r3, r3, #28
 8008e96:	d501      	bpl.n	8008e9c <_vfiprintf_r+0x3c>
 8008e98:	692b      	ldr	r3, [r5, #16]
 8008e9a:	b9eb      	cbnz	r3, 8008ed8 <_vfiprintf_r+0x78>
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f000 f960 	bl	8009164 <__swsetup_r>
 8008ea4:	b1c0      	cbz	r0, 8008ed8 <_vfiprintf_r+0x78>
 8008ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ea8:	07dc      	lsls	r4, r3, #31
 8008eaa:	d50e      	bpl.n	8008eca <_vfiprintf_r+0x6a>
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb0:	b01d      	add	sp, #116	; 0x74
 8008eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb6:	4b7b      	ldr	r3, [pc, #492]	; (80090a4 <_vfiprintf_r+0x244>)
 8008eb8:	429d      	cmp	r5, r3
 8008eba:	d101      	bne.n	8008ec0 <_vfiprintf_r+0x60>
 8008ebc:	68b5      	ldr	r5, [r6, #8]
 8008ebe:	e7df      	b.n	8008e80 <_vfiprintf_r+0x20>
 8008ec0:	4b79      	ldr	r3, [pc, #484]	; (80090a8 <_vfiprintf_r+0x248>)
 8008ec2:	429d      	cmp	r5, r3
 8008ec4:	bf08      	it	eq
 8008ec6:	68f5      	ldreq	r5, [r6, #12]
 8008ec8:	e7da      	b.n	8008e80 <_vfiprintf_r+0x20>
 8008eca:	89ab      	ldrh	r3, [r5, #12]
 8008ecc:	0598      	lsls	r0, r3, #22
 8008ece:	d4ed      	bmi.n	8008eac <_vfiprintf_r+0x4c>
 8008ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ed2:	f7ff feea 	bl	8008caa <__retarget_lock_release_recursive>
 8008ed6:	e7e9      	b.n	8008eac <_vfiprintf_r+0x4c>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9309      	str	r3, [sp, #36]	; 0x24
 8008edc:	2320      	movs	r3, #32
 8008ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ee2:	2330      	movs	r3, #48	; 0x30
 8008ee4:	f04f 0901 	mov.w	r9, #1
 8008ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80090ac <_vfiprintf_r+0x24c>
 8008ef0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	469a      	mov	sl, r3
 8008ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008efc:	b10a      	cbz	r2, 8008f02 <_vfiprintf_r+0xa2>
 8008efe:	2a25      	cmp	r2, #37	; 0x25
 8008f00:	d1f9      	bne.n	8008ef6 <_vfiprintf_r+0x96>
 8008f02:	ebba 0b04 	subs.w	fp, sl, r4
 8008f06:	d00b      	beq.n	8008f20 <_vfiprintf_r+0xc0>
 8008f08:	465b      	mov	r3, fp
 8008f0a:	4622      	mov	r2, r4
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f7ff ff94 	bl	8008e3c <__sfputs_r>
 8008f14:	3001      	adds	r0, #1
 8008f16:	f000 80aa 	beq.w	800906e <_vfiprintf_r+0x20e>
 8008f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f1c:	445a      	add	r2, fp
 8008f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f20:	f89a 3000 	ldrb.w	r3, [sl]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 80a2 	beq.w	800906e <_vfiprintf_r+0x20e>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f34:	f10a 0a01 	add.w	sl, sl, #1
 8008f38:	9304      	str	r3, [sp, #16]
 8008f3a:	9307      	str	r3, [sp, #28]
 8008f3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f40:	931a      	str	r3, [sp, #104]	; 0x68
 8008f42:	4654      	mov	r4, sl
 8008f44:	2205      	movs	r2, #5
 8008f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4a:	4858      	ldr	r0, [pc, #352]	; (80090ac <_vfiprintf_r+0x24c>)
 8008f4c:	f7ff feb6 	bl	8008cbc <memchr>
 8008f50:	9a04      	ldr	r2, [sp, #16]
 8008f52:	b9d8      	cbnz	r0, 8008f8c <_vfiprintf_r+0x12c>
 8008f54:	06d1      	lsls	r1, r2, #27
 8008f56:	bf44      	itt	mi
 8008f58:	2320      	movmi	r3, #32
 8008f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f5e:	0713      	lsls	r3, r2, #28
 8008f60:	bf44      	itt	mi
 8008f62:	232b      	movmi	r3, #43	; 0x2b
 8008f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f68:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f6e:	d015      	beq.n	8008f9c <_vfiprintf_r+0x13c>
 8008f70:	4654      	mov	r4, sl
 8008f72:	2000      	movs	r0, #0
 8008f74:	f04f 0c0a 	mov.w	ip, #10
 8008f78:	9a07      	ldr	r2, [sp, #28]
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f80:	3b30      	subs	r3, #48	; 0x30
 8008f82:	2b09      	cmp	r3, #9
 8008f84:	d94e      	bls.n	8009024 <_vfiprintf_r+0x1c4>
 8008f86:	b1b0      	cbz	r0, 8008fb6 <_vfiprintf_r+0x156>
 8008f88:	9207      	str	r2, [sp, #28]
 8008f8a:	e014      	b.n	8008fb6 <_vfiprintf_r+0x156>
 8008f8c:	eba0 0308 	sub.w	r3, r0, r8
 8008f90:	fa09 f303 	lsl.w	r3, r9, r3
 8008f94:	4313      	orrs	r3, r2
 8008f96:	46a2      	mov	sl, r4
 8008f98:	9304      	str	r3, [sp, #16]
 8008f9a:	e7d2      	b.n	8008f42 <_vfiprintf_r+0xe2>
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	1d19      	adds	r1, r3, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	9103      	str	r1, [sp, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bfbb      	ittet	lt
 8008fa8:	425b      	neglt	r3, r3
 8008faa:	f042 0202 	orrlt.w	r2, r2, #2
 8008fae:	9307      	strge	r3, [sp, #28]
 8008fb0:	9307      	strlt	r3, [sp, #28]
 8008fb2:	bfb8      	it	lt
 8008fb4:	9204      	strlt	r2, [sp, #16]
 8008fb6:	7823      	ldrb	r3, [r4, #0]
 8008fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8008fba:	d10c      	bne.n	8008fd6 <_vfiprintf_r+0x176>
 8008fbc:	7863      	ldrb	r3, [r4, #1]
 8008fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc0:	d135      	bne.n	800902e <_vfiprintf_r+0x1ce>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	3402      	adds	r4, #2
 8008fc6:	1d1a      	adds	r2, r3, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	9203      	str	r2, [sp, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	bfb8      	it	lt
 8008fd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fd4:	9305      	str	r3, [sp, #20]
 8008fd6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80090b0 <_vfiprintf_r+0x250>
 8008fda:	2203      	movs	r2, #3
 8008fdc:	4650      	mov	r0, sl
 8008fde:	7821      	ldrb	r1, [r4, #0]
 8008fe0:	f7ff fe6c 	bl	8008cbc <memchr>
 8008fe4:	b140      	cbz	r0, 8008ff8 <_vfiprintf_r+0x198>
 8008fe6:	2340      	movs	r3, #64	; 0x40
 8008fe8:	eba0 000a 	sub.w	r0, r0, sl
 8008fec:	fa03 f000 	lsl.w	r0, r3, r0
 8008ff0:	9b04      	ldr	r3, [sp, #16]
 8008ff2:	3401      	adds	r4, #1
 8008ff4:	4303      	orrs	r3, r0
 8008ff6:	9304      	str	r3, [sp, #16]
 8008ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffc:	2206      	movs	r2, #6
 8008ffe:	482d      	ldr	r0, [pc, #180]	; (80090b4 <_vfiprintf_r+0x254>)
 8009000:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009004:	f7ff fe5a 	bl	8008cbc <memchr>
 8009008:	2800      	cmp	r0, #0
 800900a:	d03f      	beq.n	800908c <_vfiprintf_r+0x22c>
 800900c:	4b2a      	ldr	r3, [pc, #168]	; (80090b8 <_vfiprintf_r+0x258>)
 800900e:	bb1b      	cbnz	r3, 8009058 <_vfiprintf_r+0x1f8>
 8009010:	9b03      	ldr	r3, [sp, #12]
 8009012:	3307      	adds	r3, #7
 8009014:	f023 0307 	bic.w	r3, r3, #7
 8009018:	3308      	adds	r3, #8
 800901a:	9303      	str	r3, [sp, #12]
 800901c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800901e:	443b      	add	r3, r7
 8009020:	9309      	str	r3, [sp, #36]	; 0x24
 8009022:	e767      	b.n	8008ef4 <_vfiprintf_r+0x94>
 8009024:	460c      	mov	r4, r1
 8009026:	2001      	movs	r0, #1
 8009028:	fb0c 3202 	mla	r2, ip, r2, r3
 800902c:	e7a5      	b.n	8008f7a <_vfiprintf_r+0x11a>
 800902e:	2300      	movs	r3, #0
 8009030:	f04f 0c0a 	mov.w	ip, #10
 8009034:	4619      	mov	r1, r3
 8009036:	3401      	adds	r4, #1
 8009038:	9305      	str	r3, [sp, #20]
 800903a:	4620      	mov	r0, r4
 800903c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009040:	3a30      	subs	r2, #48	; 0x30
 8009042:	2a09      	cmp	r2, #9
 8009044:	d903      	bls.n	800904e <_vfiprintf_r+0x1ee>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0c5      	beq.n	8008fd6 <_vfiprintf_r+0x176>
 800904a:	9105      	str	r1, [sp, #20]
 800904c:	e7c3      	b.n	8008fd6 <_vfiprintf_r+0x176>
 800904e:	4604      	mov	r4, r0
 8009050:	2301      	movs	r3, #1
 8009052:	fb0c 2101 	mla	r1, ip, r1, r2
 8009056:	e7f0      	b.n	800903a <_vfiprintf_r+0x1da>
 8009058:	ab03      	add	r3, sp, #12
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	462a      	mov	r2, r5
 800905e:	4630      	mov	r0, r6
 8009060:	4b16      	ldr	r3, [pc, #88]	; (80090bc <_vfiprintf_r+0x25c>)
 8009062:	a904      	add	r1, sp, #16
 8009064:	f3af 8000 	nop.w
 8009068:	4607      	mov	r7, r0
 800906a:	1c78      	adds	r0, r7, #1
 800906c:	d1d6      	bne.n	800901c <_vfiprintf_r+0x1bc>
 800906e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009070:	07d9      	lsls	r1, r3, #31
 8009072:	d405      	bmi.n	8009080 <_vfiprintf_r+0x220>
 8009074:	89ab      	ldrh	r3, [r5, #12]
 8009076:	059a      	lsls	r2, r3, #22
 8009078:	d402      	bmi.n	8009080 <_vfiprintf_r+0x220>
 800907a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800907c:	f7ff fe15 	bl	8008caa <__retarget_lock_release_recursive>
 8009080:	89ab      	ldrh	r3, [r5, #12]
 8009082:	065b      	lsls	r3, r3, #25
 8009084:	f53f af12 	bmi.w	8008eac <_vfiprintf_r+0x4c>
 8009088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800908a:	e711      	b.n	8008eb0 <_vfiprintf_r+0x50>
 800908c:	ab03      	add	r3, sp, #12
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	462a      	mov	r2, r5
 8009092:	4630      	mov	r0, r6
 8009094:	4b09      	ldr	r3, [pc, #36]	; (80090bc <_vfiprintf_r+0x25c>)
 8009096:	a904      	add	r1, sp, #16
 8009098:	f7fe fffe 	bl	8008098 <_printf_i>
 800909c:	e7e4      	b.n	8009068 <_vfiprintf_r+0x208>
 800909e:	bf00      	nop
 80090a0:	0800a748 	.word	0x0800a748
 80090a4:	0800a768 	.word	0x0800a768
 80090a8:	0800a728 	.word	0x0800a728
 80090ac:	0800a59c 	.word	0x0800a59c
 80090b0:	0800a5a2 	.word	0x0800a5a2
 80090b4:	0800a5a6 	.word	0x0800a5a6
 80090b8:	00000000 	.word	0x00000000
 80090bc:	08008e3d 	.word	0x08008e3d

080090c0 <__swbuf_r>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	460e      	mov	r6, r1
 80090c4:	4614      	mov	r4, r2
 80090c6:	4605      	mov	r5, r0
 80090c8:	b118      	cbz	r0, 80090d2 <__swbuf_r+0x12>
 80090ca:	6983      	ldr	r3, [r0, #24]
 80090cc:	b90b      	cbnz	r3, 80090d2 <__swbuf_r+0x12>
 80090ce:	f7ff fd3b 	bl	8008b48 <__sinit>
 80090d2:	4b21      	ldr	r3, [pc, #132]	; (8009158 <__swbuf_r+0x98>)
 80090d4:	429c      	cmp	r4, r3
 80090d6:	d12b      	bne.n	8009130 <__swbuf_r+0x70>
 80090d8:	686c      	ldr	r4, [r5, #4]
 80090da:	69a3      	ldr	r3, [r4, #24]
 80090dc:	60a3      	str	r3, [r4, #8]
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	071a      	lsls	r2, r3, #28
 80090e2:	d52f      	bpl.n	8009144 <__swbuf_r+0x84>
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	b36b      	cbz	r3, 8009144 <__swbuf_r+0x84>
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	6820      	ldr	r0, [r4, #0]
 80090ec:	b2f6      	uxtb	r6, r6
 80090ee:	1ac0      	subs	r0, r0, r3
 80090f0:	6963      	ldr	r3, [r4, #20]
 80090f2:	4637      	mov	r7, r6
 80090f4:	4283      	cmp	r3, r0
 80090f6:	dc04      	bgt.n	8009102 <__swbuf_r+0x42>
 80090f8:	4621      	mov	r1, r4
 80090fa:	4628      	mov	r0, r5
 80090fc:	f7ff fc90 	bl	8008a20 <_fflush_r>
 8009100:	bb30      	cbnz	r0, 8009150 <__swbuf_r+0x90>
 8009102:	68a3      	ldr	r3, [r4, #8]
 8009104:	3001      	adds	r0, #1
 8009106:	3b01      	subs	r3, #1
 8009108:	60a3      	str	r3, [r4, #8]
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	6022      	str	r2, [r4, #0]
 8009110:	701e      	strb	r6, [r3, #0]
 8009112:	6963      	ldr	r3, [r4, #20]
 8009114:	4283      	cmp	r3, r0
 8009116:	d004      	beq.n	8009122 <__swbuf_r+0x62>
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	07db      	lsls	r3, r3, #31
 800911c:	d506      	bpl.n	800912c <__swbuf_r+0x6c>
 800911e:	2e0a      	cmp	r6, #10
 8009120:	d104      	bne.n	800912c <__swbuf_r+0x6c>
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	f7ff fc7b 	bl	8008a20 <_fflush_r>
 800912a:	b988      	cbnz	r0, 8009150 <__swbuf_r+0x90>
 800912c:	4638      	mov	r0, r7
 800912e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009130:	4b0a      	ldr	r3, [pc, #40]	; (800915c <__swbuf_r+0x9c>)
 8009132:	429c      	cmp	r4, r3
 8009134:	d101      	bne.n	800913a <__swbuf_r+0x7a>
 8009136:	68ac      	ldr	r4, [r5, #8]
 8009138:	e7cf      	b.n	80090da <__swbuf_r+0x1a>
 800913a:	4b09      	ldr	r3, [pc, #36]	; (8009160 <__swbuf_r+0xa0>)
 800913c:	429c      	cmp	r4, r3
 800913e:	bf08      	it	eq
 8009140:	68ec      	ldreq	r4, [r5, #12]
 8009142:	e7ca      	b.n	80090da <__swbuf_r+0x1a>
 8009144:	4621      	mov	r1, r4
 8009146:	4628      	mov	r0, r5
 8009148:	f000 f80c 	bl	8009164 <__swsetup_r>
 800914c:	2800      	cmp	r0, #0
 800914e:	d0cb      	beq.n	80090e8 <__swbuf_r+0x28>
 8009150:	f04f 37ff 	mov.w	r7, #4294967295
 8009154:	e7ea      	b.n	800912c <__swbuf_r+0x6c>
 8009156:	bf00      	nop
 8009158:	0800a748 	.word	0x0800a748
 800915c:	0800a768 	.word	0x0800a768
 8009160:	0800a728 	.word	0x0800a728

08009164 <__swsetup_r>:
 8009164:	4b32      	ldr	r3, [pc, #200]	; (8009230 <__swsetup_r+0xcc>)
 8009166:	b570      	push	{r4, r5, r6, lr}
 8009168:	681d      	ldr	r5, [r3, #0]
 800916a:	4606      	mov	r6, r0
 800916c:	460c      	mov	r4, r1
 800916e:	b125      	cbz	r5, 800917a <__swsetup_r+0x16>
 8009170:	69ab      	ldr	r3, [r5, #24]
 8009172:	b913      	cbnz	r3, 800917a <__swsetup_r+0x16>
 8009174:	4628      	mov	r0, r5
 8009176:	f7ff fce7 	bl	8008b48 <__sinit>
 800917a:	4b2e      	ldr	r3, [pc, #184]	; (8009234 <__swsetup_r+0xd0>)
 800917c:	429c      	cmp	r4, r3
 800917e:	d10f      	bne.n	80091a0 <__swsetup_r+0x3c>
 8009180:	686c      	ldr	r4, [r5, #4]
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009188:	0719      	lsls	r1, r3, #28
 800918a:	d42c      	bmi.n	80091e6 <__swsetup_r+0x82>
 800918c:	06dd      	lsls	r5, r3, #27
 800918e:	d411      	bmi.n	80091b4 <__swsetup_r+0x50>
 8009190:	2309      	movs	r3, #9
 8009192:	6033      	str	r3, [r6, #0]
 8009194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009198:	f04f 30ff 	mov.w	r0, #4294967295
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	e03e      	b.n	800921e <__swsetup_r+0xba>
 80091a0:	4b25      	ldr	r3, [pc, #148]	; (8009238 <__swsetup_r+0xd4>)
 80091a2:	429c      	cmp	r4, r3
 80091a4:	d101      	bne.n	80091aa <__swsetup_r+0x46>
 80091a6:	68ac      	ldr	r4, [r5, #8]
 80091a8:	e7eb      	b.n	8009182 <__swsetup_r+0x1e>
 80091aa:	4b24      	ldr	r3, [pc, #144]	; (800923c <__swsetup_r+0xd8>)
 80091ac:	429c      	cmp	r4, r3
 80091ae:	bf08      	it	eq
 80091b0:	68ec      	ldreq	r4, [r5, #12]
 80091b2:	e7e6      	b.n	8009182 <__swsetup_r+0x1e>
 80091b4:	0758      	lsls	r0, r3, #29
 80091b6:	d512      	bpl.n	80091de <__swsetup_r+0x7a>
 80091b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ba:	b141      	cbz	r1, 80091ce <__swsetup_r+0x6a>
 80091bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c0:	4299      	cmp	r1, r3
 80091c2:	d002      	beq.n	80091ca <__swsetup_r+0x66>
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7ff fdad 	bl	8008d24 <_free_r>
 80091ca:	2300      	movs	r3, #0
 80091cc:	6363      	str	r3, [r4, #52]	; 0x34
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091d4:	81a3      	strh	r3, [r4, #12]
 80091d6:	2300      	movs	r3, #0
 80091d8:	6063      	str	r3, [r4, #4]
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f043 0308 	orr.w	r3, r3, #8
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	b94b      	cbnz	r3, 80091fe <__swsetup_r+0x9a>
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091f4:	d003      	beq.n	80091fe <__swsetup_r+0x9a>
 80091f6:	4621      	mov	r1, r4
 80091f8:	4630      	mov	r0, r6
 80091fa:	f000 f84d 	bl	8009298 <__smakebuf_r>
 80091fe:	89a0      	ldrh	r0, [r4, #12]
 8009200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009204:	f010 0301 	ands.w	r3, r0, #1
 8009208:	d00a      	beq.n	8009220 <__swsetup_r+0xbc>
 800920a:	2300      	movs	r3, #0
 800920c:	60a3      	str	r3, [r4, #8]
 800920e:	6963      	ldr	r3, [r4, #20]
 8009210:	425b      	negs	r3, r3
 8009212:	61a3      	str	r3, [r4, #24]
 8009214:	6923      	ldr	r3, [r4, #16]
 8009216:	b943      	cbnz	r3, 800922a <__swsetup_r+0xc6>
 8009218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800921c:	d1ba      	bne.n	8009194 <__swsetup_r+0x30>
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	0781      	lsls	r1, r0, #30
 8009222:	bf58      	it	pl
 8009224:	6963      	ldrpl	r3, [r4, #20]
 8009226:	60a3      	str	r3, [r4, #8]
 8009228:	e7f4      	b.n	8009214 <__swsetup_r+0xb0>
 800922a:	2000      	movs	r0, #0
 800922c:	e7f7      	b.n	800921e <__swsetup_r+0xba>
 800922e:	bf00      	nop
 8009230:	20000020 	.word	0x20000020
 8009234:	0800a748 	.word	0x0800a748
 8009238:	0800a768 	.word	0x0800a768
 800923c:	0800a728 	.word	0x0800a728

08009240 <abort>:
 8009240:	2006      	movs	r0, #6
 8009242:	b508      	push	{r3, lr}
 8009244:	f000 f898 	bl	8009378 <raise>
 8009248:	2001      	movs	r0, #1
 800924a:	f7f8 fc18 	bl	8001a7e <_exit>

0800924e <__swhatbuf_r>:
 800924e:	b570      	push	{r4, r5, r6, lr}
 8009250:	460e      	mov	r6, r1
 8009252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009256:	4614      	mov	r4, r2
 8009258:	2900      	cmp	r1, #0
 800925a:	461d      	mov	r5, r3
 800925c:	b096      	sub	sp, #88	; 0x58
 800925e:	da08      	bge.n	8009272 <__swhatbuf_r+0x24>
 8009260:	2200      	movs	r2, #0
 8009262:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009266:	602a      	str	r2, [r5, #0]
 8009268:	061a      	lsls	r2, r3, #24
 800926a:	d410      	bmi.n	800928e <__swhatbuf_r+0x40>
 800926c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009270:	e00e      	b.n	8009290 <__swhatbuf_r+0x42>
 8009272:	466a      	mov	r2, sp
 8009274:	f000 f89c 	bl	80093b0 <_fstat_r>
 8009278:	2800      	cmp	r0, #0
 800927a:	dbf1      	blt.n	8009260 <__swhatbuf_r+0x12>
 800927c:	9a01      	ldr	r2, [sp, #4]
 800927e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009282:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009286:	425a      	negs	r2, r3
 8009288:	415a      	adcs	r2, r3
 800928a:	602a      	str	r2, [r5, #0]
 800928c:	e7ee      	b.n	800926c <__swhatbuf_r+0x1e>
 800928e:	2340      	movs	r3, #64	; 0x40
 8009290:	2000      	movs	r0, #0
 8009292:	6023      	str	r3, [r4, #0]
 8009294:	b016      	add	sp, #88	; 0x58
 8009296:	bd70      	pop	{r4, r5, r6, pc}

08009298 <__smakebuf_r>:
 8009298:	898b      	ldrh	r3, [r1, #12]
 800929a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800929c:	079d      	lsls	r5, r3, #30
 800929e:	4606      	mov	r6, r0
 80092a0:	460c      	mov	r4, r1
 80092a2:	d507      	bpl.n	80092b4 <__smakebuf_r+0x1c>
 80092a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	6123      	str	r3, [r4, #16]
 80092ac:	2301      	movs	r3, #1
 80092ae:	6163      	str	r3, [r4, #20]
 80092b0:	b002      	add	sp, #8
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	466a      	mov	r2, sp
 80092b6:	ab01      	add	r3, sp, #4
 80092b8:	f7ff ffc9 	bl	800924e <__swhatbuf_r>
 80092bc:	9900      	ldr	r1, [sp, #0]
 80092be:	4605      	mov	r5, r0
 80092c0:	4630      	mov	r0, r6
 80092c2:	f7fe fad5 	bl	8007870 <_malloc_r>
 80092c6:	b948      	cbnz	r0, 80092dc <__smakebuf_r+0x44>
 80092c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092cc:	059a      	lsls	r2, r3, #22
 80092ce:	d4ef      	bmi.n	80092b0 <__smakebuf_r+0x18>
 80092d0:	f023 0303 	bic.w	r3, r3, #3
 80092d4:	f043 0302 	orr.w	r3, r3, #2
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	e7e3      	b.n	80092a4 <__smakebuf_r+0xc>
 80092dc:	4b0d      	ldr	r3, [pc, #52]	; (8009314 <__smakebuf_r+0x7c>)
 80092de:	62b3      	str	r3, [r6, #40]	; 0x28
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	6020      	str	r0, [r4, #0]
 80092e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	9b00      	ldr	r3, [sp, #0]
 80092ec:	6120      	str	r0, [r4, #16]
 80092ee:	6163      	str	r3, [r4, #20]
 80092f0:	9b01      	ldr	r3, [sp, #4]
 80092f2:	b15b      	cbz	r3, 800930c <__smakebuf_r+0x74>
 80092f4:	4630      	mov	r0, r6
 80092f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092fa:	f000 f86b 	bl	80093d4 <_isatty_r>
 80092fe:	b128      	cbz	r0, 800930c <__smakebuf_r+0x74>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f023 0303 	bic.w	r3, r3, #3
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	89a0      	ldrh	r0, [r4, #12]
 800930e:	4305      	orrs	r5, r0
 8009310:	81a5      	strh	r5, [r4, #12]
 8009312:	e7cd      	b.n	80092b0 <__smakebuf_r+0x18>
 8009314:	08008ae1 	.word	0x08008ae1

08009318 <_malloc_usable_size_r>:
 8009318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800931c:	1f18      	subs	r0, r3, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfbc      	itt	lt
 8009322:	580b      	ldrlt	r3, [r1, r0]
 8009324:	18c0      	addlt	r0, r0, r3
 8009326:	4770      	bx	lr

08009328 <_raise_r>:
 8009328:	291f      	cmp	r1, #31
 800932a:	b538      	push	{r3, r4, r5, lr}
 800932c:	4604      	mov	r4, r0
 800932e:	460d      	mov	r5, r1
 8009330:	d904      	bls.n	800933c <_raise_r+0x14>
 8009332:	2316      	movs	r3, #22
 8009334:	6003      	str	r3, [r0, #0]
 8009336:	f04f 30ff 	mov.w	r0, #4294967295
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800933e:	b112      	cbz	r2, 8009346 <_raise_r+0x1e>
 8009340:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009344:	b94b      	cbnz	r3, 800935a <_raise_r+0x32>
 8009346:	4620      	mov	r0, r4
 8009348:	f000 f830 	bl	80093ac <_getpid_r>
 800934c:	462a      	mov	r2, r5
 800934e:	4601      	mov	r1, r0
 8009350:	4620      	mov	r0, r4
 8009352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009356:	f000 b817 	b.w	8009388 <_kill_r>
 800935a:	2b01      	cmp	r3, #1
 800935c:	d00a      	beq.n	8009374 <_raise_r+0x4c>
 800935e:	1c59      	adds	r1, r3, #1
 8009360:	d103      	bne.n	800936a <_raise_r+0x42>
 8009362:	2316      	movs	r3, #22
 8009364:	6003      	str	r3, [r0, #0]
 8009366:	2001      	movs	r0, #1
 8009368:	e7e7      	b.n	800933a <_raise_r+0x12>
 800936a:	2400      	movs	r4, #0
 800936c:	4628      	mov	r0, r5
 800936e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009372:	4798      	blx	r3
 8009374:	2000      	movs	r0, #0
 8009376:	e7e0      	b.n	800933a <_raise_r+0x12>

08009378 <raise>:
 8009378:	4b02      	ldr	r3, [pc, #8]	; (8009384 <raise+0xc>)
 800937a:	4601      	mov	r1, r0
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	f7ff bfd3 	b.w	8009328 <_raise_r>
 8009382:	bf00      	nop
 8009384:	20000020 	.word	0x20000020

08009388 <_kill_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	2300      	movs	r3, #0
 800938c:	4d06      	ldr	r5, [pc, #24]	; (80093a8 <_kill_r+0x20>)
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	4611      	mov	r1, r2
 8009394:	602b      	str	r3, [r5, #0]
 8009396:	f7f8 fb62 	bl	8001a5e <_kill>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	d102      	bne.n	80093a4 <_kill_r+0x1c>
 800939e:	682b      	ldr	r3, [r5, #0]
 80093a0:	b103      	cbz	r3, 80093a4 <_kill_r+0x1c>
 80093a2:	6023      	str	r3, [r4, #0]
 80093a4:	bd38      	pop	{r3, r4, r5, pc}
 80093a6:	bf00      	nop
 80093a8:	200013c0 	.word	0x200013c0

080093ac <_getpid_r>:
 80093ac:	f7f8 bb50 	b.w	8001a50 <_getpid>

080093b0 <_fstat_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	2300      	movs	r3, #0
 80093b4:	4d06      	ldr	r5, [pc, #24]	; (80093d0 <_fstat_r+0x20>)
 80093b6:	4604      	mov	r4, r0
 80093b8:	4608      	mov	r0, r1
 80093ba:	4611      	mov	r1, r2
 80093bc:	602b      	str	r3, [r5, #0]
 80093be:	f7f8 fbac 	bl	8001b1a <_fstat>
 80093c2:	1c43      	adds	r3, r0, #1
 80093c4:	d102      	bne.n	80093cc <_fstat_r+0x1c>
 80093c6:	682b      	ldr	r3, [r5, #0]
 80093c8:	b103      	cbz	r3, 80093cc <_fstat_r+0x1c>
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	bd38      	pop	{r3, r4, r5, pc}
 80093ce:	bf00      	nop
 80093d0:	200013c0 	.word	0x200013c0

080093d4 <_isatty_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	2300      	movs	r3, #0
 80093d8:	4d05      	ldr	r5, [pc, #20]	; (80093f0 <_isatty_r+0x1c>)
 80093da:	4604      	mov	r4, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	f7f8 fbaa 	bl	8001b38 <_isatty>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d102      	bne.n	80093ee <_isatty_r+0x1a>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	b103      	cbz	r3, 80093ee <_isatty_r+0x1a>
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	bd38      	pop	{r3, r4, r5, pc}
 80093f0:	200013c0 	.word	0x200013c0

080093f4 <pow>:
 80093f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f8:	4614      	mov	r4, r2
 80093fa:	461d      	mov	r5, r3
 80093fc:	4680      	mov	r8, r0
 80093fe:	4689      	mov	r9, r1
 8009400:	f000 f862 	bl	80094c8 <__ieee754_pow>
 8009404:	4622      	mov	r2, r4
 8009406:	4606      	mov	r6, r0
 8009408:	460f      	mov	r7, r1
 800940a:	462b      	mov	r3, r5
 800940c:	4620      	mov	r0, r4
 800940e:	4629      	mov	r1, r5
 8009410:	f7f7 fafc 	bl	8000a0c <__aeabi_dcmpun>
 8009414:	bbc8      	cbnz	r0, 800948a <pow+0x96>
 8009416:	2200      	movs	r2, #0
 8009418:	2300      	movs	r3, #0
 800941a:	4640      	mov	r0, r8
 800941c:	4649      	mov	r1, r9
 800941e:	f7f7 fac3 	bl	80009a8 <__aeabi_dcmpeq>
 8009422:	b1b8      	cbz	r0, 8009454 <pow+0x60>
 8009424:	2200      	movs	r2, #0
 8009426:	2300      	movs	r3, #0
 8009428:	4620      	mov	r0, r4
 800942a:	4629      	mov	r1, r5
 800942c:	f7f7 fabc 	bl	80009a8 <__aeabi_dcmpeq>
 8009430:	2800      	cmp	r0, #0
 8009432:	d141      	bne.n	80094b8 <pow+0xc4>
 8009434:	4620      	mov	r0, r4
 8009436:	4629      	mov	r1, r5
 8009438:	f000 fe3b 	bl	800a0b2 <finite>
 800943c:	b328      	cbz	r0, 800948a <pow+0x96>
 800943e:	2200      	movs	r2, #0
 8009440:	2300      	movs	r3, #0
 8009442:	4620      	mov	r0, r4
 8009444:	4629      	mov	r1, r5
 8009446:	f7f7 fab9 	bl	80009bc <__aeabi_dcmplt>
 800944a:	b1f0      	cbz	r0, 800948a <pow+0x96>
 800944c:	f7fc fa7c 	bl	8005948 <__errno>
 8009450:	2322      	movs	r3, #34	; 0x22
 8009452:	e019      	b.n	8009488 <pow+0x94>
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	f000 fe2b 	bl	800a0b2 <finite>
 800945c:	b9c8      	cbnz	r0, 8009492 <pow+0x9e>
 800945e:	4640      	mov	r0, r8
 8009460:	4649      	mov	r1, r9
 8009462:	f000 fe26 	bl	800a0b2 <finite>
 8009466:	b1a0      	cbz	r0, 8009492 <pow+0x9e>
 8009468:	4620      	mov	r0, r4
 800946a:	4629      	mov	r1, r5
 800946c:	f000 fe21 	bl	800a0b2 <finite>
 8009470:	b178      	cbz	r0, 8009492 <pow+0x9e>
 8009472:	4632      	mov	r2, r6
 8009474:	463b      	mov	r3, r7
 8009476:	4630      	mov	r0, r6
 8009478:	4639      	mov	r1, r7
 800947a:	f7f7 fac7 	bl	8000a0c <__aeabi_dcmpun>
 800947e:	2800      	cmp	r0, #0
 8009480:	d0e4      	beq.n	800944c <pow+0x58>
 8009482:	f7fc fa61 	bl	8005948 <__errno>
 8009486:	2321      	movs	r3, #33	; 0x21
 8009488:	6003      	str	r3, [r0, #0]
 800948a:	4630      	mov	r0, r6
 800948c:	4639      	mov	r1, r7
 800948e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009492:	2200      	movs	r2, #0
 8009494:	2300      	movs	r3, #0
 8009496:	4630      	mov	r0, r6
 8009498:	4639      	mov	r1, r7
 800949a:	f7f7 fa85 	bl	80009a8 <__aeabi_dcmpeq>
 800949e:	2800      	cmp	r0, #0
 80094a0:	d0f3      	beq.n	800948a <pow+0x96>
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f000 fe04 	bl	800a0b2 <finite>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d0ed      	beq.n	800948a <pow+0x96>
 80094ae:	4620      	mov	r0, r4
 80094b0:	4629      	mov	r1, r5
 80094b2:	f000 fdfe 	bl	800a0b2 <finite>
 80094b6:	e7c8      	b.n	800944a <pow+0x56>
 80094b8:	2600      	movs	r6, #0
 80094ba:	4f01      	ldr	r7, [pc, #4]	; (80094c0 <pow+0xcc>)
 80094bc:	e7e5      	b.n	800948a <pow+0x96>
 80094be:	bf00      	nop
 80094c0:	3ff00000 	.word	0x3ff00000
 80094c4:	00000000 	.word	0x00000000

080094c8 <__ieee754_pow>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	b093      	sub	sp, #76	; 0x4c
 80094ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094d2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80094d6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80094da:	4689      	mov	r9, r1
 80094dc:	ea56 0102 	orrs.w	r1, r6, r2
 80094e0:	4680      	mov	r8, r0
 80094e2:	d111      	bne.n	8009508 <__ieee754_pow+0x40>
 80094e4:	1803      	adds	r3, r0, r0
 80094e6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80094ea:	4152      	adcs	r2, r2
 80094ec:	4299      	cmp	r1, r3
 80094ee:	4b82      	ldr	r3, [pc, #520]	; (80096f8 <__ieee754_pow+0x230>)
 80094f0:	4193      	sbcs	r3, r2
 80094f2:	f080 84b9 	bcs.w	8009e68 <__ieee754_pow+0x9a0>
 80094f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094fa:	4640      	mov	r0, r8
 80094fc:	4649      	mov	r1, r9
 80094fe:	f7f6 fe35 	bl	800016c <__adddf3>
 8009502:	4683      	mov	fp, r0
 8009504:	468c      	mov	ip, r1
 8009506:	e06f      	b.n	80095e8 <__ieee754_pow+0x120>
 8009508:	4b7c      	ldr	r3, [pc, #496]	; (80096fc <__ieee754_pow+0x234>)
 800950a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800950e:	429c      	cmp	r4, r3
 8009510:	464d      	mov	r5, r9
 8009512:	4682      	mov	sl, r0
 8009514:	dc06      	bgt.n	8009524 <__ieee754_pow+0x5c>
 8009516:	d101      	bne.n	800951c <__ieee754_pow+0x54>
 8009518:	2800      	cmp	r0, #0
 800951a:	d1ec      	bne.n	80094f6 <__ieee754_pow+0x2e>
 800951c:	429e      	cmp	r6, r3
 800951e:	dc01      	bgt.n	8009524 <__ieee754_pow+0x5c>
 8009520:	d10f      	bne.n	8009542 <__ieee754_pow+0x7a>
 8009522:	b172      	cbz	r2, 8009542 <__ieee754_pow+0x7a>
 8009524:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009528:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800952c:	ea55 050a 	orrs.w	r5, r5, sl
 8009530:	d1e1      	bne.n	80094f6 <__ieee754_pow+0x2e>
 8009532:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009536:	18db      	adds	r3, r3, r3
 8009538:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800953c:	4152      	adcs	r2, r2
 800953e:	429d      	cmp	r5, r3
 8009540:	e7d5      	b.n	80094ee <__ieee754_pow+0x26>
 8009542:	2d00      	cmp	r5, #0
 8009544:	da39      	bge.n	80095ba <__ieee754_pow+0xf2>
 8009546:	4b6e      	ldr	r3, [pc, #440]	; (8009700 <__ieee754_pow+0x238>)
 8009548:	429e      	cmp	r6, r3
 800954a:	dc52      	bgt.n	80095f2 <__ieee754_pow+0x12a>
 800954c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009550:	429e      	cmp	r6, r3
 8009552:	f340 849c 	ble.w	8009e8e <__ieee754_pow+0x9c6>
 8009556:	1533      	asrs	r3, r6, #20
 8009558:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800955c:	2b14      	cmp	r3, #20
 800955e:	dd0f      	ble.n	8009580 <__ieee754_pow+0xb8>
 8009560:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009564:	fa22 f103 	lsr.w	r1, r2, r3
 8009568:	fa01 f303 	lsl.w	r3, r1, r3
 800956c:	4293      	cmp	r3, r2
 800956e:	f040 848e 	bne.w	8009e8e <__ieee754_pow+0x9c6>
 8009572:	f001 0101 	and.w	r1, r1, #1
 8009576:	f1c1 0302 	rsb	r3, r1, #2
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	b182      	cbz	r2, 80095a0 <__ieee754_pow+0xd8>
 800957e:	e05d      	b.n	800963c <__ieee754_pow+0x174>
 8009580:	2a00      	cmp	r2, #0
 8009582:	d159      	bne.n	8009638 <__ieee754_pow+0x170>
 8009584:	f1c3 0314 	rsb	r3, r3, #20
 8009588:	fa46 f103 	asr.w	r1, r6, r3
 800958c:	fa01 f303 	lsl.w	r3, r1, r3
 8009590:	42b3      	cmp	r3, r6
 8009592:	f040 8479 	bne.w	8009e88 <__ieee754_pow+0x9c0>
 8009596:	f001 0101 	and.w	r1, r1, #1
 800959a:	f1c1 0302 	rsb	r3, r1, #2
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	4b58      	ldr	r3, [pc, #352]	; (8009704 <__ieee754_pow+0x23c>)
 80095a2:	429e      	cmp	r6, r3
 80095a4:	d132      	bne.n	800960c <__ieee754_pow+0x144>
 80095a6:	2f00      	cmp	r7, #0
 80095a8:	f280 846a 	bge.w	8009e80 <__ieee754_pow+0x9b8>
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	2000      	movs	r0, #0
 80095b2:	4954      	ldr	r1, [pc, #336]	; (8009704 <__ieee754_pow+0x23c>)
 80095b4:	f7f7 f8ba 	bl	800072c <__aeabi_ddiv>
 80095b8:	e7a3      	b.n	8009502 <__ieee754_pow+0x3a>
 80095ba:	2300      	movs	r3, #0
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	2a00      	cmp	r2, #0
 80095c0:	d13c      	bne.n	800963c <__ieee754_pow+0x174>
 80095c2:	4b4e      	ldr	r3, [pc, #312]	; (80096fc <__ieee754_pow+0x234>)
 80095c4:	429e      	cmp	r6, r3
 80095c6:	d1eb      	bne.n	80095a0 <__ieee754_pow+0xd8>
 80095c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80095cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80095d0:	ea53 030a 	orrs.w	r3, r3, sl
 80095d4:	f000 8448 	beq.w	8009e68 <__ieee754_pow+0x9a0>
 80095d8:	4b4b      	ldr	r3, [pc, #300]	; (8009708 <__ieee754_pow+0x240>)
 80095da:	429c      	cmp	r4, r3
 80095dc:	dd0b      	ble.n	80095f6 <__ieee754_pow+0x12e>
 80095de:	2f00      	cmp	r7, #0
 80095e0:	f2c0 8448 	blt.w	8009e74 <__ieee754_pow+0x9ac>
 80095e4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80095e8:	4658      	mov	r0, fp
 80095ea:	4661      	mov	r1, ip
 80095ec:	b013      	add	sp, #76	; 0x4c
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f2:	2302      	movs	r3, #2
 80095f4:	e7e2      	b.n	80095bc <__ieee754_pow+0xf4>
 80095f6:	2f00      	cmp	r7, #0
 80095f8:	f04f 0b00 	mov.w	fp, #0
 80095fc:	f04f 0c00 	mov.w	ip, #0
 8009600:	daf2      	bge.n	80095e8 <__ieee754_pow+0x120>
 8009602:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009606:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800960a:	e7ed      	b.n	80095e8 <__ieee754_pow+0x120>
 800960c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009610:	d106      	bne.n	8009620 <__ieee754_pow+0x158>
 8009612:	4642      	mov	r2, r8
 8009614:	464b      	mov	r3, r9
 8009616:	4640      	mov	r0, r8
 8009618:	4649      	mov	r1, r9
 800961a:	f7f6 ff5d 	bl	80004d8 <__aeabi_dmul>
 800961e:	e770      	b.n	8009502 <__ieee754_pow+0x3a>
 8009620:	4b3a      	ldr	r3, [pc, #232]	; (800970c <__ieee754_pow+0x244>)
 8009622:	429f      	cmp	r7, r3
 8009624:	d10a      	bne.n	800963c <__ieee754_pow+0x174>
 8009626:	2d00      	cmp	r5, #0
 8009628:	db08      	blt.n	800963c <__ieee754_pow+0x174>
 800962a:	4640      	mov	r0, r8
 800962c:	4649      	mov	r1, r9
 800962e:	b013      	add	sp, #76	; 0x4c
 8009630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	f000 bc5e 	b.w	8009ef4 <__ieee754_sqrt>
 8009638:	2300      	movs	r3, #0
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	4640      	mov	r0, r8
 800963e:	4649      	mov	r1, r9
 8009640:	f000 fd34 	bl	800a0ac <fabs>
 8009644:	4683      	mov	fp, r0
 8009646:	468c      	mov	ip, r1
 8009648:	f1ba 0f00 	cmp.w	sl, #0
 800964c:	d128      	bne.n	80096a0 <__ieee754_pow+0x1d8>
 800964e:	b124      	cbz	r4, 800965a <__ieee754_pow+0x192>
 8009650:	4b2c      	ldr	r3, [pc, #176]	; (8009704 <__ieee754_pow+0x23c>)
 8009652:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009656:	429a      	cmp	r2, r3
 8009658:	d122      	bne.n	80096a0 <__ieee754_pow+0x1d8>
 800965a:	2f00      	cmp	r7, #0
 800965c:	da07      	bge.n	800966e <__ieee754_pow+0x1a6>
 800965e:	465a      	mov	r2, fp
 8009660:	4663      	mov	r3, ip
 8009662:	2000      	movs	r0, #0
 8009664:	4927      	ldr	r1, [pc, #156]	; (8009704 <__ieee754_pow+0x23c>)
 8009666:	f7f7 f861 	bl	800072c <__aeabi_ddiv>
 800966a:	4683      	mov	fp, r0
 800966c:	468c      	mov	ip, r1
 800966e:	2d00      	cmp	r5, #0
 8009670:	daba      	bge.n	80095e8 <__ieee754_pow+0x120>
 8009672:	9b00      	ldr	r3, [sp, #0]
 8009674:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009678:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800967c:	4323      	orrs	r3, r4
 800967e:	d108      	bne.n	8009692 <__ieee754_pow+0x1ca>
 8009680:	465a      	mov	r2, fp
 8009682:	4663      	mov	r3, ip
 8009684:	4658      	mov	r0, fp
 8009686:	4661      	mov	r1, ip
 8009688:	f7f6 fd6e 	bl	8000168 <__aeabi_dsub>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	e790      	b.n	80095b4 <__ieee754_pow+0xec>
 8009692:	9b00      	ldr	r3, [sp, #0]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d1a7      	bne.n	80095e8 <__ieee754_pow+0x120>
 8009698:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800969c:	469c      	mov	ip, r3
 800969e:	e7a3      	b.n	80095e8 <__ieee754_pow+0x120>
 80096a0:	0feb      	lsrs	r3, r5, #31
 80096a2:	3b01      	subs	r3, #1
 80096a4:	930c      	str	r3, [sp, #48]	; 0x30
 80096a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096a8:	9b00      	ldr	r3, [sp, #0]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	d104      	bne.n	80096b8 <__ieee754_pow+0x1f0>
 80096ae:	4642      	mov	r2, r8
 80096b0:	464b      	mov	r3, r9
 80096b2:	4640      	mov	r0, r8
 80096b4:	4649      	mov	r1, r9
 80096b6:	e7e7      	b.n	8009688 <__ieee754_pow+0x1c0>
 80096b8:	4b15      	ldr	r3, [pc, #84]	; (8009710 <__ieee754_pow+0x248>)
 80096ba:	429e      	cmp	r6, r3
 80096bc:	f340 80f6 	ble.w	80098ac <__ieee754_pow+0x3e4>
 80096c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80096c4:	429e      	cmp	r6, r3
 80096c6:	4b10      	ldr	r3, [pc, #64]	; (8009708 <__ieee754_pow+0x240>)
 80096c8:	dd09      	ble.n	80096de <__ieee754_pow+0x216>
 80096ca:	429c      	cmp	r4, r3
 80096cc:	dc0c      	bgt.n	80096e8 <__ieee754_pow+0x220>
 80096ce:	2f00      	cmp	r7, #0
 80096d0:	da0c      	bge.n	80096ec <__ieee754_pow+0x224>
 80096d2:	2000      	movs	r0, #0
 80096d4:	b013      	add	sp, #76	; 0x4c
 80096d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096da:	f000 bce2 	b.w	800a0a2 <__math_oflow>
 80096de:	429c      	cmp	r4, r3
 80096e0:	dbf5      	blt.n	80096ce <__ieee754_pow+0x206>
 80096e2:	4b08      	ldr	r3, [pc, #32]	; (8009704 <__ieee754_pow+0x23c>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	dd15      	ble.n	8009714 <__ieee754_pow+0x24c>
 80096e8:	2f00      	cmp	r7, #0
 80096ea:	dcf2      	bgt.n	80096d2 <__ieee754_pow+0x20a>
 80096ec:	2000      	movs	r0, #0
 80096ee:	b013      	add	sp, #76	; 0x4c
 80096f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	f000 bcd0 	b.w	800a098 <__math_uflow>
 80096f8:	fff00000 	.word	0xfff00000
 80096fc:	7ff00000 	.word	0x7ff00000
 8009700:	433fffff 	.word	0x433fffff
 8009704:	3ff00000 	.word	0x3ff00000
 8009708:	3fefffff 	.word	0x3fefffff
 800970c:	3fe00000 	.word	0x3fe00000
 8009710:	41e00000 	.word	0x41e00000
 8009714:	4661      	mov	r1, ip
 8009716:	2200      	movs	r2, #0
 8009718:	4658      	mov	r0, fp
 800971a:	4b5f      	ldr	r3, [pc, #380]	; (8009898 <__ieee754_pow+0x3d0>)
 800971c:	f7f6 fd24 	bl	8000168 <__aeabi_dsub>
 8009720:	a355      	add	r3, pc, #340	; (adr r3, 8009878 <__ieee754_pow+0x3b0>)
 8009722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009726:	4604      	mov	r4, r0
 8009728:	460d      	mov	r5, r1
 800972a:	f7f6 fed5 	bl	80004d8 <__aeabi_dmul>
 800972e:	a354      	add	r3, pc, #336	; (adr r3, 8009880 <__ieee754_pow+0x3b8>)
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	4606      	mov	r6, r0
 8009736:	460f      	mov	r7, r1
 8009738:	4620      	mov	r0, r4
 800973a:	4629      	mov	r1, r5
 800973c:	f7f6 fecc 	bl	80004d8 <__aeabi_dmul>
 8009740:	2200      	movs	r2, #0
 8009742:	4682      	mov	sl, r0
 8009744:	468b      	mov	fp, r1
 8009746:	4620      	mov	r0, r4
 8009748:	4629      	mov	r1, r5
 800974a:	4b54      	ldr	r3, [pc, #336]	; (800989c <__ieee754_pow+0x3d4>)
 800974c:	f7f6 fec4 	bl	80004d8 <__aeabi_dmul>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	a14c      	add	r1, pc, #304	; (adr r1, 8009888 <__ieee754_pow+0x3c0>)
 8009756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800975a:	f7f6 fd05 	bl	8000168 <__aeabi_dsub>
 800975e:	4622      	mov	r2, r4
 8009760:	462b      	mov	r3, r5
 8009762:	f7f6 feb9 	bl	80004d8 <__aeabi_dmul>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	2000      	movs	r0, #0
 800976c:	494c      	ldr	r1, [pc, #304]	; (80098a0 <__ieee754_pow+0x3d8>)
 800976e:	f7f6 fcfb 	bl	8000168 <__aeabi_dsub>
 8009772:	4622      	mov	r2, r4
 8009774:	462b      	mov	r3, r5
 8009776:	4680      	mov	r8, r0
 8009778:	4689      	mov	r9, r1
 800977a:	4620      	mov	r0, r4
 800977c:	4629      	mov	r1, r5
 800977e:	f7f6 feab 	bl	80004d8 <__aeabi_dmul>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	4640      	mov	r0, r8
 8009788:	4649      	mov	r1, r9
 800978a:	f7f6 fea5 	bl	80004d8 <__aeabi_dmul>
 800978e:	a340      	add	r3, pc, #256	; (adr r3, 8009890 <__ieee754_pow+0x3c8>)
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f7f6 fea0 	bl	80004d8 <__aeabi_dmul>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4650      	mov	r0, sl
 800979e:	4659      	mov	r1, fp
 80097a0:	f7f6 fce2 	bl	8000168 <__aeabi_dsub>
 80097a4:	f04f 0a00 	mov.w	sl, #0
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4604      	mov	r4, r0
 80097ae:	460d      	mov	r5, r1
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f6 fcda 	bl	800016c <__adddf3>
 80097b8:	4632      	mov	r2, r6
 80097ba:	463b      	mov	r3, r7
 80097bc:	4650      	mov	r0, sl
 80097be:	468b      	mov	fp, r1
 80097c0:	f7f6 fcd2 	bl	8000168 <__aeabi_dsub>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	4620      	mov	r0, r4
 80097ca:	4629      	mov	r1, r5
 80097cc:	f7f6 fccc 	bl	8000168 <__aeabi_dsub>
 80097d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097d4:	9b00      	ldr	r3, [sp, #0]
 80097d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097d8:	3b01      	subs	r3, #1
 80097da:	4313      	orrs	r3, r2
 80097dc:	f04f 0600 	mov.w	r6, #0
 80097e0:	f04f 0200 	mov.w	r2, #0
 80097e4:	bf0c      	ite	eq
 80097e6:	4b2f      	ldreq	r3, [pc, #188]	; (80098a4 <__ieee754_pow+0x3dc>)
 80097e8:	4b2b      	ldrne	r3, [pc, #172]	; (8009898 <__ieee754_pow+0x3d0>)
 80097ea:	4604      	mov	r4, r0
 80097ec:	460d      	mov	r5, r1
 80097ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f2:	e9cd 2300 	strd	r2, r3, [sp]
 80097f6:	4632      	mov	r2, r6
 80097f8:	463b      	mov	r3, r7
 80097fa:	f7f6 fcb5 	bl	8000168 <__aeabi_dsub>
 80097fe:	4652      	mov	r2, sl
 8009800:	465b      	mov	r3, fp
 8009802:	f7f6 fe69 	bl	80004d8 <__aeabi_dmul>
 8009806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800980a:	4680      	mov	r8, r0
 800980c:	4689      	mov	r9, r1
 800980e:	4620      	mov	r0, r4
 8009810:	4629      	mov	r1, r5
 8009812:	f7f6 fe61 	bl	80004d8 <__aeabi_dmul>
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
 800981a:	4640      	mov	r0, r8
 800981c:	4649      	mov	r1, r9
 800981e:	f7f6 fca5 	bl	800016c <__adddf3>
 8009822:	4632      	mov	r2, r6
 8009824:	463b      	mov	r3, r7
 8009826:	4680      	mov	r8, r0
 8009828:	4689      	mov	r9, r1
 800982a:	4650      	mov	r0, sl
 800982c:	4659      	mov	r1, fp
 800982e:	f7f6 fe53 	bl	80004d8 <__aeabi_dmul>
 8009832:	4604      	mov	r4, r0
 8009834:	460d      	mov	r5, r1
 8009836:	460b      	mov	r3, r1
 8009838:	4602      	mov	r2, r0
 800983a:	4649      	mov	r1, r9
 800983c:	4640      	mov	r0, r8
 800983e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009842:	f7f6 fc93 	bl	800016c <__adddf3>
 8009846:	4b18      	ldr	r3, [pc, #96]	; (80098a8 <__ieee754_pow+0x3e0>)
 8009848:	4682      	mov	sl, r0
 800984a:	4299      	cmp	r1, r3
 800984c:	460f      	mov	r7, r1
 800984e:	460e      	mov	r6, r1
 8009850:	f340 82e5 	ble.w	8009e1e <__ieee754_pow+0x956>
 8009854:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009858:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800985c:	4303      	orrs	r3, r0
 800985e:	f000 81df 	beq.w	8009c20 <__ieee754_pow+0x758>
 8009862:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009866:	2200      	movs	r2, #0
 8009868:	2300      	movs	r3, #0
 800986a:	f7f7 f8a7 	bl	80009bc <__aeabi_dcmplt>
 800986e:	3800      	subs	r0, #0
 8009870:	bf18      	it	ne
 8009872:	2001      	movne	r0, #1
 8009874:	e72e      	b.n	80096d4 <__ieee754_pow+0x20c>
 8009876:	bf00      	nop
 8009878:	60000000 	.word	0x60000000
 800987c:	3ff71547 	.word	0x3ff71547
 8009880:	f85ddf44 	.word	0xf85ddf44
 8009884:	3e54ae0b 	.word	0x3e54ae0b
 8009888:	55555555 	.word	0x55555555
 800988c:	3fd55555 	.word	0x3fd55555
 8009890:	652b82fe 	.word	0x652b82fe
 8009894:	3ff71547 	.word	0x3ff71547
 8009898:	3ff00000 	.word	0x3ff00000
 800989c:	3fd00000 	.word	0x3fd00000
 80098a0:	3fe00000 	.word	0x3fe00000
 80098a4:	bff00000 	.word	0xbff00000
 80098a8:	408fffff 	.word	0x408fffff
 80098ac:	4bd2      	ldr	r3, [pc, #840]	; (8009bf8 <__ieee754_pow+0x730>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	402b      	ands	r3, r5
 80098b2:	b943      	cbnz	r3, 80098c6 <__ieee754_pow+0x3fe>
 80098b4:	4658      	mov	r0, fp
 80098b6:	4661      	mov	r1, ip
 80098b8:	4bd0      	ldr	r3, [pc, #832]	; (8009bfc <__ieee754_pow+0x734>)
 80098ba:	f7f6 fe0d 	bl	80004d8 <__aeabi_dmul>
 80098be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80098c2:	4683      	mov	fp, r0
 80098c4:	460c      	mov	r4, r1
 80098c6:	1523      	asrs	r3, r4, #20
 80098c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098cc:	4413      	add	r3, r2
 80098ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80098d0:	4bcb      	ldr	r3, [pc, #812]	; (8009c00 <__ieee754_pow+0x738>)
 80098d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80098d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80098da:	429c      	cmp	r4, r3
 80098dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80098e0:	dd08      	ble.n	80098f4 <__ieee754_pow+0x42c>
 80098e2:	4bc8      	ldr	r3, [pc, #800]	; (8009c04 <__ieee754_pow+0x73c>)
 80098e4:	429c      	cmp	r4, r3
 80098e6:	f340 8199 	ble.w	8009c1c <__ieee754_pow+0x754>
 80098ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ec:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80098f0:	3301      	adds	r3, #1
 80098f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80098f4:	2600      	movs	r6, #0
 80098f6:	00f3      	lsls	r3, r6, #3
 80098f8:	930d      	str	r3, [sp, #52]	; 0x34
 80098fa:	4bc3      	ldr	r3, [pc, #780]	; (8009c08 <__ieee754_pow+0x740>)
 80098fc:	4658      	mov	r0, fp
 80098fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009902:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009906:	4629      	mov	r1, r5
 8009908:	461a      	mov	r2, r3
 800990a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800990e:	4623      	mov	r3, r4
 8009910:	f7f6 fc2a 	bl	8000168 <__aeabi_dsub>
 8009914:	46da      	mov	sl, fp
 8009916:	462b      	mov	r3, r5
 8009918:	4652      	mov	r2, sl
 800991a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800991e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009922:	f7f6 fc23 	bl	800016c <__adddf3>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	2000      	movs	r0, #0
 800992c:	49b7      	ldr	r1, [pc, #732]	; (8009c0c <__ieee754_pow+0x744>)
 800992e:	f7f6 fefd 	bl	800072c <__aeabi_ddiv>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800993a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800993e:	f7f6 fdcb 	bl	80004d8 <__aeabi_dmul>
 8009942:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009946:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800994a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800994e:	2300      	movs	r3, #0
 8009950:	2200      	movs	r2, #0
 8009952:	46ab      	mov	fp, r5
 8009954:	106d      	asrs	r5, r5, #1
 8009956:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800995a:	9304      	str	r3, [sp, #16]
 800995c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009960:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009964:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009968:	4640      	mov	r0, r8
 800996a:	4649      	mov	r1, r9
 800996c:	4614      	mov	r4, r2
 800996e:	461d      	mov	r5, r3
 8009970:	f7f6 fdb2 	bl	80004d8 <__aeabi_dmul>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800997c:	f7f6 fbf4 	bl	8000168 <__aeabi_dsub>
 8009980:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009984:	4606      	mov	r6, r0
 8009986:	460f      	mov	r7, r1
 8009988:	4620      	mov	r0, r4
 800998a:	4629      	mov	r1, r5
 800998c:	f7f6 fbec 	bl	8000168 <__aeabi_dsub>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4650      	mov	r0, sl
 8009996:	4659      	mov	r1, fp
 8009998:	f7f6 fbe6 	bl	8000168 <__aeabi_dsub>
 800999c:	4642      	mov	r2, r8
 800999e:	464b      	mov	r3, r9
 80099a0:	f7f6 fd9a 	bl	80004d8 <__aeabi_dmul>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	4630      	mov	r0, r6
 80099aa:	4639      	mov	r1, r7
 80099ac:	f7f6 fbdc 	bl	8000168 <__aeabi_dsub>
 80099b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099b4:	f7f6 fd90 	bl	80004d8 <__aeabi_dmul>
 80099b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099c0:	4610      	mov	r0, r2
 80099c2:	4619      	mov	r1, r3
 80099c4:	f7f6 fd88 	bl	80004d8 <__aeabi_dmul>
 80099c8:	a379      	add	r3, pc, #484	; (adr r3, 8009bb0 <__ieee754_pow+0x6e8>)
 80099ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ce:	4604      	mov	r4, r0
 80099d0:	460d      	mov	r5, r1
 80099d2:	f7f6 fd81 	bl	80004d8 <__aeabi_dmul>
 80099d6:	a378      	add	r3, pc, #480	; (adr r3, 8009bb8 <__ieee754_pow+0x6f0>)
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f7f6 fbc6 	bl	800016c <__adddf3>
 80099e0:	4622      	mov	r2, r4
 80099e2:	462b      	mov	r3, r5
 80099e4:	f7f6 fd78 	bl	80004d8 <__aeabi_dmul>
 80099e8:	a375      	add	r3, pc, #468	; (adr r3, 8009bc0 <__ieee754_pow+0x6f8>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	f7f6 fbbd 	bl	800016c <__adddf3>
 80099f2:	4622      	mov	r2, r4
 80099f4:	462b      	mov	r3, r5
 80099f6:	f7f6 fd6f 	bl	80004d8 <__aeabi_dmul>
 80099fa:	a373      	add	r3, pc, #460	; (adr r3, 8009bc8 <__ieee754_pow+0x700>)
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	f7f6 fbb4 	bl	800016c <__adddf3>
 8009a04:	4622      	mov	r2, r4
 8009a06:	462b      	mov	r3, r5
 8009a08:	f7f6 fd66 	bl	80004d8 <__aeabi_dmul>
 8009a0c:	a370      	add	r3, pc, #448	; (adr r3, 8009bd0 <__ieee754_pow+0x708>)
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	f7f6 fbab 	bl	800016c <__adddf3>
 8009a16:	4622      	mov	r2, r4
 8009a18:	462b      	mov	r3, r5
 8009a1a:	f7f6 fd5d 	bl	80004d8 <__aeabi_dmul>
 8009a1e:	a36e      	add	r3, pc, #440	; (adr r3, 8009bd8 <__ieee754_pow+0x710>)
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	f7f6 fba2 	bl	800016c <__adddf3>
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	462b      	mov	r3, r5
 8009a30:	4620      	mov	r0, r4
 8009a32:	4629      	mov	r1, r5
 8009a34:	f7f6 fd50 	bl	80004d8 <__aeabi_dmul>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f7f6 fd4a 	bl	80004d8 <__aeabi_dmul>
 8009a44:	4604      	mov	r4, r0
 8009a46:	460d      	mov	r5, r1
 8009a48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a4c:	4642      	mov	r2, r8
 8009a4e:	464b      	mov	r3, r9
 8009a50:	f7f6 fb8c 	bl	800016c <__adddf3>
 8009a54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a58:	f7f6 fd3e 	bl	80004d8 <__aeabi_dmul>
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	462b      	mov	r3, r5
 8009a60:	f7f6 fb84 	bl	800016c <__adddf3>
 8009a64:	4642      	mov	r2, r8
 8009a66:	4606      	mov	r6, r0
 8009a68:	460f      	mov	r7, r1
 8009a6a:	464b      	mov	r3, r9
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	4649      	mov	r1, r9
 8009a70:	f7f6 fd32 	bl	80004d8 <__aeabi_dmul>
 8009a74:	2200      	movs	r2, #0
 8009a76:	4b66      	ldr	r3, [pc, #408]	; (8009c10 <__ieee754_pow+0x748>)
 8009a78:	4682      	mov	sl, r0
 8009a7a:	468b      	mov	fp, r1
 8009a7c:	f7f6 fb76 	bl	800016c <__adddf3>
 8009a80:	4632      	mov	r2, r6
 8009a82:	463b      	mov	r3, r7
 8009a84:	f7f6 fb72 	bl	800016c <__adddf3>
 8009a88:	2400      	movs	r4, #0
 8009a8a:	460d      	mov	r5, r1
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4640      	mov	r0, r8
 8009a92:	4649      	mov	r1, r9
 8009a94:	f7f6 fd20 	bl	80004d8 <__aeabi_dmul>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	4680      	mov	r8, r0
 8009a9c:	4689      	mov	r9, r1
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	4b5b      	ldr	r3, [pc, #364]	; (8009c10 <__ieee754_pow+0x748>)
 8009aa4:	f7f6 fb60 	bl	8000168 <__aeabi_dsub>
 8009aa8:	4652      	mov	r2, sl
 8009aaa:	465b      	mov	r3, fp
 8009aac:	f7f6 fb5c 	bl	8000168 <__aeabi_dsub>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	4639      	mov	r1, r7
 8009ab8:	f7f6 fb56 	bl	8000168 <__aeabi_dsub>
 8009abc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ac0:	f7f6 fd0a 	bl	80004d8 <__aeabi_dmul>
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ace:	462b      	mov	r3, r5
 8009ad0:	f7f6 fd02 	bl	80004d8 <__aeabi_dmul>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4630      	mov	r0, r6
 8009ada:	4639      	mov	r1, r7
 8009adc:	f7f6 fb46 	bl	800016c <__adddf3>
 8009ae0:	2400      	movs	r4, #0
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	460f      	mov	r7, r1
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4640      	mov	r0, r8
 8009aec:	4649      	mov	r1, r9
 8009aee:	f7f6 fb3d 	bl	800016c <__adddf3>
 8009af2:	a33b      	add	r3, pc, #236	; (adr r3, 8009be0 <__ieee754_pow+0x718>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	4620      	mov	r0, r4
 8009afa:	460d      	mov	r5, r1
 8009afc:	f7f6 fcec 	bl	80004d8 <__aeabi_dmul>
 8009b00:	4642      	mov	r2, r8
 8009b02:	464b      	mov	r3, r9
 8009b04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b08:	4620      	mov	r0, r4
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	f7f6 fb2c 	bl	8000168 <__aeabi_dsub>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4630      	mov	r0, r6
 8009b16:	4639      	mov	r1, r7
 8009b18:	f7f6 fb26 	bl	8000168 <__aeabi_dsub>
 8009b1c:	a332      	add	r3, pc, #200	; (adr r3, 8009be8 <__ieee754_pow+0x720>)
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f7f6 fcd9 	bl	80004d8 <__aeabi_dmul>
 8009b26:	a332      	add	r3, pc, #200	; (adr r3, 8009bf0 <__ieee754_pow+0x728>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	460f      	mov	r7, r1
 8009b30:	4620      	mov	r0, r4
 8009b32:	4629      	mov	r1, r5
 8009b34:	f7f6 fcd0 	bl	80004d8 <__aeabi_dmul>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	4639      	mov	r1, r7
 8009b40:	f7f6 fb14 	bl	800016c <__adddf3>
 8009b44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b46:	4b33      	ldr	r3, [pc, #204]	; (8009c14 <__ieee754_pow+0x74c>)
 8009b48:	f04f 0a00 	mov.w	sl, #0
 8009b4c:	4413      	add	r3, r2
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	f7f6 fb0b 	bl	800016c <__adddf3>
 8009b56:	4680      	mov	r8, r0
 8009b58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009b5a:	4689      	mov	r9, r1
 8009b5c:	f7f6 fc52 	bl	8000404 <__aeabi_i2d>
 8009b60:	4604      	mov	r4, r0
 8009b62:	460d      	mov	r5, r1
 8009b64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b66:	4b2c      	ldr	r3, [pc, #176]	; (8009c18 <__ieee754_pow+0x750>)
 8009b68:	4413      	add	r3, r2
 8009b6a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009b6e:	4642      	mov	r2, r8
 8009b70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b74:	464b      	mov	r3, r9
 8009b76:	f7f6 faf9 	bl	800016c <__adddf3>
 8009b7a:	4632      	mov	r2, r6
 8009b7c:	463b      	mov	r3, r7
 8009b7e:	f7f6 faf5 	bl	800016c <__adddf3>
 8009b82:	4622      	mov	r2, r4
 8009b84:	462b      	mov	r3, r5
 8009b86:	f7f6 faf1 	bl	800016c <__adddf3>
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	462b      	mov	r3, r5
 8009b8e:	4650      	mov	r0, sl
 8009b90:	468b      	mov	fp, r1
 8009b92:	f7f6 fae9 	bl	8000168 <__aeabi_dsub>
 8009b96:	4632      	mov	r2, r6
 8009b98:	463b      	mov	r3, r7
 8009b9a:	f7f6 fae5 	bl	8000168 <__aeabi_dsub>
 8009b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ba2:	f7f6 fae1 	bl	8000168 <__aeabi_dsub>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4640      	mov	r0, r8
 8009bac:	4649      	mov	r1, r9
 8009bae:	e60d      	b.n	80097cc <__ieee754_pow+0x304>
 8009bb0:	4a454eef 	.word	0x4a454eef
 8009bb4:	3fca7e28 	.word	0x3fca7e28
 8009bb8:	93c9db65 	.word	0x93c9db65
 8009bbc:	3fcd864a 	.word	0x3fcd864a
 8009bc0:	a91d4101 	.word	0xa91d4101
 8009bc4:	3fd17460 	.word	0x3fd17460
 8009bc8:	518f264d 	.word	0x518f264d
 8009bcc:	3fd55555 	.word	0x3fd55555
 8009bd0:	db6fabff 	.word	0xdb6fabff
 8009bd4:	3fdb6db6 	.word	0x3fdb6db6
 8009bd8:	33333303 	.word	0x33333303
 8009bdc:	3fe33333 	.word	0x3fe33333
 8009be0:	e0000000 	.word	0xe0000000
 8009be4:	3feec709 	.word	0x3feec709
 8009be8:	dc3a03fd 	.word	0xdc3a03fd
 8009bec:	3feec709 	.word	0x3feec709
 8009bf0:	145b01f5 	.word	0x145b01f5
 8009bf4:	be3e2fe0 	.word	0xbe3e2fe0
 8009bf8:	7ff00000 	.word	0x7ff00000
 8009bfc:	43400000 	.word	0x43400000
 8009c00:	0003988e 	.word	0x0003988e
 8009c04:	000bb679 	.word	0x000bb679
 8009c08:	0800a788 	.word	0x0800a788
 8009c0c:	3ff00000 	.word	0x3ff00000
 8009c10:	40080000 	.word	0x40080000
 8009c14:	0800a7a8 	.word	0x0800a7a8
 8009c18:	0800a798 	.word	0x0800a798
 8009c1c:	2601      	movs	r6, #1
 8009c1e:	e66a      	b.n	80098f6 <__ieee754_pow+0x42e>
 8009c20:	a39d      	add	r3, pc, #628	; (adr r3, 8009e98 <__ieee754_pow+0x9d0>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	4640      	mov	r0, r8
 8009c28:	4649      	mov	r1, r9
 8009c2a:	f7f6 fa9f 	bl	800016c <__adddf3>
 8009c2e:	4622      	mov	r2, r4
 8009c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c34:	462b      	mov	r3, r5
 8009c36:	4650      	mov	r0, sl
 8009c38:	4639      	mov	r1, r7
 8009c3a:	f7f6 fa95 	bl	8000168 <__aeabi_dsub>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c46:	f7f6 fed7 	bl	80009f8 <__aeabi_dcmpgt>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	f47f ae09 	bne.w	8009862 <__ieee754_pow+0x39a>
 8009c50:	4aa3      	ldr	r2, [pc, #652]	; (8009ee0 <__ieee754_pow+0xa18>)
 8009c52:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009c56:	4293      	cmp	r3, r2
 8009c58:	f340 8101 	ble.w	8009e5e <__ieee754_pow+0x996>
 8009c5c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009c60:	2000      	movs	r0, #0
 8009c62:	151b      	asrs	r3, r3, #20
 8009c64:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009c68:	fa4a f303 	asr.w	r3, sl, r3
 8009c6c:	4433      	add	r3, r6
 8009c6e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009c72:	4f9c      	ldr	r7, [pc, #624]	; (8009ee4 <__ieee754_pow+0xa1c>)
 8009c74:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009c78:	4117      	asrs	r7, r2
 8009c7a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009c7e:	ea23 0107 	bic.w	r1, r3, r7
 8009c82:	f1c2 0214 	rsb	r2, r2, #20
 8009c86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	fa4a fa02 	asr.w	sl, sl, r2
 8009c90:	2e00      	cmp	r6, #0
 8009c92:	4602      	mov	r2, r0
 8009c94:	4629      	mov	r1, r5
 8009c96:	4620      	mov	r0, r4
 8009c98:	bfb8      	it	lt
 8009c9a:	f1ca 0a00 	rsblt	sl, sl, #0
 8009c9e:	f7f6 fa63 	bl	8000168 <__aeabi_dsub>
 8009ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009caa:	2400      	movs	r4, #0
 8009cac:	4642      	mov	r2, r8
 8009cae:	464b      	mov	r3, r9
 8009cb0:	f7f6 fa5c 	bl	800016c <__adddf3>
 8009cb4:	a37a      	add	r3, pc, #488	; (adr r3, 8009ea0 <__ieee754_pow+0x9d8>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	460d      	mov	r5, r1
 8009cbe:	f7f6 fc0b 	bl	80004d8 <__aeabi_dmul>
 8009cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460f      	mov	r7, r1
 8009cca:	4620      	mov	r0, r4
 8009ccc:	4629      	mov	r1, r5
 8009cce:	f7f6 fa4b 	bl	8000168 <__aeabi_dsub>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	4649      	mov	r1, r9
 8009cda:	f7f6 fa45 	bl	8000168 <__aeabi_dsub>
 8009cde:	a372      	add	r3, pc, #456	; (adr r3, 8009ea8 <__ieee754_pow+0x9e0>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7f6 fbf8 	bl	80004d8 <__aeabi_dmul>
 8009ce8:	a371      	add	r3, pc, #452	; (adr r3, 8009eb0 <__ieee754_pow+0x9e8>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	4680      	mov	r8, r0
 8009cf0:	4689      	mov	r9, r1
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	f7f6 fbef 	bl	80004d8 <__aeabi_dmul>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4640      	mov	r0, r8
 8009d00:	4649      	mov	r1, r9
 8009d02:	f7f6 fa33 	bl	800016c <__adddf3>
 8009d06:	4604      	mov	r4, r0
 8009d08:	460d      	mov	r5, r1
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4630      	mov	r0, r6
 8009d10:	4639      	mov	r1, r7
 8009d12:	f7f6 fa2b 	bl	800016c <__adddf3>
 8009d16:	4632      	mov	r2, r6
 8009d18:	463b      	mov	r3, r7
 8009d1a:	4680      	mov	r8, r0
 8009d1c:	4689      	mov	r9, r1
 8009d1e:	f7f6 fa23 	bl	8000168 <__aeabi_dsub>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4620      	mov	r0, r4
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7f6 fa1d 	bl	8000168 <__aeabi_dsub>
 8009d2e:	4642      	mov	r2, r8
 8009d30:	4606      	mov	r6, r0
 8009d32:	460f      	mov	r7, r1
 8009d34:	464b      	mov	r3, r9
 8009d36:	4640      	mov	r0, r8
 8009d38:	4649      	mov	r1, r9
 8009d3a:	f7f6 fbcd 	bl	80004d8 <__aeabi_dmul>
 8009d3e:	a35e      	add	r3, pc, #376	; (adr r3, 8009eb8 <__ieee754_pow+0x9f0>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	4604      	mov	r4, r0
 8009d46:	460d      	mov	r5, r1
 8009d48:	f7f6 fbc6 	bl	80004d8 <__aeabi_dmul>
 8009d4c:	a35c      	add	r3, pc, #368	; (adr r3, 8009ec0 <__ieee754_pow+0x9f8>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	f7f6 fa09 	bl	8000168 <__aeabi_dsub>
 8009d56:	4622      	mov	r2, r4
 8009d58:	462b      	mov	r3, r5
 8009d5a:	f7f6 fbbd 	bl	80004d8 <__aeabi_dmul>
 8009d5e:	a35a      	add	r3, pc, #360	; (adr r3, 8009ec8 <__ieee754_pow+0xa00>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f7f6 fa02 	bl	800016c <__adddf3>
 8009d68:	4622      	mov	r2, r4
 8009d6a:	462b      	mov	r3, r5
 8009d6c:	f7f6 fbb4 	bl	80004d8 <__aeabi_dmul>
 8009d70:	a357      	add	r3, pc, #348	; (adr r3, 8009ed0 <__ieee754_pow+0xa08>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7f6 f9f7 	bl	8000168 <__aeabi_dsub>
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	462b      	mov	r3, r5
 8009d7e:	f7f6 fbab 	bl	80004d8 <__aeabi_dmul>
 8009d82:	a355      	add	r3, pc, #340	; (adr r3, 8009ed8 <__ieee754_pow+0xa10>)
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	f7f6 f9f0 	bl	800016c <__adddf3>
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	462b      	mov	r3, r5
 8009d90:	f7f6 fba2 	bl	80004d8 <__aeabi_dmul>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4640      	mov	r0, r8
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	f7f6 f9e4 	bl	8000168 <__aeabi_dsub>
 8009da0:	4604      	mov	r4, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	4640      	mov	r0, r8
 8009daa:	4649      	mov	r1, r9
 8009dac:	f7f6 fb94 	bl	80004d8 <__aeabi_dmul>
 8009db0:	2200      	movs	r2, #0
 8009db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009dba:	4620      	mov	r0, r4
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	f7f6 f9d3 	bl	8000168 <__aeabi_dsub>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dca:	f7f6 fcaf 	bl	800072c <__aeabi_ddiv>
 8009dce:	4632      	mov	r2, r6
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	463b      	mov	r3, r7
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	f7f6 fb7d 	bl	80004d8 <__aeabi_dmul>
 8009dde:	4632      	mov	r2, r6
 8009de0:	463b      	mov	r3, r7
 8009de2:	f7f6 f9c3 	bl	800016c <__adddf3>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4620      	mov	r0, r4
 8009dec:	4629      	mov	r1, r5
 8009dee:	f7f6 f9bb 	bl	8000168 <__aeabi_dsub>
 8009df2:	4642      	mov	r2, r8
 8009df4:	464b      	mov	r3, r9
 8009df6:	f7f6 f9b7 	bl	8000168 <__aeabi_dsub>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	2000      	movs	r0, #0
 8009e00:	4939      	ldr	r1, [pc, #228]	; (8009ee8 <__ieee754_pow+0xa20>)
 8009e02:	f7f6 f9b1 	bl	8000168 <__aeabi_dsub>
 8009e06:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009e0a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009e0e:	da29      	bge.n	8009e64 <__ieee754_pow+0x99c>
 8009e10:	4652      	mov	r2, sl
 8009e12:	f000 f955 	bl	800a0c0 <scalbn>
 8009e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e1a:	f7ff bbfe 	b.w	800961a <__ieee754_pow+0x152>
 8009e1e:	4b33      	ldr	r3, [pc, #204]	; (8009eec <__ieee754_pow+0xa24>)
 8009e20:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009e24:	429f      	cmp	r7, r3
 8009e26:	f77f af13 	ble.w	8009c50 <__ieee754_pow+0x788>
 8009e2a:	4b31      	ldr	r3, [pc, #196]	; (8009ef0 <__ieee754_pow+0xa28>)
 8009e2c:	440b      	add	r3, r1
 8009e2e:	4303      	orrs	r3, r0
 8009e30:	d009      	beq.n	8009e46 <__ieee754_pow+0x97e>
 8009e32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e36:	2200      	movs	r2, #0
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f7f6 fdbf 	bl	80009bc <__aeabi_dcmplt>
 8009e3e:	3800      	subs	r0, #0
 8009e40:	bf18      	it	ne
 8009e42:	2001      	movne	r0, #1
 8009e44:	e453      	b.n	80096ee <__ieee754_pow+0x226>
 8009e46:	4622      	mov	r2, r4
 8009e48:	462b      	mov	r3, r5
 8009e4a:	f7f6 f98d 	bl	8000168 <__aeabi_dsub>
 8009e4e:	4642      	mov	r2, r8
 8009e50:	464b      	mov	r3, r9
 8009e52:	f7f6 fdc7 	bl	80009e4 <__aeabi_dcmpge>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f43f aefa 	beq.w	8009c50 <__ieee754_pow+0x788>
 8009e5c:	e7e9      	b.n	8009e32 <__ieee754_pow+0x96a>
 8009e5e:	f04f 0a00 	mov.w	sl, #0
 8009e62:	e720      	b.n	8009ca6 <__ieee754_pow+0x7de>
 8009e64:	4621      	mov	r1, r4
 8009e66:	e7d6      	b.n	8009e16 <__ieee754_pow+0x94e>
 8009e68:	f04f 0b00 	mov.w	fp, #0
 8009e6c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009ee8 <__ieee754_pow+0xa20>
 8009e70:	f7ff bbba 	b.w	80095e8 <__ieee754_pow+0x120>
 8009e74:	f04f 0b00 	mov.w	fp, #0
 8009e78:	f04f 0c00 	mov.w	ip, #0
 8009e7c:	f7ff bbb4 	b.w	80095e8 <__ieee754_pow+0x120>
 8009e80:	4640      	mov	r0, r8
 8009e82:	4649      	mov	r1, r9
 8009e84:	f7ff bb3d 	b.w	8009502 <__ieee754_pow+0x3a>
 8009e88:	9200      	str	r2, [sp, #0]
 8009e8a:	f7ff bb89 	b.w	80095a0 <__ieee754_pow+0xd8>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f7ff bb73 	b.w	800957a <__ieee754_pow+0xb2>
 8009e94:	f3af 8000 	nop.w
 8009e98:	652b82fe 	.word	0x652b82fe
 8009e9c:	3c971547 	.word	0x3c971547
 8009ea0:	00000000 	.word	0x00000000
 8009ea4:	3fe62e43 	.word	0x3fe62e43
 8009ea8:	fefa39ef 	.word	0xfefa39ef
 8009eac:	3fe62e42 	.word	0x3fe62e42
 8009eb0:	0ca86c39 	.word	0x0ca86c39
 8009eb4:	be205c61 	.word	0xbe205c61
 8009eb8:	72bea4d0 	.word	0x72bea4d0
 8009ebc:	3e663769 	.word	0x3e663769
 8009ec0:	c5d26bf1 	.word	0xc5d26bf1
 8009ec4:	3ebbbd41 	.word	0x3ebbbd41
 8009ec8:	af25de2c 	.word	0xaf25de2c
 8009ecc:	3f11566a 	.word	0x3f11566a
 8009ed0:	16bebd93 	.word	0x16bebd93
 8009ed4:	3f66c16c 	.word	0x3f66c16c
 8009ed8:	5555553e 	.word	0x5555553e
 8009edc:	3fc55555 	.word	0x3fc55555
 8009ee0:	3fe00000 	.word	0x3fe00000
 8009ee4:	000fffff 	.word	0x000fffff
 8009ee8:	3ff00000 	.word	0x3ff00000
 8009eec:	4090cbff 	.word	0x4090cbff
 8009ef0:	3f6f3400 	.word	0x3f6f3400

08009ef4 <__ieee754_sqrt>:
 8009ef4:	f8df c158 	ldr.w	ip, [pc, #344]	; 800a050 <__ieee754_sqrt+0x15c>
 8009ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009efc:	ea3c 0c01 	bics.w	ip, ip, r1
 8009f00:	4606      	mov	r6, r0
 8009f02:	460d      	mov	r5, r1
 8009f04:	460c      	mov	r4, r1
 8009f06:	460a      	mov	r2, r1
 8009f08:	4607      	mov	r7, r0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	d10f      	bne.n	8009f2e <__ieee754_sqrt+0x3a>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	f7f6 fae1 	bl	80004d8 <__aeabi_dmul>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	f7f6 f925 	bl	800016c <__adddf3>
 8009f22:	4606      	mov	r6, r0
 8009f24:	460d      	mov	r5, r1
 8009f26:	4630      	mov	r0, r6
 8009f28:	4629      	mov	r1, r5
 8009f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2e:	2900      	cmp	r1, #0
 8009f30:	dc0e      	bgt.n	8009f50 <__ieee754_sqrt+0x5c>
 8009f32:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009f36:	ea5c 0707 	orrs.w	r7, ip, r7
 8009f3a:	d0f4      	beq.n	8009f26 <__ieee754_sqrt+0x32>
 8009f3c:	b141      	cbz	r1, 8009f50 <__ieee754_sqrt+0x5c>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	f7f6 f911 	bl	8000168 <__aeabi_dsub>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	f7f6 fbef 	bl	800072c <__aeabi_ddiv>
 8009f4e:	e7e8      	b.n	8009f22 <__ieee754_sqrt+0x2e>
 8009f50:	1521      	asrs	r1, r4, #20
 8009f52:	d075      	beq.n	800a040 <__ieee754_sqrt+0x14c>
 8009f54:	07cc      	lsls	r4, r1, #31
 8009f56:	f04f 0400 	mov.w	r4, #0
 8009f5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009f5e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8009f62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009f66:	bf5e      	ittt	pl
 8009f68:	0fd9      	lsrpl	r1, r3, #31
 8009f6a:	005b      	lslpl	r3, r3, #1
 8009f6c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8009f70:	0fd9      	lsrs	r1, r3, #31
 8009f72:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8009f76:	2516      	movs	r5, #22
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f7e:	107f      	asrs	r7, r7, #1
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	1846      	adds	r6, r0, r1
 8009f84:	4296      	cmp	r6, r2
 8009f86:	bfde      	ittt	le
 8009f88:	1b92      	suble	r2, r2, r6
 8009f8a:	1870      	addle	r0, r6, r1
 8009f8c:	1864      	addle	r4, r4, r1
 8009f8e:	0052      	lsls	r2, r2, #1
 8009f90:	3d01      	subs	r5, #1
 8009f92:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009f96:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009f9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f9e:	d1f0      	bne.n	8009f82 <__ieee754_sqrt+0x8e>
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	f04f 0e20 	mov.w	lr, #32
 8009fa6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009faa:	4282      	cmp	r2, r0
 8009fac:	eb06 0c05 	add.w	ip, r6, r5
 8009fb0:	dc02      	bgt.n	8009fb8 <__ieee754_sqrt+0xc4>
 8009fb2:	d113      	bne.n	8009fdc <__ieee754_sqrt+0xe8>
 8009fb4:	459c      	cmp	ip, r3
 8009fb6:	d811      	bhi.n	8009fdc <__ieee754_sqrt+0xe8>
 8009fb8:	f1bc 0f00 	cmp.w	ip, #0
 8009fbc:	eb0c 0506 	add.w	r5, ip, r6
 8009fc0:	da43      	bge.n	800a04a <__ieee754_sqrt+0x156>
 8009fc2:	2d00      	cmp	r5, #0
 8009fc4:	db41      	blt.n	800a04a <__ieee754_sqrt+0x156>
 8009fc6:	f100 0801 	add.w	r8, r0, #1
 8009fca:	1a12      	subs	r2, r2, r0
 8009fcc:	4640      	mov	r0, r8
 8009fce:	459c      	cmp	ip, r3
 8009fd0:	bf88      	it	hi
 8009fd2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009fd6:	eba3 030c 	sub.w	r3, r3, ip
 8009fda:	4431      	add	r1, r6
 8009fdc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009fe0:	f1be 0e01 	subs.w	lr, lr, #1
 8009fe4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8009fe8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009fec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009ff0:	d1db      	bne.n	8009faa <__ieee754_sqrt+0xb6>
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	d006      	beq.n	800a004 <__ieee754_sqrt+0x110>
 8009ff6:	1c48      	adds	r0, r1, #1
 8009ff8:	bf0b      	itete	eq
 8009ffa:	4671      	moveq	r1, lr
 8009ffc:	3101      	addne	r1, #1
 8009ffe:	3401      	addeq	r4, #1
 800a000:	f021 0101 	bicne.w	r1, r1, #1
 800a004:	1063      	asrs	r3, r4, #1
 800a006:	0849      	lsrs	r1, r1, #1
 800a008:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a00c:	07e2      	lsls	r2, r4, #31
 800a00e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a012:	bf48      	it	mi
 800a014:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a018:	460e      	mov	r6, r1
 800a01a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a01e:	e782      	b.n	8009f26 <__ieee754_sqrt+0x32>
 800a020:	0ada      	lsrs	r2, r3, #11
 800a022:	3815      	subs	r0, #21
 800a024:	055b      	lsls	r3, r3, #21
 800a026:	2a00      	cmp	r2, #0
 800a028:	d0fa      	beq.n	800a020 <__ieee754_sqrt+0x12c>
 800a02a:	02d5      	lsls	r5, r2, #11
 800a02c:	d50a      	bpl.n	800a044 <__ieee754_sqrt+0x150>
 800a02e:	f1c1 0420 	rsb	r4, r1, #32
 800a032:	fa23 f404 	lsr.w	r4, r3, r4
 800a036:	1e4d      	subs	r5, r1, #1
 800a038:	408b      	lsls	r3, r1
 800a03a:	4322      	orrs	r2, r4
 800a03c:	1b41      	subs	r1, r0, r5
 800a03e:	e789      	b.n	8009f54 <__ieee754_sqrt+0x60>
 800a040:	4608      	mov	r0, r1
 800a042:	e7f0      	b.n	800a026 <__ieee754_sqrt+0x132>
 800a044:	0052      	lsls	r2, r2, #1
 800a046:	3101      	adds	r1, #1
 800a048:	e7ef      	b.n	800a02a <__ieee754_sqrt+0x136>
 800a04a:	4680      	mov	r8, r0
 800a04c:	e7bd      	b.n	8009fca <__ieee754_sqrt+0xd6>
 800a04e:	bf00      	nop
 800a050:	7ff00000 	.word	0x7ff00000

0800a054 <with_errno>:
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	4604      	mov	r4, r0
 800a058:	460d      	mov	r5, r1
 800a05a:	4616      	mov	r6, r2
 800a05c:	f7fb fc74 	bl	8005948 <__errno>
 800a060:	4629      	mov	r1, r5
 800a062:	6006      	str	r6, [r0, #0]
 800a064:	4620      	mov	r0, r4
 800a066:	bd70      	pop	{r4, r5, r6, pc}

0800a068 <xflow>:
 800a068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a06a:	4615      	mov	r5, r2
 800a06c:	461c      	mov	r4, r3
 800a06e:	b180      	cbz	r0, 800a092 <xflow+0x2a>
 800a070:	4610      	mov	r0, r2
 800a072:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a076:	e9cd 0100 	strd	r0, r1, [sp]
 800a07a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a07e:	4628      	mov	r0, r5
 800a080:	4621      	mov	r1, r4
 800a082:	f7f6 fa29 	bl	80004d8 <__aeabi_dmul>
 800a086:	2222      	movs	r2, #34	; 0x22
 800a088:	b003      	add	sp, #12
 800a08a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a08e:	f7ff bfe1 	b.w	800a054 <with_errno>
 800a092:	4610      	mov	r0, r2
 800a094:	4619      	mov	r1, r3
 800a096:	e7ee      	b.n	800a076 <xflow+0xe>

0800a098 <__math_uflow>:
 800a098:	2200      	movs	r2, #0
 800a09a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a09e:	f7ff bfe3 	b.w	800a068 <xflow>

0800a0a2 <__math_oflow>:
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a0a8:	f7ff bfde 	b.w	800a068 <xflow>

0800a0ac <fabs>:
 800a0ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a0b0:	4770      	bx	lr

0800a0b2 <finite>:
 800a0b2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a0b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a0ba:	0fc0      	lsrs	r0, r0, #31
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <scalbn>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	4617      	mov	r7, r2
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	b996      	cbnz	r6, 800a0f6 <scalbn+0x36>
 800a0d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0d4:	4303      	orrs	r3, r0
 800a0d6:	d039      	beq.n	800a14c <scalbn+0x8c>
 800a0d8:	4b33      	ldr	r3, [pc, #204]	; (800a1a8 <scalbn+0xe8>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f7f6 f9fc 	bl	80004d8 <__aeabi_dmul>
 800a0e0:	4b32      	ldr	r3, [pc, #200]	; (800a1ac <scalbn+0xec>)
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	429f      	cmp	r7, r3
 800a0e6:	460d      	mov	r5, r1
 800a0e8:	da0f      	bge.n	800a10a <scalbn+0x4a>
 800a0ea:	a32b      	add	r3, pc, #172	; (adr r3, 800a198 <scalbn+0xd8>)
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7f6 f9f2 	bl	80004d8 <__aeabi_dmul>
 800a0f4:	e006      	b.n	800a104 <scalbn+0x44>
 800a0f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a0fa:	4296      	cmp	r6, r2
 800a0fc:	d10a      	bne.n	800a114 <scalbn+0x54>
 800a0fe:	4602      	mov	r2, r0
 800a100:	f7f6 f834 	bl	800016c <__adddf3>
 800a104:	4604      	mov	r4, r0
 800a106:	460d      	mov	r5, r1
 800a108:	e020      	b.n	800a14c <scalbn+0x8c>
 800a10a:	460b      	mov	r3, r1
 800a10c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a110:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a114:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a118:	19b9      	adds	r1, r7, r6
 800a11a:	4291      	cmp	r1, r2
 800a11c:	dd0e      	ble.n	800a13c <scalbn+0x7c>
 800a11e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a122:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a126:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a12a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a12e:	4820      	ldr	r0, [pc, #128]	; (800a1b0 <scalbn+0xf0>)
 800a130:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a134:	a31a      	add	r3, pc, #104	; (adr r3, 800a1a0 <scalbn+0xe0>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	e7d9      	b.n	800a0f0 <scalbn+0x30>
 800a13c:	2900      	cmp	r1, #0
 800a13e:	dd08      	ble.n	800a152 <scalbn+0x92>
 800a140:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a144:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a148:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a14c:	4620      	mov	r0, r4
 800a14e:	4629      	mov	r1, r5
 800a150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a152:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a156:	da12      	bge.n	800a17e <scalbn+0xbe>
 800a158:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a15c:	429f      	cmp	r7, r3
 800a15e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a162:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800a166:	dcdc      	bgt.n	800a122 <scalbn+0x62>
 800a168:	a30b      	add	r3, pc, #44	; (adr r3, 800a198 <scalbn+0xd8>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a172:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a176:	480f      	ldr	r0, [pc, #60]	; (800a1b4 <scalbn+0xf4>)
 800a178:	f041 011f 	orr.w	r1, r1, #31
 800a17c:	e7b8      	b.n	800a0f0 <scalbn+0x30>
 800a17e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a182:	3136      	adds	r1, #54	; 0x36
 800a184:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a188:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a18c:	4620      	mov	r0, r4
 800a18e:	4629      	mov	r1, r5
 800a190:	2200      	movs	r2, #0
 800a192:	4b09      	ldr	r3, [pc, #36]	; (800a1b8 <scalbn+0xf8>)
 800a194:	e7ac      	b.n	800a0f0 <scalbn+0x30>
 800a196:	bf00      	nop
 800a198:	c2f8f359 	.word	0xc2f8f359
 800a19c:	01a56e1f 	.word	0x01a56e1f
 800a1a0:	8800759c 	.word	0x8800759c
 800a1a4:	7e37e43c 	.word	0x7e37e43c
 800a1a8:	43500000 	.word	0x43500000
 800a1ac:	ffff3cb0 	.word	0xffff3cb0
 800a1b0:	8800759c 	.word	0x8800759c
 800a1b4:	c2f8f359 	.word	0xc2f8f359
 800a1b8:	3c900000 	.word	0x3c900000

0800a1bc <_init>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	bf00      	nop
 800a1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c2:	bc08      	pop	{r3}
 800a1c4:	469e      	mov	lr, r3
 800a1c6:	4770      	bx	lr

0800a1c8 <_fini>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	bf00      	nop
 800a1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ce:	bc08      	pop	{r3}
 800a1d0:	469e      	mov	lr, r3
 800a1d2:	4770      	bx	lr
